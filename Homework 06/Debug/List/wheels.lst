###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          19/Feb/2022  17:13:03
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Homework 06\wheels.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW269E.tmp
#        ("C:\Users\saad\Documents\ece-306\Homework 06\wheels.c" -lC
#        "C:\Users\saad\Documents\ece-306\Homework 06\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Homework 06\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Homework 06\Debug\List\wheels.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Homework 06\Debug\Obj\wheels.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Homework 06\wheels.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x240
   \   union <unnamed> _A_PCIN_L
   \                     _A_PCIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
      2          #include "ports.h"
      3          #include "wheels.h"
      4          #include <string.h>
      5          
      6          extern volatile unsigned int cycle_count;
      7          extern volatile unsigned int stopwatch_milliseconds;
      8          extern volatile unsigned int stopwatch_seconds;
      9          extern volatile unsigned char display_changed;
     10          extern char display_line[4][11];

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          volatile unsigned int wheel_periods;
   \                     wheel_periods:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     12          volatile char state = START;
   \                     state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for state>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          volatile int shapeCounter;
   \                     shapeCounter:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          volatile char nextState = CIRCLE;
   \                     nextState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for nextState>`
     15          extern volatile unsigned int Time_Sequence;
     16          extern volatile unsigned int Last_Time_Sequence;
     17          extern volatile unsigned int time_change;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int delayTime;
   \                     delayTime:
   \   000000                DS8 2
     19          

   \                                 In  segment CODE, align 2
     20          void ShutoffMotors(void){
   \                     ShutoffMotors:
     21            P6OUT &= ~R_FORWARD;
   \   000000   D2C34302     BIC.B   #0x1, &0x243
     22            P6OUT &= ~L_FORWARD;
   \   000004   E2C34302     BIC.B   #0x2, &0x243
     23            P6OUT &= ~R_REVERSE;
   \   000008   E2C24302     BIC.B   #0x4, &0x243
     24            P6OUT &= ~L_REVERSE_2355;
   \   00000C   F2C24302     BIC.B   #0x8, &0x243
     25            RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   000010   82435404     MOV.W   #0x0, &0x454
     26            LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   000014   82435604     MOV.W   #0x0, &0x456
     27            RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000018   82435804     MOV.W   #0x0, &0x458
     28            LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   00001C   82435A04     MOV.W   #0x0, &0x45a
     29          }
   \   000020   1001         RETA
   \   000022                REQUIRE _A_PCOUT_L
   \   000022                REQUIRE _A_TB3CCR1_L
   \   000022                REQUIRE _A_TB3CCR2_L
   \   000022                REQUIRE _A_TB3CCR3_L
   \   000022                REQUIRE _A_TB3CCR4_L
     30          

   \                                 In  segment CODE, align 2
     31          void MotorSafety(void){
   \                     MotorSafety:
     32            if ((((P6IN & R_FORWARD)!=0 && (P6IN & R_REVERSE)!=0) || ((P6IN & L_FORWARD)!=0 && (P6IN & L_REVERSE_2355)!=0))
     33                ||
     34                  ((RIGHT_FORWARD_SPEED!=0 && RIGHT_REVERSE_SPEED!=0) || (LEFT_FORWARD_SPEED!=0 && LEFT_REVERSE_SPEED!=0))){
   \   000000   D2B34102     BIT.B   #0x1, &0x241
   \   000004   0328         JNC     ??MotorSafety_0
   \   000006   E2B24102     BIT.B   #0x4, &0x241
   \   00000A   122C         JC      ??MotorSafety_1
   \                     ??MotorSafety_0:
   \   00000C   E2B34102     BIT.B   #0x2, &0x241
   \   000010   0328         JNC     ??MotorSafety_2
   \   000012   F2B24102     BIT.B   #0x8, &0x241
   \   000016   0C2C         JC      ??MotorSafety_1
   \                     ??MotorSafety_2:
   \   000018   82935404     CMP.W   #0x0, &0x454
   \   00001C   0324         JEQ     ??MotorSafety_3
   \   00001E   82935804     CMP.W   #0x0, &0x458
   \   000022   0620         JNE     ??MotorSafety_1
   \                     ??MotorSafety_3:
   \   000024   82935604     CMP.W   #0x0, &0x456
   \   000028   0824         JEQ     ??MotorSafety_4
   \   00002A   82935A04     CMP.W   #0x0, &0x45a
   \   00002E   0524         JEQ     ??MotorSafety_4
     35              ShutoffMotors();
   \                     ??MotorSafety_1:
   \   000030   ........     CALLA   #ShutoffMotors
     36              P1OUT |= RED_LED;
   \   000034   D2D30202     BIS.B   #0x1, &0x202
   \   000038   1001         RETA
     37            }
     38            else{
     39              P1OUT &= ~RED_LED;
   \                     ??MotorSafety_4:
   \   00003A   D2C30202     BIC.B   #0x1, &0x202
     40            }
     41          }
   \   00003E   1001         RETA
   \   000040                REQUIRE _A_PCIN_L
   \   000040                REQUIRE _A_TB3CCR1_L
   \   000040                REQUIRE _A_TB3CCR3_L
   \   000040                REQUIRE _A_TB3CCR2_L
   \   000040                REQUIRE _A_TB3CCR4_L
   \   000040                REQUIRE _A_PAOUT_L
     42          

   \                                 In  segment CODE, align 2
     43          void RunRightMotor(int val){
   \                     RunRightMotor:
     44            //ShutoffMotors();
     45            if (val>0){
   \   000000   1C93         CMP.W   #0x1, R12
   \   000002   0538         JL      ??RunRightMotor_1
     46              RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000004   82435804     MOV.W   #0x0, &0x458
     47              RIGHT_FORWARD_SPEED = val;
   \   000008   824C5404     MOV.W   R12, &0x454
   \   00000C   0E3C         JMP     ??RunRightMotor_0
     48            }
     49            else if (val==0){
   \                     ??RunRightMotor_1:
   \   00000E   0C93         CMP.W   #0x0, R12
   \   000010   0520         JNE     ??RunRightMotor_2
     50              RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   000012   82435404     MOV.W   #0x0, &0x454
     51              RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000016   82435804     MOV.W   #0x0, &0x458
   \   00001A   073C         JMP     ??RunRightMotor_0
     52            }
     53            else{
     54              RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \                     ??RunRightMotor_2:
   \   00001C   82435404     MOV.W   #0x0, &0x454
     55              RIGHT_REVERSE_SPEED = -val;
   \   000020   0F4C         MOV.W   R12, R15
   \   000022   3FE3         XOR.W   #0xffff, R15
   \   000024   1F53         ADD.W   #0x1, R15
   \   000026   824F5804     MOV.W   R15, &0x458
     56            }
     57            MotorSafety();
   \                     ??RunRightMotor_0:
   \   00002A   ........     CALLA   #MotorSafety
     58          }
   \   00002E   1001         RETA
   \   000030                REQUIRE _A_TB3CCR3_L
   \   000030                REQUIRE _A_TB3CCR1_L
     59          

   \                                 In  segment CODE, align 2
     60          void RunLeftMotor(int val){
   \                     RunLeftMotor:
     61            //ShutoffMotors();
     62            if (val>0){
   \   000000   1C93         CMP.W   #0x1, R12
   \   000002   0538         JL      ??RunLeftMotor_1
     63              LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   000004   82435A04     MOV.W   #0x0, &0x45a
     64              LEFT_FORWARD_SPEED = val;
   \   000008   824C5604     MOV.W   R12, &0x456
   \   00000C   0E3C         JMP     ??RunLeftMotor_0
     65            }
     66            else if (val==0){
   \                     ??RunLeftMotor_1:
   \   00000E   0C93         CMP.W   #0x0, R12
   \   000010   0520         JNE     ??RunLeftMotor_2
     67              LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   000012   82435604     MOV.W   #0x0, &0x456
     68              LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   000016   82435A04     MOV.W   #0x0, &0x45a
   \   00001A   073C         JMP     ??RunLeftMotor_0
     69            }
     70            else{
     71              LEFT_FORWARD_SPEED = WHEEL_OFF;
   \                     ??RunLeftMotor_2:
   \   00001C   82435604     MOV.W   #0x0, &0x456
     72              LEFT_REVERSE_SPEED = -val;
   \   000020   0F4C         MOV.W   R12, R15
   \   000022   3FE3         XOR.W   #0xffff, R15
   \   000024   1F53         ADD.W   #0x1, R15
   \   000026   824F5A04     MOV.W   R15, &0x45a
     73            }
     74            MotorSafety();
   \                     ??RunLeftMotor_0:
   \   00002A   ........     CALLA   #MotorSafety
     75          }
   \   00002E   1001         RETA
   \   000030                REQUIRE _A_TB3CCR4_L
   \   000030                REQUIRE _A_TB3CCR2_L
     76          

   \                                 In  segment CODE, align 2
     77          int Update_Ticks(int max_tick){
   \                     Update_Ticks:
   \   000000   0F4C         MOV.W   R12, R15
     78            if(++wheel_periods>max_tick){
   \   000002   1E42....     MOV.W   &wheel_periods, R14
   \   000006   1E53         ADD.W   #0x1, R14
   \   000008   824E....     MOV.W   R14, &wheel_periods
   \   00000C   0F9E         CMP.W   R14, R15
   \   00000E   042C         JC      ??Update_Ticks_0
     79              wheel_periods=0; // max_tick FOR STOP, 0 FOR CONTINUOUS
   \   000010   8243....     MOV.W   #0x0, &wheel_periods
     80              return 1;
   \   000014   1C43         MOV.W   #0x1, R12
   \   000016   1001         RETA
     81            }
     82            return 0;
   \                     ??Update_Ticks_0:
   \   000018   0C43         MOV.W   #0x0, R12
   \   00001A   1001         RETA
     83          }
     84          

   \                                 In  segment CODE, align 2
     85          int Drive_Path(int speedR, int speedL, int max_ticks){
   \                     Drive_Path:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4E         MOV.W   R14, R11
     86            if (time_change){
   \   000006   8293....     CMP.W   #0x0, &time_change
   \   00000A   1124         JEQ     ??Drive_Path_1
     87              time_change = 0;
   \   00000C   8243....     MOV.W   #0x0, &time_change
     88              RunRightMotor(speedR);
   \   000010   0C4A         MOV.W   R10, R12
   \   000012   ........     CALLA   #RunRightMotor
     89              RunLeftMotor(speedL);
   \   000016   0C4D         MOV.W   R13, R12
   \   000018   ........     CALLA   #RunLeftMotor
     90              if (Update_Ticks(max_ticks)){
   \   00001C   0C4B         MOV.W   R11, R12
   \   00001E   ........     CALLA   #Update_Ticks
   \   000022   0C93         CMP.W   #0x0, R12
   \   000024   0424         JEQ     ??Drive_Path_1
     91                ShutoffMotors();
   \   000026   ........     CALLA   #ShutoffMotors
     92                return 1;
   \   00002A   1C43         MOV.W   #0x1, R12
   \   00002C   013C         JMP     ??Drive_Path_0
     93              }
     94            }
     95            return 0;
   \                     ??Drive_Path_1:
   \   00002E   0C43         MOV.W   #0x0, R12
   \                     ??Drive_Path_0:
   \   000030   1A17         POPM.W  #0x2, R11
   \   000032   1001         RETA
     96          }
     97          
     98          

   \                                 In  segment CODE, align 2
     99          void Circle(void){
   \                     Circle:
    100            if (shapeCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &shapeCounter
   \   000004   0A20         JNE     ??Circle_0
    101              strcpy(display_line[0], "  CIRCLE  ");
   \   000006   3D40....     MOV.W   #`?<Constant "  CIRCLE  ">`, R13
   \   00000A   3C40....     MOV.W   #display_line, R12
   \   00000E   ........     CALLA   #strcpy
    102              display_changed = 1;
   \   000012   D243....     MOV.B   #0x1, &display_changed
    103              shapeCounter++;
   \   000016   9253....     ADD.W   #0x1, &shapeCounter
    104            }
    105            if(shapeCounter==1 || shapeCounter == 2){
   \                     ??Circle_0:
   \   00001A   9293....     CMP.W   #0x1, &shapeCounter
   \   00001E   0324         JEQ     ??Circle_1
   \   000020   A293....     CMP.W   #0x2, &shapeCounter
   \   000024   0C20         JNE     ??Circle_2
    106              if (Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_RCIRCLE_TICK)) shapeCounter++;
   \                     ??Circle_1:
   \   000026   3E400505     MOV.W   #0x505, R14
   \   00002A   3D40B80B     MOV.W   #0xbb8, R13
   \   00002E   3C40204E     MOV.W   #0x4e20, R12
   \   000032   ........     CALLA   #Drive_Path
   \   000036   0C93         CMP.W   #0x0, R12
   \   000038   0224         JEQ     ??Circle_2
   \   00003A   9253....     ADD.W   #0x1, &shapeCounter
    107            }
    108            if (shapeCounter==3) {
   \                     ??Circle_2:
   \   00003E   B2900300.... CMP.W   #0x3, &shapeCounter
   \   000044   0520         JNE     ??Circle_3
    109              shapeCounter = 0 ;
   \   000046   8243....     MOV.W   #0x0, &shapeCounter
    110              state = START;
   \   00004A   F2405300.... MOV.B   #0x53, &state
    111            }
    112          }
   \                     ??Circle_3:
   \   000050   1001         RETA
    113          

   \                                 In  segment CODE, align 2
    114          void Figure8(void){
   \                     Figure8:
    115            if (shapeCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &shapeCounter
   \   000004   0A20         JNE     ??Figure8_1
    116              strcpy(display_line[0], "  FIGURE8 ");
   \   000006   3D40....     MOV.W   #`?<Constant "  FIGURE8 ">`, R13
   \   00000A   3C40....     MOV.W   #display_line, R12
   \   00000E   ........     CALLA   #strcpy
    117              display_changed = 1;
   \   000012   D243....     MOV.B   #0x1, &display_changed
    118              shapeCounter++;
   \   000016   9253....     ADD.W   #0x1, &shapeCounter
    119            }
    120            if(shapeCounter==1 || shapeCounter==3){
   \                     ??Figure8_1:
   \   00001A   9293....     CMP.W   #0x1, &shapeCounter
   \   00001E   0424         JEQ     ??Figure8_2
   \   000020   B2900300.... CMP.W   #0x3, &shapeCounter
   \   000026   0D20         JNE     ??Figure8_3
    121              if (Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_RCIRCLE_TICK)) shapeCounter++;
   \                     ??Figure8_2:
   \   000028   3E400505     MOV.W   #0x505, R14
   \   00002C   3D40B80B     MOV.W   #0xbb8, R13
   \   000030   3C40204E     MOV.W   #0x4e20, R12
   \   000034   ........     CALLA   #Drive_Path
   \   000038   0C93         CMP.W   #0x0, R12
   \   00003A   1524         JEQ     ??Figure8_0
   \   00003C   9253....     ADD.W   #0x1, &shapeCounter
   \   000040   123C         JMP     ??Figure8_0
    122            }
    123            else if(shapeCounter==2 || shapeCounter==4){
   \                     ??Figure8_3:
   \   000042   A293....     CMP.W   #0x2, &shapeCounter
   \   000046   0324         JEQ     ??Figure8_4
   \   000048   A292....     CMP.W   #0x4, &shapeCounter
   \   00004C   0C20         JNE     ??Figure8_0
    124              if (Drive_Path(LCIRC_RIGHT,LCIRC_LEFT, MAX_LCIRCLE_TICK)) shapeCounter++;
   \                     ??Figure8_4:
   \   00004E   3E409C04     MOV.W   #0x49c, R14
   \   000052   3D40204E     MOV.W   #0x4e20, R13
   \   000056   3C40B80B     MOV.W   #0xbb8, R12
   \   00005A   ........     CALLA   #Drive_Path
   \   00005E   0C93         CMP.W   #0x0, R12
   \   000060   0224         JEQ     ??Figure8_0
   \   000062   9253....     ADD.W   #0x1, &shapeCounter
    125            }
    126            if (shapeCounter==5) {
   \                     ??Figure8_0:
   \   000066   B2900500.... CMP.W   #0x5, &shapeCounter
   \   00006C   0520         JNE     ??Figure8_5
    127              state = START;
   \   00006E   F2405300.... MOV.B   #0x53, &state
    128              shapeCounter = 0 ;
   \   000074   8243....     MOV.W   #0x0, &shapeCounter
    129            }
    130          }
   \                     ??Figure8_5:
   \   000078   1001         RETA
    131          

   \                                 In  segment CODE, align 2
    132          void Triangle(void){
   \                     Triangle:
    133            if (shapeCounter == 0 || shapeCounter == 6) {
   \   000000   8293....     CMP.W   #0x0, &shapeCounter
   \   000004   0424         JEQ     ??Triangle_1
   \   000006   B2900600.... CMP.W   #0x6, &shapeCounter
   \   00000C   0A20         JNE     ??Triangle_2
    134              strcpy(display_line[0], " TRIANGLE ");
   \                     ??Triangle_1:
   \   00000E   3D40....     MOV.W   #`?<Constant " TRIANGLE ">`, R13
   \   000012   3C40....     MOV.W   #display_line, R12
   \   000016   ........     CALLA   #strcpy
    135              display_changed = 1;
   \   00001A   D243....     MOV.B   #0x1, &display_changed
    136              shapeCounter++;
   \   00001E   9253....     ADD.W   #0x1, &shapeCounter
    137            }
    138            if(shapeCounter==1 || shapeCounter == 3 || shapeCounter==5 || shapeCounter==8 || shapeCounter==10 || shapeCounter==12){
   \                     ??Triangle_2:
   \   000022   9293....     CMP.W   #0x1, &shapeCounter
   \   000026   1324         JEQ     ??Triangle_3
   \   000028   B2900300.... CMP.W   #0x3, &shapeCounter
   \   00002E   0F24         JEQ     ??Triangle_3
   \   000030   B2900500.... CMP.W   #0x5, &shapeCounter
   \   000036   0B24         JEQ     ??Triangle_3
   \   000038   B292....     CMP.W   #0x8, &shapeCounter
   \   00003C   0824         JEQ     ??Triangle_3
   \   00003E   B2900A00.... CMP.W   #0xa, &shapeCounter
   \   000044   0424         JEQ     ??Triangle_3
   \   000046   B2900C00.... CMP.W   #0xc, &shapeCounter
   \   00004C   0D20         JNE     ??Triangle_4
    139              if (Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT, TRIANGLE_LEG)) shapeCounter++;
   \                     ??Triangle_3:
   \   00004E   3E407800     MOV.W   #0x78, R14
   \   000052   3D40803E     MOV.W   #0x3e80, R13
   \   000056   3C40204E     MOV.W   #0x4e20, R12
   \   00005A   ........     CALLA   #Drive_Path
   \   00005E   0C93         CMP.W   #0x0, R12
   \   000060   2424         JEQ     ??Triangle_0
   \   000062   9253....     ADD.W   #0x1, &shapeCounter
   \   000066   213C         JMP     ??Triangle_0
    140            }
    141            else if(shapeCounter==2 || shapeCounter == 4 || shapeCounter==7 || shapeCounter==9 || shapeCounter==11 || shapeCounter==13){
   \                     ??Triangle_4:
   \   000068   A293....     CMP.W   #0x2, &shapeCounter
   \   00006C   1324         JEQ     ??Triangle_5
   \   00006E   A292....     CMP.W   #0x4, &shapeCounter
   \   000072   1024         JEQ     ??Triangle_5
   \   000074   B2900700.... CMP.W   #0x7, &shapeCounter
   \   00007A   0C24         JEQ     ??Triangle_5
   \   00007C   B2900900.... CMP.W   #0x9, &shapeCounter
   \   000082   0824         JEQ     ??Triangle_5
   \   000084   B2900B00.... CMP.W   #0xb, &shapeCounter
   \   00008A   0424         JEQ     ??Triangle_5
   \   00008C   B2900D00.... CMP.W   #0xd, &shapeCounter
   \   000092   0B20         JNE     ??Triangle_0
    142              if (Drive_Path(TRIANGLE_RIGHT_TICK,TRIANGLE_LEFT_TICK, TRIANGLE_TURN_TICK)) shapeCounter++;
   \                     ??Triangle_5:
   \   000094   3E405E01     MOV.W   #0x15e, R14
   \   000098   0D43         MOV.W   #0x0, R13
   \   00009A   3C40204E     MOV.W   #0x4e20, R12
   \   00009E   ........     CALLA   #Drive_Path
   \   0000A2   0C93         CMP.W   #0x0, R12
   \   0000A4   0224         JEQ     ??Triangle_0
   \   0000A6   9253....     ADD.W   #0x1, &shapeCounter
    143            }
    144            
    145            if (shapeCounter==14) {
   \                     ??Triangle_0:
   \   0000AA   B2900E00.... CMP.W   #0xe, &shapeCounter
   \   0000B0   0520         JNE     ??Triangle_6
    146              shapeCounter = 0;
   \   0000B2   8243....     MOV.W   #0x0, &shapeCounter
    147              state = END;
   \   0000B6   F2404500.... MOV.B   #0x45, &state
    148            }
    149          }
   \                     ??Triangle_6:
   \   0000BC   1001         RETA
    150          
    151          // delays for a specified time and then switches state to global nextState
    152          // make sure nextState is set to desired vlaue before the end of delay

   \                                 In  segment CODE, align 2
    153          void delay(int seconds,int cycles){
   \                     delay:
    154            if(stopwatch_seconds == 0 && cycle_count<=1) display_changed = 1;
   \   000000   8293....     CMP.W   #0x0, &stopwatch_seconds
   \   000004   0520         JNE     ??delay_0
   \   000006   A293....     CMP.W   #0x2, &cycle_count
   \   00000A   022C         JC      ??delay_0
   \   00000C   D243....     MOV.B   #0x1, &display_changed
    155            if(stopwatch_seconds>=seconds && cycle_count >= cycles) {
   \                     ??delay_0:
   \   000010   829C....     CMP.W   R12, &stopwatch_seconds
   \   000014   0A28         JNC     ??delay_1
   \   000016   829D....     CMP.W   R13, &cycle_count
   \   00001A   0728         JNC     ??delay_1
    156              stopwatch_seconds = 0;
   \   00001C   8243....     MOV.W   #0x0, &stopwatch_seconds
    157              cycle_count = 0;
   \   000020   8243....     MOV.W   #0x0, &cycle_count
    158              state = nextState;
   \   000024   D242........ MOV.B   &nextState, &state
    159            }
    160          }
   \                     ??delay_1:
   \   00002A   1001         RETA
    161          
    162          
    163          

   \                                 In  segment CODE, align 2
    164          void StateMachine(void){
   \                     StateMachine:
    165            switch(state){
   \   000000   5E42....     MOV.B   &state, R14
   \   000004   7E804100     SUB.B   #0x41, R14
   \   000008   2B24         JEQ     ??StateMachine_1
   \   00000A   6E83         SUB.B   #0x2, R14
   \   00000C   2D24         JEQ     ??StateMachine_2
   \   00000E   6E83         SUB.B   #0x2, R14
   \   000010   3D24         JEQ     ??StateMachine_3
   \   000012   5E83         SUB.B   #0x1, R14
   \   000014   2F24         JEQ     ??StateMachine_4
   \   000016   7E800D00     SUB.B   #0xd, R14
   \   00001A   0624         JEQ     ??StateMachine_5
   \   00001C   5E83         SUB.B   #0x1, R14
   \   00001E   3024         JEQ     ??StateMachine_6
   \   000020   7E800300     SUB.B   #0x3, R14
   \   000024   1124         JEQ     ??StateMachine_7
   \   000026   1001         RETA
    166              case (START):
    167                strcpy(display_line[0], "WAITING...");
   \                     ??StateMachine_5:
   \   000028   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   00002C   3C40....     MOV.W   #display_line, R12
   \   000030   ........     CALLA   #strcpy
    168                display_changed = 1;
   \   000034   D243....     MOV.B   #0x1, &display_changed
    169                stopwatch_seconds = 0;
   \   000038   8243....     MOV.W   #0x0, &stopwatch_seconds
    170                cycle_count = 0;
   \   00003C   8243....     MOV.W   #0x0, &cycle_count
    171                state = WAIT;
   \   000040   F2405700.... MOV.B   #0x57, &state
    172                break;
   \   000046   1001         RETA
    173              case (WAIT):
    174                delay(3,0);
   \                     ??StateMachine_7:
   \   000048   0D43         MOV.W   #0x0, R13
   \   00004A   3C400300     MOV.W   #0x3, R12
   \   00004E   ........     CALLA   #delay
    175                strcpy(display_line[0], "WAITING...");
   \   000052   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   000056   3C40....     MOV.W   #display_line, R12
   \   00005A   ........     CALLA   #strcpy
    176                break;
   \   00005E   1001         RETA
    177              case (ARM):
    178                //wheel_tick = 0;
    179                //right_tick = 0;
    180                //left_tick = 0;
    181                state = CIRCLE;
   \                     ??StateMachine_1:
   \   000060   F2404300.... MOV.B   #0x43, &state
    182                break;
   \   000066   1001         RETA
    183              case (CIRCLE):
    184                Circle();
   \                     ??StateMachine_2:
   \   000068   ........     CALLA   #Circle
    185                nextState = FIGURE8;
   \   00006C   F2404600.... MOV.B   #0x46, &nextState
    186                break;
   \   000072   1001         RETA
    187              case (FIGURE8):
    188                Figure8();
   \                     ??StateMachine_4:
   \   000074   ........     CALLA   #Figure8
    189                nextState = TRIANGLE;
   \   000078   F2405400.... MOV.B   #0x54, &nextState
    190                break;
   \   00007E   1001         RETA
    191              case (TRIANGLE):
    192                Triangle();
   \                     ??StateMachine_6:
   \   000080   ........     CALLA   #Triangle
    193                nextState = END;
   \   000084   F2404500.... MOV.B   #0x45, &nextState
    194                break;
   \   00008A   1001         RETA
    195              case (END):
    196                strcpy(display_line[0], "    END   ");
   \                     ??StateMachine_3:
   \   00008C   3D40....     MOV.W   #`?<Constant "    END   ">`, R13
   \   000090   3C40....     MOV.W   #display_line, R12
   \   000094   ........     CALLA   #strcpy
    197                display_changed = 1;
   \   000098   D243....     MOV.B   #0x1, &display_changed
    198                break;
    199              default: break;  
    200            }
    201          }
   \   00009C   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for state>`:
   \   000000   53           DC8 83

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for nextState>`:
   \   000000   43           DC8 67

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  CIRCLE  ">`:
   \   000000   202043495243 DC8 "  CIRCLE  "
   \            4C45202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  FIGURE8 ">`:
   \   000000   202046494755 DC8 "  FIGURE8 "
   \            5245382000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " TRIANGLE ">`:
   \   000000   20545249414E DC8 " TRIANGLE "
   \            474C452000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WAITING...">`:
   \   000000   57414954494E DC8 "WAITING..."
   \            472E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    END   ">`:
   \   000000   20202020454E DC8 "    END   "
   \            4420202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Circle
        4   -> Drive_Path
        4   -> strcpy
      8   Drive_Path
        8   -> RunLeftMotor
        8   -> RunRightMotor
        8   -> ShutoffMotors
        8   -> Update_Ticks
      4   Figure8
        4   -> Drive_Path
        4   -> strcpy
      4   MotorSafety
        4   -> ShutoffMotors
      4   RunLeftMotor
        4   -> MotorSafety
      4   RunRightMotor
        4   -> MotorSafety
      4   ShutoffMotors
      4   StateMachine
        4   -> Circle
        4   -> Figure8
        4   -> Triangle
        4   -> delay
        4   -> strcpy
      4   Triangle
        4   -> Drive_Path
        4   -> strcpy
      4   Update_Ticks
      4   delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "    END   ">
      11  ?<Constant "  CIRCLE  ">
      11  ?<Constant "  FIGURE8 ">
      11  ?<Constant " TRIANGLE ">
      11  ?<Constant "WAITING...">
       1  ?<Initializer for nextState>
       1  ?<Initializer for state>
      82  Circle
      52  Drive_Path
     122  Figure8
      64  MotorSafety
      48  RunLeftMotor
      48  RunRightMotor
      34  ShutoffMotors
     158  StateMachine
     190  Triangle
      28  Update_Ticks
       2  _A_PAOUT_L
       2  _A_PCIN_L
       2  _A_PCOUT_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
      44  delay
       2  delayTime
       1  nextState
       2  shapeCounter
       1  state
       2  wheel_periods

 
 870 bytes in segment CODE
  14 bytes in segment DATA16_AN
  55 bytes in segment DATA16_C
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
   6 bytes in segment DATA16_Z
 
 870 bytes of CODE  memory
  57 bytes of CONST memory
   8 bytes of DATA  memory (+ 14 bytes shared)

Errors: none
Warnings: none
