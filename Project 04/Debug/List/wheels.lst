###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          17/Feb/2022  20:31:47
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  \\Mac\Home\Desktop\ece-306\Project 04\wheels.c
#    Command line  =  
#        -f C:\Users\IBRAHI~1\AppData\Local\Temp\EWF2FD.tmp
#        ("\\Mac\Home\Desktop\ece-306\Project 04\wheels.c" -lC
#        "\\Mac\Home\Desktop\ece-306\Project 04\Debug\List" -o
#        "\\Mac\Home\Desktop\ece-306\Project 04\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./ --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        \\Mac\Home\Desktop\ece-306\Project 04\Debug\List\wheels.lst
#    Object file   =  
#        \\Mac\Home\Desktop\ece-306\Project 04\Debug\Obj\wheels.r43
#
###############################################################################

\\Mac\Home\Desktop\ece-306\Project 04\wheels.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2
      2          #include "ports.h"
      3          #include "wheels.h"
      4          #include <string.h>
      5          
      6          extern volatile unsigned int cycle_count;
      7          extern volatile unsigned int stopwatch_milliseconds;
      8          extern volatile unsigned int stopwatch_seconds;
      9          extern volatile unsigned char display_changed;
     10          extern char display_line[4][11];

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          volatile unsigned int wheel_tick;
   \                     wheel_tick:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          volatile unsigned int wheel_periods;
   \                     wheel_periods:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          volatile unsigned int right_tick;
   \                     right_tick:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          volatile unsigned int left_tick;
   \                     left_tick:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     15          volatile char state = START;
   \                     state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for state>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          volatile int shapeCounter;
   \                     shapeCounter:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     17          volatile char nextState = ARM;
   \                     nextState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for nextState>`
     18          extern volatile unsigned int Time_Sequence;
     19          extern volatile unsigned int Last_Time_Sequence;
     20          extern volatile unsigned int time_change;
     21          

   \                                 In  segment CODE, align 2
     22          void RunMotor(int pinForward, volatile unsigned int* tick, int tick_count, int val){
   \                     RunMotor:
   \   000000   1B15         PUSHM.W #0x2, R11
     23              if((*tick)++ >= tick_count){
   \   000002   2A4D         MOV.W   @R13, R10
   \   000004   0B4A         MOV.W   R10, R11
   \   000006   1B53         ADD.W   #0x1, R11
   \   000008   8D4B0000     MOV.W   R11, 0(R13)
   \   00000C   0A9E         CMP.W   R14, R10
   \   00000E   0328         JNC     ??RunMotor_1
     24              P6OUT &= ~pinForward;
   \   000010   C2CC4302     BIC.B   R12, &0x243
     25              return;
   \   000014   123C         JMP     ??RunMotor_0
     26              //P6OUT &= ~pinReverse;
     27            }
     28            if (val>0){
   \                     ??RunMotor_1:
   \   000016   1F93         CMP.W   #0x1, R15
   \   000018   0538         JL      ??RunMotor_2
     29              //P6OUT &= ~pinReverse;
     30              //P6OUT &= ~pinReverse;
     31              P6OUT |= pinForward;
   \   00001A   C2DC4302     BIS.B   R12, &0x243
     32              P6OUT |= pinForward;
   \   00001E   C2DC4302     BIS.B   R12, &0x243
   \   000022   0B3C         JMP     ??RunMotor_0
     33            }
     34            else if (val==0){
   \                     ??RunMotor_2:
   \   000024   0F93         CMP.W   #0x0, R15
   \   000026   0520         JNE     ??RunMotor_3
     35              P6OUT &= ~pinForward;
   \   000028   C2CC4302     BIC.B   R12, &0x243
     36              P6OUT &= ~pinForward;
   \   00002C   C2CC4302     BIC.B   R12, &0x243
   \   000030   043C         JMP     ??RunMotor_0
     37              //P6OUT &= ~pinReverse;
     38              //P6OUT &= ~pinReverse;
     39            }
     40            else{
     41              P6OUT &= ~pinForward;
   \                     ??RunMotor_3:
   \   000032   C2CC4302     BIC.B   R12, &0x243
     42              P6OUT &= ~pinForward;
   \   000036   C2CC4302     BIC.B   R12, &0x243
     43              //P6OUT |= pinReverse;
     44              //P6OUT |= pinReverse;
     45            }
     46           
     47          }
   \                     ??RunMotor_0:
   \   00003A   1A17         POPM.W  #0x2, R11
   \   00003C   1001         RETA
   \   00003E                REQUIRE _A_PCOUT_L
     48          

   \                                 In  segment CODE, align 2
     49          int Update_Ticks(volatile unsigned int* tickCounter, int max_tick, char nState){
   \                     Update_Ticks:
   \   000000   0F4C         MOV.W   R12, R15
     50              if(wheel_tick>=WHEEL_TICK){
   \   000002   B2901400.... CMP.W   #0x14, &wheel_tick
   \   000008   0828         JNC     ??Update_Ticks_0
     51                  wheel_tick = 0;
   \   00000A   8243....     MOV.W   #0x0, &wheel_tick
     52                  right_tick = 0;
   \   00000E   8243....     MOV.W   #0x0, &right_tick
     53                  left_tick = 0;
   \   000012   8243....     MOV.W   #0x0, &left_tick
     54                  (*tickCounter)++;
   \   000016   9F530000     ADD.W   #0x1, 0(R15)
     55                }
     56                if(*tickCounter>max_tick){
   \                     ??Update_Ticks_0:
   \   00001A   2D9F         CMP.W   @R15, R13
   \   00001C   062C         JC      ??Update_Ticks_1
     57                  *tickCounter=0; // max_tick FOR STOP, 0 FOR CONTINUOUS
   \   00001E   8F430000     MOV.W   #0x0, 0(R15)
     58                  state = nState;
   \   000022   C24E....     MOV.B   R14, &state
     59                  return 1;
   \   000026   1C43         MOV.W   #0x1, R12
   \   000028   1001         RETA
     60                }
     61           
     62            return 0;
   \                     ??Update_Ticks_1:
   \   00002A   0C43         MOV.W   #0x0, R12
   \   00002C   1001         RETA
     63          }
     64          

   \                                 In  segment CODE, align 2
     65          int Drive_Path(int right_ticks, int left_ticks, int max_ticks, char endState){
   \                     Drive_Path:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   084D         MOV.W   R13, R8
   \   000006   094E         MOV.W   R14, R9
   \   000008   4A4F         MOV.B   R15, R10
     66            if(1){//time_change){
     67              //time_change = 0;
     68              wheel_tick++;
   \   00000A   9253....     ADD.W   #0x1, &wheel_tick
     69              RunMotor(R_FORWARD,&right_tick,right_ticks,wheel_periods<max_ticks);
   \   00000E   8299....     CMP.W   R9, &wheel_periods
   \   000012   022C         JC      ??Drive_Path_2
   \   000014   5F43         MOV.B   #0x1, R15
   \   000016   013C         JMP     ??Drive_Path_0
   \                     ??Drive_Path_2:
   \   000018   4F43         MOV.B   #0x0, R15
   \                     ??Drive_Path_0:
   \   00001A   4F4F         MOV.B   R15, R15
   \   00001C   0E4B         MOV.W   R11, R14
   \   00001E   3D40....     MOV.W   #right_tick, R13
   \   000022   1C43         MOV.W   #0x1, R12
   \   000024   ........     CALLA   #RunMotor
     70              RunMotor(L_FORWARD,&left_tick,left_ticks,wheel_periods<max_ticks);
   \   000028   8299....     CMP.W   R9, &wheel_periods
   \   00002C   022C         JC      ??Drive_Path_3
   \   00002E   5F43         MOV.B   #0x1, R15
   \   000030   013C         JMP     ??Drive_Path_1
   \                     ??Drive_Path_3:
   \   000032   4F43         MOV.B   #0x0, R15
   \                     ??Drive_Path_1:
   \   000034   4F4F         MOV.B   R15, R15
   \   000036   0E48         MOV.W   R8, R14
   \   000038   3D40....     MOV.W   #left_tick, R13
   \   00003C   2C43         MOV.W   #0x2, R12
   \   00003E   ........     CALLA   #RunMotor
     71              return Update_Ticks(&wheel_periods,max_ticks, endState);
   \   000042   4E4A         MOV.B   R10, R14
   \   000044   0D49         MOV.W   R9, R13
   \   000046   3C40....     MOV.W   #wheel_periods, R12
   \   00004A   ........     CALLA   #Update_Ticks
   \   00004E   3817         POPM.W  #0x4, R11
   \   000050   1001         RETA
     72            }
     73          }
     74          

   \                                 In  segment CODE, align 2
     75          void Drive_Straight(int ticks){
   \                     Drive_Straight:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     76            Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT, ticks, END);
   \   000004   7F404500     MOV.B   #0x45, R15
   \   000008   0E4A         MOV.W   R10, R14
   \   00000A   3D401200     MOV.W   #0x12, R13
   \   00000E   3C401500     MOV.W   #0x15, R12
   \   000012   ........     CALLA   #Drive_Path
     77          }
   \   000016   3A41         POP.W   R10
   \   000018   1001         RETA
     78          

   \                                 In  segment CODE, align 2
     79          void Left_Circle(int ticks){
   \                     Left_Circle:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     80            Drive_Path(LCIRC_RIGHT,LCIRC_LEFT, ticks, END);
   \   000004   7F404500     MOV.B   #0x45, R15
   \   000008   0E4A         MOV.W   R10, R14
   \   00000A   3D401500     MOV.W   #0x15, R13
   \   00000E   3C400500     MOV.W   #0x5, R12
   \   000012   ........     CALLA   #Drive_Path
     81          }
   \   000016   3A41         POP.W   R10
   \   000018   1001         RETA
     82          

   \                                 In  segment CODE, align 2
     83          void Right_Circle(int ticks){
   \                     Right_Circle:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     84            Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, ticks, END);
   \   000004   7F404500     MOV.B   #0x45, R15
   \   000008   0E4A         MOV.W   R10, R14
   \   00000A   3D400500     MOV.W   #0x5, R13
   \   00000E   3C401500     MOV.W   #0x15, R12
   \   000012   ........     CALLA   #Drive_Path
     85          }
   \   000016   3A41         POP.W   R10
   \   000018   1001         RETA
     86          

   \                                 In  segment CODE, align 2
     87          void Circle(void){
   \                     Circle:
     88            if (shapeCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &shapeCounter
   \   000004   1220         JNE     ??Circle_0
     89              strcpy(display_line[0], "  CIRCLE  ");
   \   000006   3D40....     MOV.W   #`?<Constant "  CIRCLE  ">`, R13
   \   00000A   3C40....     MOV.W   #display_line, R12
   \   00000E   ........     CALLA   #strcpy
     90              display_changed = 1;
   \   000012   D243....     MOV.B   #0x1, &display_changed
     91              Update_Ticks(&wheel_periods,MAX_RCIRCLE_TICK, CIRCLE);
   \   000016   7E404300     MOV.B   #0x43, R14
   \   00001A   3D407017     MOV.W   #0x1770, R13
   \   00001E   3C40....     MOV.W   #wheel_periods, R12
   \   000022   ........     CALLA   #Update_Ticks
     92              shapeCounter++;
   \   000026   9253....     ADD.W   #0x1, &shapeCounter
     93            }
     94            if(shapeCounter==1 || shapeCounter == 2){
   \                     ??Circle_0:
   \   00002A   9293....     CMP.W   #0x1, &shapeCounter
   \   00002E   0324         JEQ     ??Circle_1
   \   000030   A293....     CMP.W   #0x2, &shapeCounter
   \   000034   0E20         JNE     ??Circle_2
     95              if (Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_RCIRCLE_TICK, CIRCLE)) shapeCounter++;
   \                     ??Circle_1:
   \   000036   7F404300     MOV.B   #0x43, R15
   \   00003A   3E407017     MOV.W   #0x1770, R14
   \   00003E   3D400500     MOV.W   #0x5, R13
   \   000042   3C401500     MOV.W   #0x15, R12
   \   000046   ........     CALLA   #Drive_Path
   \   00004A   0C93         CMP.W   #0x0, R12
   \   00004C   0224         JEQ     ??Circle_2
   \   00004E   9253....     ADD.W   #0x1, &shapeCounter
     96            }
     97            if (shapeCounter==3) {
   \                     ??Circle_2:
   \   000052   B2900300.... CMP.W   #0x3, &shapeCounter
   \   000058   0520         JNE     ??Circle_3
     98              shapeCounter = 0 ;
   \   00005A   8243....     MOV.W   #0x0, &shapeCounter
     99              state = START;
   \   00005E   F2405300.... MOV.B   #0x53, &state
    100            }
    101          }
   \                     ??Circle_3:
   \   000064   1001         RETA
    102          

   \                                 In  segment CODE, align 2
    103          void Figure8(void){
   \                     Figure8:
    104            if (shapeCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &shapeCounter
   \   000004   1220         JNE     ??Figure8_1
    105              strcpy(display_line[0], "  FIGURE8 ");
   \   000006   3D40....     MOV.W   #`?<Constant "  FIGURE8 ">`, R13
   \   00000A   3C40....     MOV.W   #display_line, R12
   \   00000E   ........     CALLA   #strcpy
    106              display_changed = 1;
   \   000012   D243....     MOV.B   #0x1, &display_changed
    107              Update_Ticks(&wheel_periods,MAX_RCIRCLE_TICK, FIGURE8);
   \   000016   7E404600     MOV.B   #0x46, R14
   \   00001A   3D407017     MOV.W   #0x1770, R13
   \   00001E   3C40....     MOV.W   #wheel_periods, R12
   \   000022   ........     CALLA   #Update_Ticks
    108              shapeCounter++;
   \   000026   9253....     ADD.W   #0x1, &shapeCounter
    109            }
    110            if(shapeCounter==1 || shapeCounter==3){
   \                     ??Figure8_1:
   \   00002A   9293....     CMP.W   #0x1, &shapeCounter
   \   00002E   0424         JEQ     ??Figure8_2
   \   000030   B2900300.... CMP.W   #0x3, &shapeCounter
   \   000036   0F20         JNE     ??Figure8_3
    111              if (Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_RCIRCLE_TICK, FIGURE8)) shapeCounter++;
   \                     ??Figure8_2:
   \   000038   7F404600     MOV.B   #0x46, R15
   \   00003C   3E407017     MOV.W   #0x1770, R14
   \   000040   3D400500     MOV.W   #0x5, R13
   \   000044   3C401500     MOV.W   #0x15, R12
   \   000048   ........     CALLA   #Drive_Path
   \   00004C   0C93         CMP.W   #0x0, R12
   \   00004E   1724         JEQ     ??Figure8_0
   \   000050   9253....     ADD.W   #0x1, &shapeCounter
   \   000054   143C         JMP     ??Figure8_0
    112            }
    113            else if(shapeCounter==2 || shapeCounter==4){
   \                     ??Figure8_3:
   \   000056   A293....     CMP.W   #0x2, &shapeCounter
   \   00005A   0324         JEQ     ??Figure8_4
   \   00005C   A292....     CMP.W   #0x4, &shapeCounter
   \   000060   0E20         JNE     ??Figure8_0
    114              if (Drive_Path(LCIRC_RIGHT,LCIRC_LEFT, MAX_LCIRCLE_TICK, FIGURE8)) shapeCounter++;
   \                     ??Figure8_4:
   \   000062   7F404600     MOV.B   #0x46, R15
   \   000066   3E40B414     MOV.W   #0x14b4, R14
   \   00006A   3D401500     MOV.W   #0x15, R13
   \   00006E   3C400500     MOV.W   #0x5, R12
   \   000072   ........     CALLA   #Drive_Path
   \   000076   0C93         CMP.W   #0x0, R12
   \   000078   0224         JEQ     ??Figure8_0
   \   00007A   9253....     ADD.W   #0x1, &shapeCounter
    115            }
    116            if (shapeCounter==5) {
   \                     ??Figure8_0:
   \   00007E   B2900500.... CMP.W   #0x5, &shapeCounter
   \   000084   0520         JNE     ??Figure8_5
    117              state = START;
   \   000086   F2405300.... MOV.B   #0x53, &state
    118              shapeCounter = 0 ;
   \   00008C   8243....     MOV.W   #0x0, &shapeCounter
    119            }
    120          }
   \                     ??Figure8_5:
   \   000090   1001         RETA
    121          

   \                                 In  segment CODE, align 2
    122          void Triangle(void){
   \                     Triangle:
    123            if (shapeCounter == 0 || shapeCounter == 6) {
   \   000000   8293....     CMP.W   #0x0, &shapeCounter
   \   000004   0424         JEQ     ??Triangle_1
   \   000006   B2900600.... CMP.W   #0x6, &shapeCounter
   \   00000C   1220         JNE     ??Triangle_2
    124              strcpy(display_line[0], " TRIANGLE ");
   \                     ??Triangle_1:
   \   00000E   3D40....     MOV.W   #`?<Constant " TRIANGLE ">`, R13
   \   000012   3C40....     MOV.W   #display_line, R12
   \   000016   ........     CALLA   #strcpy
    125              display_changed = 1;
   \   00001A   D243....     MOV.B   #0x1, &display_changed
    126              Update_Ticks(&wheel_periods,MAX_RCIRCLE_TICK, TRIANGLE);
   \   00001E   7E405400     MOV.B   #0x54, R14
   \   000022   3D407017     MOV.W   #0x1770, R13
   \   000026   3C40....     MOV.W   #wheel_periods, R12
   \   00002A   ........     CALLA   #Update_Ticks
    127              shapeCounter++;
   \   00002E   9253....     ADD.W   #0x1, &shapeCounter
    128            }
    129            if(shapeCounter==1 || shapeCounter == 3 || shapeCounter==5 || shapeCounter==8 || shapeCounter==10 || shapeCounter==12){
   \                     ??Triangle_2:
   \   000032   9293....     CMP.W   #0x1, &shapeCounter
   \   000036   1324         JEQ     ??Triangle_3
   \   000038   B2900300.... CMP.W   #0x3, &shapeCounter
   \   00003E   0F24         JEQ     ??Triangle_3
   \   000040   B2900500.... CMP.W   #0x5, &shapeCounter
   \   000046   0B24         JEQ     ??Triangle_3
   \   000048   B292....     CMP.W   #0x8, &shapeCounter
   \   00004C   0824         JEQ     ??Triangle_3
   \   00004E   B2900A00.... CMP.W   #0xa, &shapeCounter
   \   000054   0424         JEQ     ??Triangle_3
   \   000056   B2900C00.... CMP.W   #0xc, &shapeCounter
   \   00005C   0F20         JNE     ??Triangle_4
    130              if (Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT, TRIANGLE_LEG, TRIANGLE)) shapeCounter++;
   \                     ??Triangle_3:
   \   00005E   7F405400     MOV.B   #0x54, R15
   \   000062   3E40E803     MOV.W   #0x3e8, R14
   \   000066   3D401200     MOV.W   #0x12, R13
   \   00006A   3C401500     MOV.W   #0x15, R12
   \   00006E   ........     CALLA   #Drive_Path
   \   000072   0C93         CMP.W   #0x0, R12
   \   000074   2624         JEQ     ??Triangle_0
   \   000076   9253....     ADD.W   #0x1, &shapeCounter
   \   00007A   233C         JMP     ??Triangle_0
    131            }
    132            else if(shapeCounter==2 || shapeCounter == 4 || shapeCounter==7 || shapeCounter==9 || shapeCounter==11 || shapeCounter==13){
   \                     ??Triangle_4:
   \   00007C   A293....     CMP.W   #0x2, &shapeCounter
   \   000080   1324         JEQ     ??Triangle_5
   \   000082   A292....     CMP.W   #0x4, &shapeCounter
   \   000086   1024         JEQ     ??Triangle_5
   \   000088   B2900700.... CMP.W   #0x7, &shapeCounter
   \   00008E   0C24         JEQ     ??Triangle_5
   \   000090   B2900900.... CMP.W   #0x9, &shapeCounter
   \   000096   0824         JEQ     ??Triangle_5
   \   000098   B2900B00.... CMP.W   #0xb, &shapeCounter
   \   00009E   0424         JEQ     ??Triangle_5
   \   0000A0   B2900D00.... CMP.W   #0xd, &shapeCounter
   \   0000A6   0D20         JNE     ??Triangle_0
    133              if (Drive_Path(TRIANGLE_RIGHT_TICK,TRIANGLE_LEFT_TICK, TRIANGLE_TURN_TICK, TRIANGLE)) shapeCounter++;
   \                     ??Triangle_5:
   \   0000A8   7F405400     MOV.B   #0x54, R15
   \   0000AC   3E40E204     MOV.W   #0x4e2, R14
   \   0000B0   0D43         MOV.W   #0x0, R13
   \   0000B2   3C401500     MOV.W   #0x15, R12
   \   0000B6   ........     CALLA   #Drive_Path
   \   0000BA   0C93         CMP.W   #0x0, R12
   \   0000BC   0224         JEQ     ??Triangle_0
   \   0000BE   9253....     ADD.W   #0x1, &shapeCounter
    134            }
    135            
    136            if (shapeCounter==14) {
   \                     ??Triangle_0:
   \   0000C2   B2900E00.... CMP.W   #0xe, &shapeCounter
   \   0000C8   0520         JNE     ??Triangle_6
    137              shapeCounter = 0;
   \   0000CA   8243....     MOV.W   #0x0, &shapeCounter
    138              state = END;
   \   0000CE   F2404500.... MOV.B   #0x45, &state
    139            }
    140          }
   \                     ??Triangle_6:
   \   0000D4   1001         RETA
    141          
    142          // delays for a specified time and then switches state to global nextState
    143          // make sure nextState is set to desired vlaue before the end of delay

   \                                 In  segment CODE, align 2
    144          void delay(int seconds,int cycles){
   \                     delay:
    145            if(stopwatch_seconds == 0 && cycle_count<=1) display_changed = 1;
   \   000000   8293....     CMP.W   #0x0, &stopwatch_seconds
   \   000004   0520         JNE     ??delay_0
   \   000006   A293....     CMP.W   #0x2, &cycle_count
   \   00000A   022C         JC      ??delay_0
   \   00000C   D243....     MOV.B   #0x1, &display_changed
    146            if(stopwatch_seconds>=seconds && cycle_count >= cycles) {
   \                     ??delay_0:
   \   000010   829C....     CMP.W   R12, &stopwatch_seconds
   \   000014   0A28         JNC     ??delay_1
   \   000016   829D....     CMP.W   R13, &cycle_count
   \   00001A   0728         JNC     ??delay_1
    147              stopwatch_seconds = 0;
   \   00001C   8243....     MOV.W   #0x0, &stopwatch_seconds
    148              cycle_count = 0;
   \   000020   8243....     MOV.W   #0x0, &cycle_count
    149              state = nextState;
   \   000024   D242........ MOV.B   &nextState, &state
    150            }
    151          }
   \                     ??delay_1:
   \   00002A   1001         RETA
    152          
    153          
    154          

   \                                 In  segment CODE, align 2
    155          void StateMachine(void){
   \                     StateMachine:
    156            switch(state){
   \   000000   5E42....     MOV.B   &state, R14
   \   000004   7E804100     SUB.B   #0x41, R14
   \   000008   2424         JEQ     ??StateMachine_1
   \   00000A   6E83         SUB.B   #0x2, R14
   \   00000C   2624         JEQ     ??StateMachine_2
   \   00000E   6E83         SUB.B   #0x2, R14
   \   000010   3624         JEQ     ??StateMachine_3
   \   000012   5E83         SUB.B   #0x1, R14
   \   000014   2824         JEQ     ??StateMachine_4
   \   000016   7E800D00     SUB.B   #0xd, R14
   \   00001A   0624         JEQ     ??StateMachine_5
   \   00001C   5E83         SUB.B   #0x1, R14
   \   00001E   2924         JEQ     ??StateMachine_6
   \   000020   7E800300     SUB.B   #0x3, R14
   \   000024   0A24         JEQ     ??StateMachine_7
   \   000026   1001         RETA
    157              case (START):
    158                strcpy(display_line[0], "WAITING...");
   \                     ??StateMachine_5:
   \   000028   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   00002C   3C40....     MOV.W   #display_line, R12
   \   000030   ........     CALLA   #strcpy
    159                display_changed = 1;
   \   000034   D243....     MOV.B   #0x1, &display_changed
    160                break;
   \   000038   1001         RETA
    161              case (WAIT):
    162                delay(3,0);
   \                     ??StateMachine_7:
   \   00003A   0D43         MOV.W   #0x0, R13
   \   00003C   3C400300     MOV.W   #0x3, R12
   \   000040   ........     CALLA   #delay
    163                strcpy(display_line[0], "WAITING...");
   \   000044   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   000048   3C40....     MOV.W   #display_line, R12
   \   00004C   ........     CALLA   #strcpy
    164                break;
   \   000050   1001         RETA
    165              case (ARM):
    166                //wheel_tick = 0;
    167                //right_tick = 0;
    168                //left_tick = 0;
    169                state = CIRCLE;
   \                     ??StateMachine_1:
   \   000052   F2404300.... MOV.B   #0x43, &state
    170                break;
   \   000058   1001         RETA
    171              case (CIRCLE):
    172                Circle();
   \                     ??StateMachine_2:
   \   00005A   ........     CALLA   #Circle
    173                nextState = FIGURE8;
   \   00005E   F2404600.... MOV.B   #0x46, &nextState
    174                break;
   \   000064   1001         RETA
    175              case (FIGURE8):
    176                Figure8();
   \                     ??StateMachine_4:
   \   000066   ........     CALLA   #Figure8
    177                nextState = TRIANGLE;
   \   00006A   F2405400.... MOV.B   #0x54, &nextState
    178                break;
   \   000070   1001         RETA
    179              case (TRIANGLE):
    180                Triangle();
   \                     ??StateMachine_6:
   \   000072   ........     CALLA   #Triangle
    181                nextState = END;
   \   000076   F2404500.... MOV.B   #0x45, &nextState
    182                break;
   \   00007C   1001         RETA
    183              case (END):
    184                strcpy(display_line[0], "    END   ");
   \                     ??StateMachine_3:
   \   00007E   3D40....     MOV.W   #`?<Constant "    END   ">`, R13
   \   000082   3C40....     MOV.W   #display_line, R12
   \   000086   ........     CALLA   #strcpy
    185                display_changed = 1;
   \   00008A   D243....     MOV.B   #0x1, &display_changed
    186                break;
    187              default: break;  
    188            }
    189          }
   \   00008E   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for state>`:
   \   000000   53           DC8 83

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for nextState>`:
   \   000000   41           DC8 65

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  CIRCLE  ">`:
   \   000000   202043495243 DC8 "  CIRCLE  "
   \            4C45202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  FIGURE8 ">`:
   \   000000   202046494755 DC8 "  FIGURE8 "
   \            5245382000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " TRIANGLE ">`:
   \   000000   20545249414E DC8 " TRIANGLE "
   \            474C452000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WAITING...">`:
   \   000000   57414954494E DC8 "WAITING..."
   \            472E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    END   ">`:
   \   000000   20202020454E DC8 "    END   "
   \            4420202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Circle
        4   -> Drive_Path
        4   -> Update_Ticks
        4   -> strcpy
     12   Drive_Path
       12   -> RunMotor
       12   -> Update_Ticks
      6   Drive_Straight
        6   -> Drive_Path
      4   Figure8
        4   -> Drive_Path
        4   -> Update_Ticks
        4   -> strcpy
      6   Left_Circle
        6   -> Drive_Path
      6   Right_Circle
        6   -> Drive_Path
      8   RunMotor
      4   StateMachine
        4   -> Circle
        4   -> Figure8
        4   -> Triangle
        4   -> delay
        4   -> strcpy
      4   Triangle
        4   -> Drive_Path
        4   -> Update_Ticks
        4   -> strcpy
      4   Update_Ticks
      4   delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "    END   ">
      11  ?<Constant "  CIRCLE  ">
      11  ?<Constant "  FIGURE8 ">
      11  ?<Constant " TRIANGLE ">
      11  ?<Constant "WAITING...">
       1  ?<Initializer for nextState>
       1  ?<Initializer for state>
     102  Circle
      82  Drive_Path
      26  Drive_Straight
     146  Figure8
      26  Left_Circle
      26  Right_Circle
      62  RunMotor
     144  StateMachine
     214  Triangle
      46  Update_Ticks
       2  _A_PCOUT_L
      44  delay
       2  left_tick
       1  nextState
       2  right_tick
       2  shapeCounter
       1  state
       2  wheel_periods
       2  wheel_tick

 
 918 bytes in segment CODE
   2 bytes in segment DATA16_AN
  55 bytes in segment DATA16_C
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
  10 bytes in segment DATA16_Z
 
 918 bytes of CODE  memory
  57 bytes of CONST memory
  12 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
