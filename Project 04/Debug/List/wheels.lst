###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          04/Feb/2022  17:34:30
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ECE306\Project 04\wheels.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW6222.tmp
#        ("C:\Users\saad\Documents\ECE306\Project 04\wheels.c" -lC
#        "C:\Users\saad\Documents\ECE306\Project 04\Debug\List" -o
#        "C:\Users\saad\Documents\ECE306\Project 04\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ECE306\Project 04\Debug\List\wheels.lst
#    Object file   =  
#        C:\Users\saad\Documents\ECE306\Project 04\Debug\Obj\wheels.r43
#
###############################################################################

C:\Users\saad\Documents\ECE306\Project 04\wheels.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2
      2          #include "ports.h"
      3          #include "wheels.h"
      4          
      5          extern volatile unsigned int cycle_count;
      6          extern volatile unsigned int stopwatch_milliseconds;
      7          extern volatile unsigned int stopwatch_seconds;
      8          extern volatile unsigned int wheel_tick;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      9          volatile unsigned int wheel_periods;
   \                     wheel_periods:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          volatile unsigned int right_tick;
   \                     right_tick:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          volatile unsigned int left_tick;
   \                     left_tick:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     12          volatile char state = START;
   \                     state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for state>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          volatile int figure8count;
   \                     figure8count:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          volatile char nextState = ARM;
   \                     nextState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for nextState>`
     15          

   \                                 In  segment CODE, align 2
     16          void RunMotor(int pinForward, volatile unsigned int* tick, int tick_count, int val){
   \                     RunMotor:
   \   000000   1B15         PUSHM.W #0x2, R11
     17            if((*tick)++ >= tick_count){
   \   000002   2A4D         MOV.W   @R13, R10
   \   000004   0B4A         MOV.W   R10, R11
   \   000006   1B53         ADD.W   #0x1, R11
   \   000008   8D4B0000     MOV.W   R11, 0(R13)
   \   00000C   0A9E         CMP.W   R14, R10
   \   00000E   0328         JNC     ??RunMotor_1
     18              P6OUT &= ~pinForward;
   \   000010   C2CC4302     BIC.B   R12, &0x243
     19              return;
   \   000014   123C         JMP     ??RunMotor_0
     20              //P6OUT &= ~pinReverse;
     21            }
     22            if (val>0){
   \                     ??RunMotor_1:
   \   000016   1F93         CMP.W   #0x1, R15
   \   000018   0538         JL      ??RunMotor_2
     23              //P6OUT &= ~pinReverse;
     24              //P6OUT &= ~pinReverse;
     25              P6OUT |= pinForward;
   \   00001A   C2DC4302     BIS.B   R12, &0x243
     26              P6OUT |= pinForward;
   \   00001E   C2DC4302     BIS.B   R12, &0x243
   \   000022   0B3C         JMP     ??RunMotor_0
     27            }
     28            else if (val==0){
   \                     ??RunMotor_2:
   \   000024   0F93         CMP.W   #0x0, R15
   \   000026   0520         JNE     ??RunMotor_3
     29              P6OUT &= ~pinForward;
   \   000028   C2CC4302     BIC.B   R12, &0x243
     30              P6OUT &= ~pinForward;
   \   00002C   C2CC4302     BIC.B   R12, &0x243
   \   000030   043C         JMP     ??RunMotor_0
     31              //P6OUT &= ~pinReverse;
     32              //P6OUT &= ~pinReverse;
     33            }
     34            else{
     35              P6OUT &= ~pinForward;
   \                     ??RunMotor_3:
   \   000032   C2CC4302     BIC.B   R12, &0x243
     36              P6OUT &= ~pinForward;
   \   000036   C2CC4302     BIC.B   R12, &0x243
     37              //P6OUT |= pinReverse;
     38              //P6OUT |= pinReverse;
     39            }
     40          }
   \                     ??RunMotor_0:
   \   00003A   1A17         POPM.W  #0x2, R11
   \   00003C   1001         RETA
   \   00003E                REQUIRE _A_PCOUT_L
     41          

   \                                 In  segment CODE, align 2
     42          int Update_Ticks(volatile unsigned int* tickCounter, int max_tick, char nState){
   \                     Update_Ticks:
   \   000000   0F4C         MOV.W   R12, R15
     43            if(wheel_tick>=WHEEL_TICK){
   \   000002   B2901400.... CMP.W   #0x14, &wheel_tick
   \   000008   0828         JNC     ??Update_Ticks_0
     44              wheel_tick = 0;
   \   00000A   8243....     MOV.W   #0x0, &wheel_tick
     45              right_tick = 0;
   \   00000E   8243....     MOV.W   #0x0, &right_tick
     46              left_tick = 0;
   \   000012   8243....     MOV.W   #0x0, &left_tick
     47              (*tickCounter)++;
   \   000016   9F530000     ADD.W   #0x1, 0(R15)
     48            }
     49            if(*tickCounter>max_tick){
   \                     ??Update_Ticks_0:
   \   00001A   2D9F         CMP.W   @R15, R13
   \   00001C   062C         JC      ??Update_Ticks_1
     50              *tickCounter=0;
   \   00001E   8F430000     MOV.W   #0x0, 0(R15)
     51              state = nState;
   \   000022   C24E....     MOV.B   R14, &state
     52              return 1;
   \   000026   1C43         MOV.W   #0x1, R12
   \   000028   1001         RETA
     53            }
     54            return 0;
   \                     ??Update_Ticks_1:
   \   00002A   0C43         MOV.W   #0x0, R12
   \   00002C   1001         RETA
     55          }
     56          

   \                                 In  segment CODE, align 2
     57          int Drive_Path(int right_ticks, int left_ticks, int max_ticks, char endState){
   \                     Drive_Path:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   084D         MOV.W   R13, R8
   \   000006   094E         MOV.W   R14, R9
   \   000008   4A4F         MOV.B   R15, R10
     58            wheel_tick++;
   \   00000A   9253....     ADD.W   #0x1, &wheel_tick
     59            RunMotor(R_FORWARD,&right_tick,right_ticks,wheel_periods<max_ticks);
   \   00000E   8299....     CMP.W   R9, &wheel_periods
   \   000012   022C         JC      ??Drive_Path_2
   \   000014   5F43         MOV.B   #0x1, R15
   \   000016   013C         JMP     ??Drive_Path_0
   \                     ??Drive_Path_2:
   \   000018   4F43         MOV.B   #0x0, R15
   \                     ??Drive_Path_0:
   \   00001A   4F4F         MOV.B   R15, R15
   \   00001C   0E4B         MOV.W   R11, R14
   \   00001E   3D40....     MOV.W   #right_tick, R13
   \   000022   1C43         MOV.W   #0x1, R12
   \   000024   ........     CALLA   #RunMotor
     60            RunMotor(L_FORWARD,&left_tick,left_ticks,wheel_periods<max_ticks);
   \   000028   8299....     CMP.W   R9, &wheel_periods
   \   00002C   022C         JC      ??Drive_Path_3
   \   00002E   5F43         MOV.B   #0x1, R15
   \   000030   013C         JMP     ??Drive_Path_1
   \                     ??Drive_Path_3:
   \   000032   4F43         MOV.B   #0x0, R15
   \                     ??Drive_Path_1:
   \   000034   4F4F         MOV.B   R15, R15
   \   000036   0E48         MOV.W   R8, R14
   \   000038   3D40....     MOV.W   #left_tick, R13
   \   00003C   2C43         MOV.W   #0x2, R12
   \   00003E   ........     CALLA   #RunMotor
     61            return Update_Ticks(&wheel_periods,max_ticks, endState);
   \   000042   4E4A         MOV.B   R10, R14
   \   000044   0D49         MOV.W   R9, R13
   \   000046   3C40....     MOV.W   #wheel_periods, R12
   \   00004A   ........     CALLA   #Update_Ticks
   \   00004E   3817         POPM.W  #0x4, R11
   \   000050   1001         RETA
     62          }
     63          

   \                                 In  segment CODE, align 2
     64          void Drive_Straight(int ticks){
   \                     Drive_Straight:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     65            //RunMotor(R_FORWARD,&right_tick,STRAIGHT_RIGHT,wheel_periods<ticks);
     66            //RunMotor(L_FORWARD,&left_tick,STRAIGHT_LEFT,wheel_periods<ticks);
     67            //Update_Ticks(&wheel_periods,ticks, END);
     68            Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT, ticks, END);
   \   000004   7F404500     MOV.B   #0x45, R15
   \   000008   0E4A         MOV.W   R10, R14
   \   00000A   3D401500     MOV.W   #0x15, R13
   \   00000E   3C401500     MOV.W   #0x15, R12
   \   000012   ........     CALLA   #Drive_Path
     69          }
   \   000016   3A41         POP.W   R10
   \   000018   1001         RETA
     70          

   \                                 In  segment CODE, align 2
     71          void Left_Circle(int ticks){
   \                     Left_Circle:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     72            //RunMotor(R_FORWARD,&right_tick,LCIRC_RIGHT,wheel_periods<MAX_CIRCLE_TICK);
     73            //RunMotor(L_FORWARD,&left_tick,LCIRC_LEFT,wheel_periods<MAX_CIRCLE_TICK);
     74            //Update_Ticks(&wheel_periods,MAX_CIRCLE_TICK, END);
     75            Drive_Path(LCIRC_RIGHT,LCIRC_LEFT, ticks, END);
   \   000004   7F404500     MOV.B   #0x45, R15
   \   000008   0E4A         MOV.W   R10, R14
   \   00000A   3D401500     MOV.W   #0x15, R13
   \   00000E   3C400500     MOV.W   #0x5, R12
   \   000012   ........     CALLA   #Drive_Path
     76          }
   \   000016   3A41         POP.W   R10
   \   000018   1001         RETA
     77          

   \                                 In  segment CODE, align 2
     78          void Right_Circle(int ticks){
   \                     Right_Circle:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     79            //RunMotor(R_FORWARD,&right_tick,RCIRC_RIGHT,wheel_periods<MAX_CIRCLE_TICK);
     80            //RunMotor(L_FORWARD,&left_tick,RCIRC_LEFT,wheel_periods<MAX_CIRCLE_TICK);
     81            //Update_Ticks(&wheel_periods,MAX_CIRCLE_TICK, END);
     82            Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, ticks, END);
   \   000004   7F404500     MOV.B   #0x45, R15
   \   000008   0E4A         MOV.W   R10, R14
   \   00000A   3D400500     MOV.W   #0x5, R13
   \   00000E   3C401500     MOV.W   #0x15, R12
   \   000012   ........     CALLA   #Drive_Path
     83          }
   \   000016   3A41         POP.W   R10
   \   000018   1001         RETA
     84          

   \                                 In  segment CODE, align 2
     85          void Figure8(void){
   \                     Figure8:
     86            if(figure8count==0){
   \   000000   8293....     CMP.W   #0x0, &figure8count
   \   000004   0F20         JNE     ??Figure8_0
     87              if (Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_RCIRCLE_TICK, FIGURE8)) figure8count++;
   \   000006   7F404600     MOV.B   #0x46, R15
   \   00000A   3E405C12     MOV.W   #0x125c, R14
   \   00000E   3D400500     MOV.W   #0x5, R13
   \   000012   3C401500     MOV.W   #0x15, R12
   \   000016   ........     CALLA   #Drive_Path
   \   00001A   0C93         CMP.W   #0x0, R12
   \   00001C   1424         JEQ     ??Figure8_1
   \   00001E   9253....     ADD.W   #0x1, &figure8count
   \   000022   1001         RETA
     88            }
     89            else if(figure8count==1){
   \                     ??Figure8_0:
   \   000024   9293....     CMP.W   #0x1, &figure8count
   \   000028   0E20         JNE     ??Figure8_1
     90              if (Drive_Path(LCIRC_RIGHT,LCIRC_LEFT, MAX_LCIRCLE_TICK, END)) figure8count++;
   \   00002A   7F404500     MOV.B   #0x45, R15
   \   00002E   3E405C12     MOV.W   #0x125c, R14
   \   000032   3D401500     MOV.W   #0x15, R13
   \   000036   3C400500     MOV.W   #0x5, R12
   \   00003A   ........     CALLA   #Drive_Path
   \   00003E   0C93         CMP.W   #0x0, R12
   \   000040   0224         JEQ     ??Figure8_1
   \   000042   9253....     ADD.W   #0x1, &figure8count
     91            }
     92          }
   \                     ??Figure8_1:
   \   000046   1001         RETA
     93          

   \                                 In  segment CODE, align 2
     94          void delay(int seconds,int cycles){
   \                     delay:
     95            if(stopwatch_seconds>=seconds && cycle_count >= cycles) {
   \   000000   829C....     CMP.W   R12, &stopwatch_seconds
   \   000004   0A28         JNC     ??delay_0
   \   000006   829D....     CMP.W   R13, &cycle_count
   \   00000A   0728         JNC     ??delay_0
     96              stopwatch_seconds = 0;
   \   00000C   8243....     MOV.W   #0x0, &stopwatch_seconds
     97              cycle_count = 0;
   \   000010   8243....     MOV.W   #0x0, &cycle_count
     98              state = nextState;
   \   000014   D242........ MOV.B   &nextState, &state
     99            }
    100          }
   \                     ??delay_0:
   \   00001A   1001         RETA
    101          

   \                                 In  segment CODE, align 2
    102          void StateMachine(void){
   \                     StateMachine:
    103            switch(state){
   \   000000   5E42....     MOV.B   &state, R14
   \   000004   7E804100     SUB.B   #0x41, R14
   \   000008   1A24         JEQ     ??StateMachine_1
   \   00000A   6E83         SUB.B   #0x2, R14
   \   00000C   2224         JEQ     ??StateMachine_2
   \   00000E   6E83         SUB.B   #0x2, R14
   \   000010   3024         JEQ     ??StateMachine_3
   \   000012   5E83         SUB.B   #0x1, R14
   \   000014   2C24         JEQ     ??StateMachine_4
   \   000016   7E800D00     SUB.B   #0xd, R14
   \   00001A   0324         JEQ     ??StateMachine_5
   \   00001C   6E82         SUB.B   #0x4, R14
   \   00001E   0924         JEQ     ??StateMachine_6
   \   000020   1001         RETA
    104              case (START):
    105                stopwatch_seconds = 0;
   \                     ??StateMachine_5:
   \   000022   8243....     MOV.W   #0x0, &stopwatch_seconds
    106                cycle_count = 0;
   \   000026   8243....     MOV.W   #0x0, &cycle_count
    107                state = WAIT;
   \   00002A   F2405700.... MOV.B   #0x57, &state
    108                break;
   \   000030   1001         RETA
    109              case (WAIT):
    110                delay(1,100);
   \                     ??StateMachine_6:
   \   000032   3D406400     MOV.W   #0x64, R13
   \   000036   1C43         MOV.W   #0x1, R12
   \   000038   ........     CALLA   #delay
    111                break;
   \   00003C   1001         RETA
    112              case (ARM):
    113                wheel_tick = 0;
   \                     ??StateMachine_1:
   \   00003E   8243....     MOV.W   #0x0, &wheel_tick
    114                right_tick = 0;
   \   000042   8243....     MOV.W   #0x0, &right_tick
    115                left_tick = 0;
   \   000046   8243....     MOV.W   #0x0, &left_tick
    116                state = CIRCLE;
   \   00004A   F2404300.... MOV.B   #0x43, &state
    117                break;
   \   000050   1001         RETA
    118              case (CIRCLE):
    119                Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_RCIRCLE_TICK, START);
   \                     ??StateMachine_2:
   \   000052   7F405300     MOV.B   #0x53, R15
   \   000056   3E405C12     MOV.W   #0x125c, R14
   \   00005A   3D400500     MOV.W   #0x5, R13
   \   00005E   3C401500     MOV.W   #0x15, R12
   \   000062   ........     CALLA   #Drive_Path
    120                nextState = FIGURE8;
   \   000066   F2404600.... MOV.B   #0x46, &nextState
    121                break;
   \   00006C   1001         RETA
    122              case (FIGURE8):
    123                Figure8();
   \                     ??StateMachine_4:
   \   00006E   ........     CALLA   #Figure8
    124                break;
    125              case (END):
    126                break;
    127              default: break;  
    128            }
    129          }
   \                     ??StateMachine_3:
   \   000072   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for state>`:
   \   000000   53           DC8 83

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for nextState>`:
   \   000000   41           DC8 65

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Drive_Path
       12   -> RunMotor
       12   -> Update_Ticks
      6   Drive_Straight
        6   -> Drive_Path
      4   Figure8
        4   -> Drive_Path
      6   Left_Circle
        6   -> Drive_Path
      6   Right_Circle
        6   -> Drive_Path
      8   RunMotor
      4   StateMachine
        4   -> Drive_Path
        4   -> Figure8
        4   -> delay
      4   Update_Ticks
      4   delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for nextState>
       1  ?<Initializer for state>
      82  Drive_Path
      26  Drive_Straight
      72  Figure8
      26  Left_Circle
      26  Right_Circle
      62  RunMotor
     116  StateMachine
      46  Update_Ticks
       2  _A_PCOUT_L
      28  delay
       2  figure8count
       2  left_tick
       1  nextState
       2  right_tick
       1  state
       2  wheel_periods

 
 484 bytes in segment CODE
   2 bytes in segment DATA16_AN
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
   8 bytes in segment DATA16_Z
 
 484 bytes of CODE  memory
   2 bytes of CONST memory
  10 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
