###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          05/Feb/2022  11:46:29
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ECE306\Project 04\wheels.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW25F0.tmp
#        ("C:\Users\saad\Documents\ECE306\Project 04\wheels.c" -lC
#        "C:\Users\saad\Documents\ECE306\Project 04\Debug\List" -o
#        "C:\Users\saad\Documents\ECE306\Project 04\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ECE306\Project 04\Debug\List\wheels.lst
#    Object file   =  
#        C:\Users\saad\Documents\ECE306\Project 04\Debug\Obj\wheels.r43
#
###############################################################################

C:\Users\saad\Documents\ECE306\Project 04\wheels.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2
      2          #include "ports.h"
      3          #include "wheels.h"
      4          #include <string.h>
      5          
      6          extern volatile unsigned int cycle_count;
      7          extern volatile unsigned int stopwatch_milliseconds;
      8          extern volatile unsigned int stopwatch_seconds;
      9          extern volatile unsigned char display_changed;
     10          extern char display_line[4][11];

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          volatile unsigned int wheel_tick;
   \                     wheel_tick:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          volatile unsigned int wheel_periods;
   \                     wheel_periods:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          volatile unsigned int right_tick;
   \                     right_tick:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          volatile unsigned int left_tick;
   \                     left_tick:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     15          volatile char state = START;
   \                     state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for state>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          volatile int shapeCounter;
   \                     shapeCounter:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     17          volatile char nextState = ARM;
   \                     nextState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for nextState>`
     18          

   \                                 In  segment CODE, align 2
     19          void RunMotor(int pinForward, volatile unsigned int* tick, int tick_count, int val){
   \                     RunMotor:
   \   000000   1B15         PUSHM.W #0x2, R11
     20            if((*tick)++ >= tick_count){
   \   000002   2A4D         MOV.W   @R13, R10
   \   000004   0B4A         MOV.W   R10, R11
   \   000006   1B53         ADD.W   #0x1, R11
   \   000008   8D4B0000     MOV.W   R11, 0(R13)
   \   00000C   0A9E         CMP.W   R14, R10
   \   00000E   0328         JNC     ??RunMotor_1
     21              P6OUT &= ~pinForward;
   \   000010   C2CC4302     BIC.B   R12, &0x243
     22              return;
   \   000014   123C         JMP     ??RunMotor_0
     23              //P6OUT &= ~pinReverse;
     24            }
     25            if (val>0){
   \                     ??RunMotor_1:
   \   000016   1F93         CMP.W   #0x1, R15
   \   000018   0538         JL      ??RunMotor_2
     26              //P6OUT &= ~pinReverse;
     27              //P6OUT &= ~pinReverse;
     28              P6OUT |= pinForward;
   \   00001A   C2DC4302     BIS.B   R12, &0x243
     29              P6OUT |= pinForward;
   \   00001E   C2DC4302     BIS.B   R12, &0x243
   \   000022   0B3C         JMP     ??RunMotor_0
     30            }
     31            else if (val==0){
   \                     ??RunMotor_2:
   \   000024   0F93         CMP.W   #0x0, R15
   \   000026   0520         JNE     ??RunMotor_3
     32              P6OUT &= ~pinForward;
   \   000028   C2CC4302     BIC.B   R12, &0x243
     33              P6OUT &= ~pinForward;
   \   00002C   C2CC4302     BIC.B   R12, &0x243
   \   000030   043C         JMP     ??RunMotor_0
     34              //P6OUT &= ~pinReverse;
     35              //P6OUT &= ~pinReverse;
     36            }
     37            else{
     38              P6OUT &= ~pinForward;
   \                     ??RunMotor_3:
   \   000032   C2CC4302     BIC.B   R12, &0x243
     39              P6OUT &= ~pinForward;
   \   000036   C2CC4302     BIC.B   R12, &0x243
     40              //P6OUT |= pinReverse;
     41              //P6OUT |= pinReverse;
     42            }
     43          }
   \                     ??RunMotor_0:
   \   00003A   1A17         POPM.W  #0x2, R11
   \   00003C   1001         RETA
   \   00003E                REQUIRE _A_PCOUT_L
     44          

   \                                 In  segment CODE, align 2
     45          int Update_Ticks(volatile unsigned int* tickCounter, int max_tick, char nState){
   \                     Update_Ticks:
   \   000000   0F4C         MOV.W   R12, R15
     46            if(wheel_tick>=WHEEL_TICK){
   \   000002   B2901400.... CMP.W   #0x14, &wheel_tick
   \   000008   0828         JNC     ??Update_Ticks_0
     47              wheel_tick = 0;
   \   00000A   8243....     MOV.W   #0x0, &wheel_tick
     48              right_tick = 0;
   \   00000E   8243....     MOV.W   #0x0, &right_tick
     49              left_tick = 0;
   \   000012   8243....     MOV.W   #0x0, &left_tick
     50              (*tickCounter)++;
   \   000016   9F530000     ADD.W   #0x1, 0(R15)
     51            }
     52            if(*tickCounter>max_tick){
   \                     ??Update_Ticks_0:
   \   00001A   2D9F         CMP.W   @R15, R13
   \   00001C   062C         JC      ??Update_Ticks_1
     53              *tickCounter=0; // max_tick FOR STOP, 0 FOR CONTINUOUS
   \   00001E   8F430000     MOV.W   #0x0, 0(R15)
     54              state = nState;
   \   000022   C24E....     MOV.B   R14, &state
     55              return 1;
   \   000026   1C43         MOV.W   #0x1, R12
   \   000028   1001         RETA
     56            }
     57            return 0;
   \                     ??Update_Ticks_1:
   \   00002A   0C43         MOV.W   #0x0, R12
   \   00002C   1001         RETA
     58          }
     59          

   \                                 In  segment CODE, align 2
     60          int Drive_Path(int right_ticks, int left_ticks, int max_ticks, char endState){
   \                     Drive_Path:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   084D         MOV.W   R13, R8
   \   000006   094E         MOV.W   R14, R9
   \   000008   4A4F         MOV.B   R15, R10
     61            wheel_tick++;
   \   00000A   9253....     ADD.W   #0x1, &wheel_tick
     62            RunMotor(R_FORWARD,&right_tick,right_ticks,wheel_periods<max_ticks);
   \   00000E   8299....     CMP.W   R9, &wheel_periods
   \   000012   022C         JC      ??Drive_Path_2
   \   000014   5F43         MOV.B   #0x1, R15
   \   000016   013C         JMP     ??Drive_Path_0
   \                     ??Drive_Path_2:
   \   000018   4F43         MOV.B   #0x0, R15
   \                     ??Drive_Path_0:
   \   00001A   4F4F         MOV.B   R15, R15
   \   00001C   0E4B         MOV.W   R11, R14
   \   00001E   3D40....     MOV.W   #right_tick, R13
   \   000022   1C43         MOV.W   #0x1, R12
   \   000024   ........     CALLA   #RunMotor
     63            RunMotor(L_FORWARD,&left_tick,left_ticks,wheel_periods<max_ticks);
   \   000028   8299....     CMP.W   R9, &wheel_periods
   \   00002C   022C         JC      ??Drive_Path_3
   \   00002E   5F43         MOV.B   #0x1, R15
   \   000030   013C         JMP     ??Drive_Path_1
   \                     ??Drive_Path_3:
   \   000032   4F43         MOV.B   #0x0, R15
   \                     ??Drive_Path_1:
   \   000034   4F4F         MOV.B   R15, R15
   \   000036   0E48         MOV.W   R8, R14
   \   000038   3D40....     MOV.W   #left_tick, R13
   \   00003C   2C43         MOV.W   #0x2, R12
   \   00003E   ........     CALLA   #RunMotor
     64            return Update_Ticks(&wheel_periods,max_ticks, endState);
   \   000042   4E4A         MOV.B   R10, R14
   \   000044   0D49         MOV.W   R9, R13
   \   000046   3C40....     MOV.W   #wheel_periods, R12
   \   00004A   ........     CALLA   #Update_Ticks
   \   00004E   3817         POPM.W  #0x4, R11
   \   000050   1001         RETA
     65          }
     66          

   \                                 In  segment CODE, align 2
     67          void Drive_Straight(int ticks){
   \                     Drive_Straight:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     68            Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT, ticks, END);
   \   000004   7F404500     MOV.B   #0x45, R15
   \   000008   0E4A         MOV.W   R10, R14
   \   00000A   3D401500     MOV.W   #0x15, R13
   \   00000E   3C401500     MOV.W   #0x15, R12
   \   000012   ........     CALLA   #Drive_Path
     69          }
   \   000016   3A41         POP.W   R10
   \   000018   1001         RETA
     70          

   \                                 In  segment CODE, align 2
     71          void Left_Circle(int ticks){
   \                     Left_Circle:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     72            Drive_Path(LCIRC_RIGHT,LCIRC_LEFT, ticks, END);
   \   000004   7F404500     MOV.B   #0x45, R15
   \   000008   0E4A         MOV.W   R10, R14
   \   00000A   3D401500     MOV.W   #0x15, R13
   \   00000E   3C400500     MOV.W   #0x5, R12
   \   000012   ........     CALLA   #Drive_Path
     73          }
   \   000016   3A41         POP.W   R10
   \   000018   1001         RETA
     74          

   \                                 In  segment CODE, align 2
     75          void Right_Circle(int ticks){
   \                     Right_Circle:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     76            Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, ticks, END);
   \   000004   7F404500     MOV.B   #0x45, R15
   \   000008   0E4A         MOV.W   R10, R14
   \   00000A   3D400500     MOV.W   #0x5, R13
   \   00000E   3C401500     MOV.W   #0x15, R12
   \   000012   ........     CALLA   #Drive_Path
     77          }
   \   000016   3A41         POP.W   R10
   \   000018   1001         RETA
     78          

   \                                 In  segment CODE, align 2
     79          void Circle(void){
   \                     Circle:
     80            if (shapeCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &shapeCounter
   \   000004   0220         JNE     ??Circle_1
     81              //strcpy(display_line[0], "  CIRCLE  ");
     82              //display_changed = 1;
     83              shapeCounter++;
   \   000006   9253....     ADD.W   #0x1, &shapeCounter
     84            }
     85            if(shapeCounter==1){
   \                     ??Circle_1:
   \   00000A   9293....     CMP.W   #0x1, &shapeCounter
   \   00000E   0F20         JNE     ??Circle_2
     86              if (Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_RCIRCLE_TICK, CIRCLE)) shapeCounter++;
   \   000010   7F404300     MOV.B   #0x43, R15
   \   000014   3E40B414     MOV.W   #0x14b4, R14
   \   000018   3D400500     MOV.W   #0x5, R13
   \   00001C   3C401500     MOV.W   #0x15, R12
   \   000020   ........     CALLA   #Drive_Path
   \   000024   0C93         CMP.W   #0x0, R12
   \   000026   1424         JEQ     ??Circle_0
   \   000028   9253....     ADD.W   #0x1, &shapeCounter
   \   00002C   113C         JMP     ??Circle_0
     87            }
     88            else if(shapeCounter==2){
   \                     ??Circle_2:
   \   00002E   A293....     CMP.W   #0x2, &shapeCounter
   \   000032   0E20         JNE     ??Circle_0
     89              if (Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_LCIRCLE_TICK, START)) shapeCounter++;
   \   000034   7F405300     MOV.B   #0x53, R15
   \   000038   3E40B414     MOV.W   #0x14b4, R14
   \   00003C   3D400500     MOV.W   #0x5, R13
   \   000040   3C401500     MOV.W   #0x15, R12
   \   000044   ........     CALLA   #Drive_Path
   \   000048   0C93         CMP.W   #0x0, R12
   \   00004A   0224         JEQ     ??Circle_0
   \   00004C   9253....     ADD.W   #0x1, &shapeCounter
     90            }
     91            if (shapeCounter==3) shapeCounter = 0 ;
   \                     ??Circle_0:
   \   000050   B2900300.... CMP.W   #0x3, &shapeCounter
   \   000056   0220         JNE     ??Circle_3
   \   000058   8243....     MOV.W   #0x0, &shapeCounter
     92          }
   \                     ??Circle_3:
   \   00005C   1001         RETA
     93          

   \                                 In  segment CODE, align 2
     94          void Figure8(void){
   \                     Figure8:
     95            if (shapeCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &shapeCounter
   \   000004   0220         JNE     ??Figure8_1
     96              //strcpy(display_line[0], "  FIGURE8 ");
     97              //display_changed = 1;
     98              shapeCounter++;
   \   000006   9253....     ADD.W   #0x1, &shapeCounter
     99            }
    100            if(shapeCounter==1){
   \                     ??Figure8_1:
   \   00000A   9293....     CMP.W   #0x1, &shapeCounter
   \   00000E   0F20         JNE     ??Figure8_2
    101              if (Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_RCIRCLE_TICK, FIGURE8)) shapeCounter++;
   \   000010   7F404600     MOV.B   #0x46, R15
   \   000014   3E40B414     MOV.W   #0x14b4, R14
   \   000018   3D400500     MOV.W   #0x5, R13
   \   00001C   3C401500     MOV.W   #0x15, R12
   \   000020   ........     CALLA   #Drive_Path
   \   000024   0C93         CMP.W   #0x0, R12
   \   000026   1424         JEQ     ??Figure8_0
   \   000028   9253....     ADD.W   #0x1, &shapeCounter
   \   00002C   113C         JMP     ??Figure8_0
    102            }
    103            else if(shapeCounter==2){
   \                     ??Figure8_2:
   \   00002E   A293....     CMP.W   #0x2, &shapeCounter
   \   000032   0E20         JNE     ??Figure8_0
    104              if (Drive_Path(LCIRC_RIGHT,LCIRC_LEFT, MAX_LCIRCLE_TICK, START)) shapeCounter++;
   \   000034   7F405300     MOV.B   #0x53, R15
   \   000038   3E40B414     MOV.W   #0x14b4, R14
   \   00003C   3D401500     MOV.W   #0x15, R13
   \   000040   3C400500     MOV.W   #0x5, R12
   \   000044   ........     CALLA   #Drive_Path
   \   000048   0C93         CMP.W   #0x0, R12
   \   00004A   0224         JEQ     ??Figure8_0
   \   00004C   9253....     ADD.W   #0x1, &shapeCounter
    105            }
    106            if (shapeCounter==3) shapeCounter = 0 ;
   \                     ??Figure8_0:
   \   000050   B2900300.... CMP.W   #0x3, &shapeCounter
   \   000056   0220         JNE     ??Figure8_3
   \   000058   8243....     MOV.W   #0x0, &shapeCounter
    107          }
   \                     ??Figure8_3:
   \   00005C   1001         RETA
    108          

   \                                 In  segment CODE, align 2
    109          void Triangle(void){
   \                     Triangle:
    110            if (shapeCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &shapeCounter
   \   000004   0220         JNE     ??Triangle_1
    111              //strcpy(display_line[0], " TRIANGLE ");
    112              //display_changed = 1;
    113              shapeCounter++;
   \   000006   9253....     ADD.W   #0x1, &shapeCounter
    114            }
    115            if(shapeCounter==1){
   \                     ??Triangle_1:
   \   00000A   9293....     CMP.W   #0x1, &shapeCounter
   \   00000E   0F20         JNE     ??Triangle_2
    116              if (Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT, 500, TRIANGLE)) shapeCounter++;
   \   000010   7F405400     MOV.B   #0x54, R15
   \   000014   3E40F401     MOV.W   #0x1f4, R14
   \   000018   3D401500     MOV.W   #0x15, R13
   \   00001C   3C401500     MOV.W   #0x15, R12
   \   000020   ........     CALLA   #Drive_Path
   \   000024   0C93         CMP.W   #0x0, R12
   \   000026   7224         JEQ     ??Triangle_0
   \   000028   9253....     ADD.W   #0x1, &shapeCounter
   \   00002C   6F3C         JMP     ??Triangle_0
    117            }
    118            else if(shapeCounter==2){
   \                     ??Triangle_2:
   \   00002E   A293....     CMP.W   #0x2, &shapeCounter
   \   000032   0F20         JNE     ??Triangle_3
    119              if (Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_RCIRCLE_TICK/3, TRIANGLE)) shapeCounter++;
   \   000034   7F405400     MOV.B   #0x54, R15
   \   000038   3E40E606     MOV.W   #0x6e6, R14
   \   00003C   3D400500     MOV.W   #0x5, R13
   \   000040   3C401500     MOV.W   #0x15, R12
   \   000044   ........     CALLA   #Drive_Path
   \   000048   0C93         CMP.W   #0x0, R12
   \   00004A   6024         JEQ     ??Triangle_0
   \   00004C   9253....     ADD.W   #0x1, &shapeCounter
   \   000050   5D3C         JMP     ??Triangle_0
    120            }
    121            else if(shapeCounter==3){
   \                     ??Triangle_3:
   \   000052   B2900300.... CMP.W   #0x3, &shapeCounter
   \   000058   0F20         JNE     ??Triangle_4
    122              if (Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT, 1000, TRIANGLE)) shapeCounter++;
   \   00005A   7F405400     MOV.B   #0x54, R15
   \   00005E   3E40E803     MOV.W   #0x3e8, R14
   \   000062   3D401500     MOV.W   #0x15, R13
   \   000066   3C401500     MOV.W   #0x15, R12
   \   00006A   ........     CALLA   #Drive_Path
   \   00006E   0C93         CMP.W   #0x0, R12
   \   000070   4D24         JEQ     ??Triangle_0
   \   000072   9253....     ADD.W   #0x1, &shapeCounter
   \   000076   4A3C         JMP     ??Triangle_0
    123            }
    124            else if(shapeCounter==4){
   \                     ??Triangle_4:
   \   000078   A292....     CMP.W   #0x4, &shapeCounter
   \   00007C   0F20         JNE     ??Triangle_5
    125              if (Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_RCIRCLE_TICK/3, TRIANGLE)) shapeCounter++;
   \   00007E   7F405400     MOV.B   #0x54, R15
   \   000082   3E40E606     MOV.W   #0x6e6, R14
   \   000086   3D400500     MOV.W   #0x5, R13
   \   00008A   3C401500     MOV.W   #0x15, R12
   \   00008E   ........     CALLA   #Drive_Path
   \   000092   0C93         CMP.W   #0x0, R12
   \   000094   3B24         JEQ     ??Triangle_0
   \   000096   9253....     ADD.W   #0x1, &shapeCounter
   \   00009A   383C         JMP     ??Triangle_0
    126            }
    127            else if(shapeCounter==5){
   \                     ??Triangle_5:
   \   00009C   B2900500.... CMP.W   #0x5, &shapeCounter
   \   0000A2   0F20         JNE     ??Triangle_6
    128              if (Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT, 1000, TRIANGLE)) shapeCounter++;
   \   0000A4   7F405400     MOV.B   #0x54, R15
   \   0000A8   3E40E803     MOV.W   #0x3e8, R14
   \   0000AC   3D401500     MOV.W   #0x15, R13
   \   0000B0   3C401500     MOV.W   #0x15, R12
   \   0000B4   ........     CALLA   #Drive_Path
   \   0000B8   0C93         CMP.W   #0x0, R12
   \   0000BA   2824         JEQ     ??Triangle_0
   \   0000BC   9253....     ADD.W   #0x1, &shapeCounter
   \   0000C0   253C         JMP     ??Triangle_0
    129            }
    130            else if(shapeCounter==6){
   \                     ??Triangle_6:
   \   0000C2   B2900600.... CMP.W   #0x6, &shapeCounter
   \   0000C8   0F20         JNE     ??Triangle_7
    131              if (Drive_Path(RCIRC_RIGHT,RCIRC_LEFT, MAX_RCIRCLE_TICK/3, TRIANGLE)) shapeCounter++;
   \   0000CA   7F405400     MOV.B   #0x54, R15
   \   0000CE   3E40E606     MOV.W   #0x6e6, R14
   \   0000D2   3D400500     MOV.W   #0x5, R13
   \   0000D6   3C401500     MOV.W   #0x15, R12
   \   0000DA   ........     CALLA   #Drive_Path
   \   0000DE   0C93         CMP.W   #0x0, R12
   \   0000E0   1524         JEQ     ??Triangle_0
   \   0000E2   9253....     ADD.W   #0x1, &shapeCounter
   \   0000E6   123C         JMP     ??Triangle_0
    132            }
    133            else if(shapeCounter==7){
   \                     ??Triangle_7:
   \   0000E8   B2900700.... CMP.W   #0x7, &shapeCounter
   \   0000EE   0E20         JNE     ??Triangle_0
    134              if (Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT, 500, END)) shapeCounter++;
   \   0000F0   7F404500     MOV.B   #0x45, R15
   \   0000F4   3E40F401     MOV.W   #0x1f4, R14
   \   0000F8   3D401500     MOV.W   #0x15, R13
   \   0000FC   3C401500     MOV.W   #0x15, R12
   \   000100   ........     CALLA   #Drive_Path
   \   000104   0C93         CMP.W   #0x0, R12
   \   000106   0224         JEQ     ??Triangle_0
   \   000108   9253....     ADD.W   #0x1, &shapeCounter
    135            }
    136            if (shapeCounter==8) shapeCounter = 0 ;
   \                     ??Triangle_0:
   \   00010C   B292....     CMP.W   #0x8, &shapeCounter
   \   000110   0220         JNE     ??Triangle_8
   \   000112   8243....     MOV.W   #0x0, &shapeCounter
    137          }
   \                     ??Triangle_8:
   \   000116   1001         RETA
    138          
    139          // delays for a specified time and then switches state to global nextState
    140          // make sure nextState is set to desired vlaue before the end of delay

   \                                 In  segment CODE, align 2
    141          void delay(int seconds,int cycles){
   \                     delay:
    142            //if(stopwatch_seconds == 0 && cycle_count<=1) display_changed = 1;
    143            if(stopwatch_seconds>=seconds && cycle_count >= cycles) {
   \   000000   829C....     CMP.W   R12, &stopwatch_seconds
   \   000004   0A28         JNC     ??delay_0
   \   000006   829D....     CMP.W   R13, &cycle_count
   \   00000A   0728         JNC     ??delay_0
    144              stopwatch_seconds = 0;
   \   00000C   8243....     MOV.W   #0x0, &stopwatch_seconds
    145              cycle_count = 0;
   \   000010   8243....     MOV.W   #0x0, &cycle_count
    146              state = nextState;
   \   000014   D242........ MOV.B   &nextState, &state
    147            }
    148          }
   \                     ??delay_0:
   \   00001A   1001         RETA
    149          

   \                                 In  segment CODE, align 2
    150          void StateMachine(void){
   \                     StateMachine:
    151            switch(state){
   \   000000   5E42....     MOV.B   &state, R14
   \   000004   7E804100     SUB.B   #0x41, R14
   \   000008   1424         JEQ     ??StateMachine_4
   \   00000A   6E83         SUB.B   #0x2, R14
   \   00000C   1C24         JEQ     ??StateMachine_5
   \   00000E   6E83         SUB.B   #0x2, R14
   \   000010   2B24         JEQ     ??StateMachine_3
   \   000012   5E83         SUB.B   #0x1, R14
   \   000014   1E24         JEQ     ??StateMachine_6
   \   000016   7E800D00     SUB.B   #0xd, R14
   \   00001A   2624         JEQ     ??StateMachine_3
   \   00001C   5E83         SUB.B   #0x1, R14
   \   00001E   1F24         JEQ     ??StateMachine_7
   \   000020   7E800300     SUB.B   #0x3, R14
   \   000024   2120         JNE     ??StateMachine_3
    152              case (START):
    153                //strcpy(display_line[0], "WAITING...");
    154                //display_changed = 1;
    155                break;
    156              case (WAIT):
    157                delay(1,100);
   \   000026   3D406400     MOV.W   #0x64, R13
   \   00002A   1C43         MOV.W   #0x1, R12
   \   00002C   ........     CALLA   #delay
    158                //strcpy(display_line[0], "WAITING...");
    159                break;
   \   000030   1001         RETA
    160              case (ARM):
    161                wheel_tick = 0;
   \                     ??StateMachine_4:
   \   000032   8243....     MOV.W   #0x0, &wheel_tick
    162                right_tick = 0;
   \   000036   8243....     MOV.W   #0x0, &right_tick
    163                left_tick = 0;
   \   00003A   8243....     MOV.W   #0x0, &left_tick
    164                state = CIRCLE;
   \   00003E   F2404300.... MOV.B   #0x43, &state
    165                break;
   \   000044   1001         RETA
    166              case (CIRCLE):
    167                Circle();
   \                     ??StateMachine_5:
   \   000046   ........     CALLA   #Circle
    168                nextState = FIGURE8;
   \   00004A   F2404600.... MOV.B   #0x46, &nextState
    169                break;
   \   000050   1001         RETA
    170              case (FIGURE8):
    171                Figure8();
   \                     ??StateMachine_6:
   \   000052   ........     CALLA   #Figure8
    172                nextState = TRIANGLE;
   \   000056   F2405400.... MOV.B   #0x54, &nextState
    173                break;
   \   00005C   1001         RETA
    174              case (TRIANGLE):
    175                Triangle();
   \                     ??StateMachine_7:
   \   00005E   ........     CALLA   #Triangle
    176                nextState = END;
   \   000062   F2404500.... MOV.B   #0x45, &nextState
    177                break;
    178              case (END):
    179                //strcpy(display_line[0], "    END   ");
    180                //display_changed = 1;
    181                break;
    182              default: break;  
    183            }
    184          }
   \                     ??StateMachine_3:
   \   000068   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for state>`:
   \   000000   53           DC8 83

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for nextState>`:
   \   000000   41           DC8 65

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Circle
        4   -> Drive_Path
     12   Drive_Path
       12   -> RunMotor
       12   -> Update_Ticks
      6   Drive_Straight
        6   -> Drive_Path
      4   Figure8
        4   -> Drive_Path
      6   Left_Circle
        6   -> Drive_Path
      6   Right_Circle
        6   -> Drive_Path
      8   RunMotor
      4   StateMachine
        4   -> Circle
        4   -> Figure8
        4   -> Triangle
        4   -> delay
      4   Triangle
        4   -> Drive_Path
      4   Update_Ticks
      4   delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for nextState>
       1  ?<Initializer for state>
      94  Circle
      82  Drive_Path
      26  Drive_Straight
      94  Figure8
      26  Left_Circle
      26  Right_Circle
      62  RunMotor
     106  StateMachine
     280  Triangle
      46  Update_Ticks
       2  _A_PCOUT_L
      28  delay
       2  left_tick
       1  nextState
       2  right_tick
       2  shapeCounter
       1  state
       2  wheel_periods
       2  wheel_tick

 
 870 bytes in segment CODE
   2 bytes in segment DATA16_AN
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
  10 bytes in segment DATA16_Z
 
 870 bytes of CODE  memory
   2 bytes of CONST memory
  12 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
