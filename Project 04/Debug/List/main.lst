###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          25/Feb/2022  12:03:11
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 04\main.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW95D4.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 04\main.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 04\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 04\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 04\Debug\List\main.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 04\Debug\Obj\main.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 04\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include <string.h>
     15          #include "macros.h"
     16          #include "init.h"
     17          #include "led.h"
     18          #include "wheels.h"
     19          #include "ports.h"
     20          #include "switches.h"
     21          
     22          // Function Prototypes
     23          void main(void);
     24          
     25          
     26          // Global Variables
     27            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     29          extern char display_line[4][11];
     30          extern char *display[4];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     32          extern volatile unsigned char display_changed;
     33          extern volatile unsigned char update_display;
     34          extern volatile unsigned int update_display_count;
     35          extern volatile unsigned int Time_Sequence;
     36          extern volatile char one_time;
     37          extern volatile unsigned int wheel_tick;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     40          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          volatile unsigned int Last_Time_Sequence;
   \                     Last_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          volatile unsigned int cycle_count;
   \                     cycle_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          volatile unsigned int stopwatch_seconds;
   \                     stopwatch_seconds:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          volatile unsigned int time_change;
   \                     time_change:
   \   000000                DS8 2
     45          //===========================================================================
     46          // Function name: Main
     47          //
     48          // Description: This function contains the while loop that runs continuously
     49          // to act for the operating system. It also calls all the functions to
     50          // initialize the system.
     51          //
     52          // Passed : no variables passed
     53          // Locals: no variables declared
     54          // Returned: no values returned
     55          // Globals: char* display_1
     56          // char* display_2
     57          // slow_input_down
     58          // control_state[CNTL_STATE_INDEX]
     59          //
     60          // Author: Ibrahim Moghul
     61          // Date: Feb 2022
     62          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     63          //===========================================================================
     64          

   \                                 In  segment CODE, align 2
     65          void main(void){
   \                     main:
     66          //------------------------------------------------------------------------------
     67          // Main Program
     68          // This is the main routine for the program. Execution of code starts here.
     69          // The operating system is Back Ground Fore Ground.
     70          //
     71          //------------------------------------------------------------------------------
     72            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     73          // Disable the GPIO power-on default high-impedance mode to activate
     74          // previously configured port settings
     75          
     76            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     77            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     78            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     79            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     80            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     81          
     82            // Place the contents of what you want on the display, in between the quotes
     83          // Limited to 10 characters per line
     84            //strcpy(display_line[0], "   NCSU   ");
     85            //strcpy(display_line[1], " WOLFPACK ");
     86            //strcpy(display_line[2], "  ECE306  ");
     87            //strcpy(display_line[3], "  GP I/O  ");
     88            strcpy(display_line[0], "WAITING...");
   \   000018   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   00001C   3C40....     MOV.W   #display_line, R12
   \   000020   ........     CALLA   #strcpy
     89            strcpy(display_line[1], "          ");
   \   000024   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000028   3C40....     MOV.W   #display_line + 11, R12
   \   00002C   ........     CALLA   #strcpy
     90            strcpy(display_line[2], "          ");
   \   000030   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000034   3C40....     MOV.W   #display_line + 22, R12
   \   000038   ........     CALLA   #strcpy
     91            strcpy(display_line[3], "          ");
   \   00003C   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000040   3C40....     MOV.W   #display_line + 33, R12
   \   000044   ........     CALLA   #strcpy
     92            display_changed = TRUE;
   \   000048   D243....     MOV.B   #0x1, &display_changed
     93          
     94          //------------------------------------------------------------------------------
     95          // Begining of the "While" Operating System
     96          //------------------------------------------------------------------------------
     97            while(ALWAYS) {                       // Can the Operating system run
     98              //Carlson_StateMachine();           // Run a Time Based State Machine
     99              SwitchesProcess();                  // Check for switch state change
   \                     ??main_0:
   \   00004C   ........     CALLA   #SwitchesProcess
    100              Display_Process();                  // Update Display
   \   000050   ........     CALLA   #Display_Process
    101              //if(Drive_Path(RCIRC_RIGHT,RCIRC_LEFT,MAX_RCIRCLE_TICK,'a')) 
    102              //  P1OUT^=RED_LED;
    103              StateMachine();                     // Run wheels state machine
   \   000054   ........     CALLA   #StateMachine
    104              P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   000058   D2E32202     XOR.B   #0x1, &0x222
    105              if(Last_Time_Sequence!=Time_Sequence){
                     ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is undefined
          in this statement
   \   00005C   1F42....     MOV.W   &Last_Time_Sequence, R15
   \   000060   1F92....     CMP.W   &Time_Sequence, R15
   \   000064   F327         JEQ     ??main_0
    106                Last_Time_Sequence=Time_Sequence;
   \   000066   9242........ MOV.W   &Time_Sequence, &Last_Time_Sequence
    107                cycle_count++;
   \   00006C   9253....     ADD.W   #0x1, &cycle_count
    108                time_change = 1;
   \   000070   9243....     MOV.W   #0x1, &time_change
    109                P1OUT|=RED_LED;
   \   000074   D2D30202     BIS.B   #0x1, &0x202
    110                if(cycle_count == 200){
   \   000078   B290C800.... CMP.W   #0xc8, &cycle_count
   \   00007E   E623         JNE     ??main_0
    111                  cycle_count = 0;
   \   000080   8243....     MOV.W   #0x0, &cycle_count
    112                  stopwatch_seconds++;
   \   000084   9253....     ADD.W   #0x1, &stopwatch_seconds
   \   000088   E13F         JMP     ??main_0
   \   00008A   0343         NOP
   \   00008C                REQUIRE _A_PM5CTL0_L
   \   00008C                REQUIRE _A_PBOUT_L
   \   00008C                REQUIRE _A_PAOUT_L
    113                }
    114              }
    115             }
    116              
    117          //------------------------------------------------------------------------------
    118          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WAITING...">`:
   \   000000   57414954494E DC8 "WAITING..."
   \            472E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  
    119          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> StateMachine
        4   -> SwitchesProcess
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "WAITING...">
       2  Last_Time_Sequence
       2  _A_PAOUT_L
       2  _A_PBOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       2  cycle_count
       1  display_mode
     140  main
       1  slow_input_down
       2  stopwatch_seconds
       2  test_value
       2  time_change

 
 140 bytes in segment CODE
   6 bytes in segment DATA16_AN
  22 bytes in segment DATA16_C
  14 bytes in segment DATA16_Z
 
 140 bytes of CODE  memory
  22 bytes of CONST memory
  14 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: 1
