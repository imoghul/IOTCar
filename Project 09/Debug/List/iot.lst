###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          02/Apr/2022  23:10:50
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 09\iot.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW217F.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 09\iot.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 09\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 09\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 09\Debug\List\iot.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 09\Debug\Obj\iot.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 09\iot.c
      1          #include "iot.h"
      2          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x51a
   \   union <unnamed> _A_UCA0IE_L
   \                     _A_UCA0IE_L:
   \   000000                DS8 2
      3          #include <string.h>
      4          #include "serial.h"
      5          

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
      6          char iot_setup_state = BOOT_UP;
   \                     iot_setup_state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for iot_setup_state>`
      7          extern volatile char USB0_Char_Tx[];
      8          extern unsigned volatile int pb0_buffered;
      9          extern volatile char USB0_Char_Rx_Process[];
     10          extern volatile char receievedFromPC;
     11          
     12          

   \                                 In  segment CODE, align 2
     13          void Init_IOT(void){
   \                     Init_IOT:
     14            //if(!receievedFromPC) return;
     15            
     16            switch(iot_setup_state){
   \   000000   5E42....     MOV.B   &iot_setup_state, R14
   \   000004   7E804200     SUB.B   #0x42, R14
   \   000008   0D24         JEQ     ??Init_IOT_8
   \   00000A   7E800B00     SUB.B   #0xb, R14
   \   00000E   1B24         JEQ     ??Init_IOT_9
   \   000010   7E800600     SUB.B   #0x6, R14
   \   000014   3C24         JEQ     ??Init_IOT_10
   \   000016   7E801A00     SUB.B   #0x1a, R14
   \   00001A   2124         JEQ     ??Init_IOT_11
   \   00001C   7E800600     SUB.B   #0x6, R14
   \   000020   4224         JEQ     ??Init_IOT_12
   \   000022   1001         RETA
     17              case BOOT_UP:
     18                if(pb0_buffered){
   \                     ??Init_IOT_8:
   \   000024   8293....     CMP.W   #0x0, &pb0_buffered
   \   000028   5524         JEQ     ??Init_IOT_5
     19                  if(strcmp((char*)USB0_Char_Rx_Process,BOOT_RESPONSE) == 0){
   \   00002A   3D40....     MOV.W   #`?<Constant "WIFI GOT IP\\r\\n">`, R13
   \   00002E   3C40....     MOV.W   #USB0_Char_Rx_Process, R12
   \   000032   ........     CALLA   #strcmp
   \   000036   0C93         CMP.W   #0x0, R12
   \   000038   0320         JNE     ??Init_IOT_13
     20                    iot_setup_state=CIPMUX_Tx;
   \   00003A   F2404D00.... MOV.B   #0x4d, &iot_setup_state
     21                  }
     22                clearProcessBuff_0();
   \                     ??Init_IOT_13:
   \   000040   ........     CALLA   #clearProcessBuff_0
     23                }
     24                break;
   \   000044   1001         RETA
     25              case CIPMUX_Tx:
     26                strcpy((char*)USB0_Char_Tx,ALLOW_MULTIPLE_CONNECTIONS);
   \                     ??Init_IOT_9:
   \   000046   3D40....     MOV.W   #`?<Constant "AT+CIPMUX=1\\r\\n">`, R13
   \   00004A   3C40....     MOV.W   #USB0_Char_Tx, R12
   \   00004E   ........     CALLA   #strcpy
     27                USCI_A0_transmit();
   \   000052   ........     CALLA   #USCI_A0_transmit
     28                iot_setup_state = CIPMUX_Rx;
   \   000056   F2406D00.... MOV.B   #0x6d, &iot_setup_state
     29                break;
   \   00005C   1001         RETA
     30              case CIPMUX_Rx:
     31                if(UCA0IE & UCTXIE) break;
   \                     ??Init_IOT_11:
   \   00005E   A2B31A05     BIT.W   #0x2, &0x51a
   \   000062   382C         JC      ??Init_IOT_5
     32                if(pb0_buffered){
   \   000064   8293....     CMP.W   #0x0, &pb0_buffered
   \   000068   3524         JEQ     ??Init_IOT_5
     33                  if(strcmp((char*)USB0_Char_Rx_Process,OK_RESPONSE) == 0) {
   \   00006A   3D40....     MOV.W   #`?<Constant "OK\\r\\n">`, R13
   \   00006E   3C40....     MOV.W   #USB0_Char_Rx_Process, R12
   \   000072   ........     CALLA   #strcmp
   \   000076   0C93         CMP.W   #0x0, R12
   \   000078   0420         JNE     ??Init_IOT_14
     34                    iot_setup_state = CIPSERVER_Tx;
   \   00007A   F2405300.... MOV.B   #0x53, &iot_setup_state
   \   000080   033C         JMP     ??Init_IOT_6
     35                  }
     36                  else iot_setup_state = CIPMUX_Tx;
   \                     ??Init_IOT_14:
   \   000082   F2404D00.... MOV.B   #0x4d, &iot_setup_state
     37                  clearProcessBuff_0();
   \                     ??Init_IOT_6:
   \   000088   ........     CALLA   #clearProcessBuff_0
     38                }
     39                break;
   \   00008C   1001         RETA
     40              case CIPSERVER_Tx:
     41                strcpy((char*)USB0_Char_Tx,START_SERVER);
   \                     ??Init_IOT_10:
   \   00008E   3D40....     MOV.W   #`?<Constant "AT+CIPSERVER=1,4666\\r\\n">`, R13
   \   000092   3C40....     MOV.W   #USB0_Char_Tx, R12
   \   000096   ........     CALLA   #strcpy
     42                USCI_A0_transmit();
   \   00009A   ........     CALLA   #USCI_A0_transmit
     43                iot_setup_state = CIPSERVER_Rx;
   \   00009E   F2407300.... MOV.B   #0x73, &iot_setup_state
     44                break;
   \   0000A4   1001         RETA
     45              case CIPSERVER_Rx:
     46                if(UCA0IE & UCTXIE) break;
   \                     ??Init_IOT_12:
   \   0000A6   A2B31A05     BIT.W   #0x2, &0x51a
   \   0000AA   142C         JC      ??Init_IOT_5
     47                if(pb0_buffered){
   \   0000AC   8293....     CMP.W   #0x0, &pb0_buffered
   \   0000B0   1124         JEQ     ??Init_IOT_5
     48                  if(strcmp((char*)USB0_Char_Rx_Process,OK_RESPONSE) == 0) {
   \   0000B2   3D40....     MOV.W   #`?<Constant "OK\\r\\n">`, R13
   \   0000B6   3C40....     MOV.W   #USB0_Char_Rx_Process, R12
   \   0000BA   ........     CALLA   #strcmp
   \   0000BE   0C93         CMP.W   #0x0, R12
   \   0000C0   0420         JNE     ??Init_IOT_15
     49                    iot_setup_state = IOT_SETUP_FINISHED;
   \   0000C2   F2404600.... MOV.B   #0x46, &iot_setup_state
   \   0000C8   033C         JMP     ??Init_IOT_7
     50                  }
     51                  else iot_setup_state = CIPSERVER_Tx;
   \                     ??Init_IOT_15:
   \   0000CA   F2405300.... MOV.B   #0x53, &iot_setup_state
     52                  clearProcessBuff_0();
   \                     ??Init_IOT_7:
   \   0000D0   ........     CALLA   #clearProcessBuff_0
     53                }
     54                break;
     55              default:
     56                break;
     57            }
     58            
     59          }
   \                     ??Init_IOT_5:
   \   0000D4   1001         RETA
   \   0000D6                REQUIRE _A_UCA0IE_L

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for iot_setup_state>`:
   \   000000   42           DC8 66

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WIFI GOT IP\\r\\n">`:
   \   000000   574946492047 DC8 "WIFI GOT IP\015\012"
   \            4F542049500D
   \            0A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B434950 DC8 "AT+CIPMUX=1\015\012"
   \            4D55583D310D
   \            0A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "OK\\r\\n">`:
   \   000000   4F4B0D0A00   DC8 "OK\015\012"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIPSERVER=1,4666\\r\\n">`:
   \   000000   41542B434950 DC8 "AT+CIPSERVER=1,4666\015\012"
   \            534552564552
   \            3D312C343636
   \            360D0A00    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_IOT
        4   -> USCI_A0_transmit
        4   -> clearProcessBuff_0
        4   -> strcmp
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant "AT+CIPMUX=1\r\n">
      22  ?<Constant "AT+CIPSERVER=1,4666\r\n">
       5  ?<Constant "OK\r\n">
      14  ?<Constant "WIFI GOT IP\r\n">
       1  ?<Initializer for iot_setup_state>
     214  Init_IOT
       2  _A_UCA0IE_L
       1  iot_setup_state

 
 214 bytes in segment CODE
   2 bytes in segment DATA16_AN
  55 bytes in segment DATA16_C
   1 byte  in segment DATA16_I
   1 byte  in segment DATA16_ID
 
 214 bytes of CODE  memory
  56 bytes of CONST memory
   1 byte  of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
