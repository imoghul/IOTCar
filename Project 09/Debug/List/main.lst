###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          10/Apr/2022  15:25:32
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 09\main.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWB8E9.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 09\main.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 09\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 09\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 09\Debug\List\main.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 09\Debug\Obj\main.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 09\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include <string.h>
     15          #include "macros.h"
     16          #include "init.h"
     17          #include "led.h"
     18          #include "wheels.h"
     19          #include "ports.h"
     20          #include "switches.h"
     21          #include "timers.h"
     22          #include "adc.h"
     23          #include "detectors.h"
     24          #include "sm.h"
     25          #include "menu.h"
     26          #include "serial.h"
     27          #include "iot.h"
     28          // Function Prototypes
     29          void main(void);
     30          
     31          
     32          // Global Variables
     33          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     35          extern char display_line[4][11];
     36          extern char *display[4];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     38          extern volatile unsigned char display_changed;
     39          extern volatile unsigned char update_display;
     40          extern volatile unsigned int update_display_count;
     41          extern volatile unsigned int Time_Sequence;
     42          extern volatile char one_time;
     43          extern volatile unsigned int wheel_tick;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     47          unsigned int Last_Time_Sequence;
   \                     Last_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          volatile unsigned int cycle_count;
   \                     cycle_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          volatile unsigned int stopwatch_seconds;
   \                     stopwatch_seconds:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     50          volatile unsigned int stopwatch_milliseconds;
   \                     stopwatch_milliseconds:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          volatile unsigned int time_change;
   \                     time_change:
   \   000000                DS8 2
     52          extern volatile unsigned int right_tick, left_tick;
     53          extern char adc_char[5];
     54          extern volatile unsigned int ADC_Left_Detect, ADC_Right_Detect;
     55          extern char movingDirection;
     56          extern char enteringDirection;
     57          extern float timeElapsed;
     58          extern char state;
     59          extern volatile unsigned int stopwatchUpdated;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     60          unsigned volatile UCA0_index, UCA1_index;
   \                     UCA0_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     UCA1_index:
   \   000000                DS8 2
     61          extern volatile char USB0_Char_Tx[];
     62          extern volatile unsigned int pb0_buffered;
     63          extern volatile unsigned int usb0_rx_wr, usb0_rx_rd;
     64          extern volatile unsigned int serialState;
     65          extern menu resistor, mainMenu;
     66          //===========================================================================
     67          // Function name: Main
     68          //
     69          // Description: This function contains the while loop that runs continuously
     70          // to act for the operating system. It also calls all the functions to
     71          // initialize the system.
     72          //
     73          // Passed : no variables passed
     74          // Locals: no variables declared
     75          // Returned: no values returned
     76          // Globals: char* display_1
     77          // char* display_2
     78          // slow_input_down
     79          // control_state[CNTL_STATE_INDEX]
     80          //
     81          // Author: Ibrahim Moghul
     82          // Date: Feb 2022
     83          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     84          //===========================================================================
     85          

   \                                 In  segment CODE, align 2
     86          void main(void) {
   \                     main:
     87              //------------------------------------------------------------------------------
     88              // Main Program
     89              // This is the main routine for the program. Execution of code starts here.
     90              // The operating system is Back Ground Fore Ground.
     91              //
     92              //------------------------------------------------------------------------------
     93              PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     94              // Disable the GPIO power-on default high-impedance mode to activate
     95              // previously configured port settings
     96          
     97              Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     98              Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     99              Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
    100              Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
    101              Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
    102              Init_REF();
   \   000018   ........     CALLA   #Init_REF
    103              Init_DAC();
   \   00001C   ........     CALLA   #Init_DAC
    104              Init_ADC();
   \   000020   ........     CALLA   #Init_ADC
    105              Init_Serial_UCA();
   \   000024   ........     CALLA   #Init_Serial_UCA
    106              EmitterOn();
   \   000028   ........     CALLA   #EmitterOn
    107              // Place the contents of what you want on the display, in between the quotes
    108              // Limited to 10 characters per line
    109              strcpy(display_line[0], "          ");
   \   00002C   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000030   3C40....     MOV.W   #display_line, R12
   \   000034   ........     CALLA   #strcpy
    110              strcpy(display_line[1], "          ");
   \   000038   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00003C   3C40....     MOV.W   #display_line + 11, R12
   \   000040   ........     CALLA   #strcpy
    111              strcpy(display_line[2], "          ");
   \   000044   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000048   3C40....     MOV.W   #display_line + 22, R12
   \   00004C   ........     CALLA   #strcpy
    112              strcpy(display_line[3], "          ");
   \   000050   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000054   3C40....     MOV.W   #display_line + 33, R12
   \   000058   ........     CALLA   #strcpy
    113              display_changed = TRUE;
   \   00005C   D243....     MOV.B   #0x1, &display_changed
    114          
    115              //------------------------------------------------------------------------------
    116              // Begining of the "While" Operating System
    117              //------------------------------------------------------------------------------
    118              while(ALWAYS) {                       // Can the Operating system run
    119                  //Display_Process();                  // Update Display
    120                  //SerialProcess();
    121                  //if(!Init_IOT()) continue;
    122                  //IOTBufferCommands();
    123                  //ProcessCommands();
    124                  //DetectMovement();
    125                  StateMachine();                     // Run wheels state machine
   \                     ??main_0:
   \   000060   ........     CALLA   #StateMachine
    126                  //MenuProcess();
    127                  MotorSafety();
   \   000064   ........     CALLA   #MotorSafety
    128                  P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   000068   D2E32202     XOR.B   #0x1, &0x222
    129          
    130          
    131                  if(Last_Time_Sequence != Time_Sequence) {
   \   00006C   9292........ CMP.W   &Time_Sequence, &Last_Time_Sequence
   \   000072   F627         JEQ     ??main_0
    132                      Last_Time_Sequence = Time_Sequence;
   \   000074   9242........ MOV.W   &Time_Sequence, &Last_Time_Sequence
    133                      cycle_count++;
   \   00007A   9253....     ADD.W   #0x1, &cycle_count
    134                      time_change = 1;
   \   00007E   9243....     MOV.W   #0x1, &time_change
    135          
    136                      if(cycle_count == TIME_SEQUENCE_MAX) {
   \   000082   B290FA00.... CMP.W   #0xfa, &cycle_count
   \   000088   EB23         JNE     ??main_0
    137                          cycle_count = 0;
   \   00008A   8243....     MOV.W   #0x0, &cycle_count
    138                          stopwatch_seconds++;
   \   00008E   9253....     ADD.W   #0x1, &stopwatch_seconds
   \   000092   E63F         JMP     ??main_0
   \   000094   0343         NOP
   \   000096                REQUIRE _A_PM5CTL0_L
   \   000096                REQUIRE _A_PBOUT_L
    139                      }
    140                  }
    141              }
    142          
    143              //------------------------------------------------------------------------------
    144          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  
    145          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> EmitterOn
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_DAC
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_REF
        4   -> Init_Serial_UCA
        4   -> Init_Timers
        4   -> MotorSafety
        4   -> StateMachine
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       2  Last_Time_Sequence
       2  UCA0_index
       2  UCA1_index
       2  _A_PBOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       2  cycle_count
       1  display_mode
     150  main
       1  slow_input_down
       2  stopwatch_milliseconds
       2  stopwatch_seconds
       2  test_value
       2  time_change

 
 150 bytes in segment CODE
   4 bytes in segment DATA16_AN
  11 bytes in segment DATA16_C
  20 bytes in segment DATA16_Z
 
 150 bytes of CODE  memory
  11 bytes of CONST memory
  20 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
