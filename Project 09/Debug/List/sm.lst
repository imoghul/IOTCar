###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          05/Apr/2022  21:53:34
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 09\sm.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW36A7.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 09\sm.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 09\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 09\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 09\Debug\List\sm.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 09\Debug\Obj\sm.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 09\sm.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2
      2          #include "ports.h"
      3          #include "wheels.h"
      4          #include "sm.h"
      5          #include <string.h>
      6          #include "adc.h"
      7          #include "timers.h"
      8          #include "detectors.h"
      9          #include "pid.h"
     10          
     11          extern volatile unsigned int cycle_count;
     12          extern volatile unsigned int stopwatch_milliseconds;
     13          extern volatile unsigned int stopwatch_seconds;
     14          extern volatile unsigned char display_changed;
     15          extern char display_line[4][11];
     16          extern volatile unsigned int wheel_periods;

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     17          volatile char state = START;//CALIBRATE;
   \                     state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for state>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile int stateCounter;
   \                     stateCounter:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     19          volatile char nextState = STRAIGHT;
   \                     nextState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for nextState>`
     20          extern volatile unsigned int Time_Sequence;
     21          extern volatile unsigned int Last_Time_Sequence;
     22          extern volatile unsigned int time_change;

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     23          volatile unsigned int delayTime = 1;
   \                     delayTime:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for delayTime>`
     24          extern volatile unsigned int ADC_Left_Detect, ADC_Right_Detect;
     25          extern volatile unsigned int rightSwitchable, leftSwitchable;
     26          extern unsigned int temp;
     27          extern char movingDirection;

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     28          char enteringDirection = NOT_MOVING;
   \                     enteringDirection:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for enteringDirection>`
     29          extern int leftVals[VALUES_TO_HOLD];
     30          extern int rightVals[VALUES_TO_HOLD];
     31          extern volatile unsigned int calibrationMode;
     32          extern unsigned int LBDetect, LWDetect, RBDetect, RWDetect;
     33          extern PIDController rightFollowController, rightAdjustController;
     34          extern PIDController leftFollowController, leftAdjustController;
     35          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          int polarityRight, polarityLeft;
   \                     polarityRight:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     polarityLeft:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          unsigned int driveTime;
   \                     driveTime:
   \   000000                DS8 2
     38          
     39          

   \                                 In  segment CODE, align 2
     40          void Straight(void) {
   \                     Straight:
     41          
     42              if (stateCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &stateCounter
   \   000004   0420         JNE     ??Straight_2
     43                  EmitterOn();
   \   000006   ........     CALLA   #EmitterOn
     44                  stateCounter++;
   \   00000A   9253....     ADD.W   #0x1, &stateCounter
     45              }
     46          
     47              if(stateCounter == 1) {
   \                     ??Straight_2:
   \   00000E   9293....     CMP.W   #0x1, &stateCounter
   \   000012   2420         JNE     ??Straight_0
     48                  if ((ADC_Left_Detect < LEFT_WHITE_DETECT || ADC_Right_Detect < RIGHT_WHITE_DETECT)) {
   \   000014   1F42....     MOV.W   &LWDetect, R15
   \   000018   3F501400     ADD.W   #0x14, R15
   \   00001C   829F....     CMP.W   R15, &ADC_Left_Detect
   \   000020   0728         JNC     ??Straight_3
   \   000022   1F42....     MOV.W   &RWDetect, R15
   \   000026   3F501400     ADD.W   #0x14, R15
   \   00002A   829F....     CMP.W   R15, &ADC_Right_Detect
   \   00002E   072C         JC      ??Straight_4
     49                      Drive_Path_Indefinite(STRAIGHT_RIGHT, STRAIGHT_LEFT);
   \                     ??Straight_3:
   \   000030   3D40803E     MOV.W   #0x3e80, R13
   \   000034   3C40204E     MOV.W   #0x4e20, R12
   \   000038   ........     CALLA   #Drive_Path_Indefinite
   \   00003C   0F3C         JMP     ??Straight_0
     50                  } else {
     51                      int left = ADC_Left_Detect;
   \                     ??Straight_4:
   \   00003E   1F42....     MOV.W   &ADC_Left_Detect, R15
     52                      int right = ADC_Right_Detect;
   \   000042   1E42....     MOV.W   &ADC_Right_Detect, R14
     53          
     54                      if(left > right) enteringDirection = MOVING_LEFT;
   \   000046   0E9F         CMP.W   R15, R14
   \   000048   0434         JGE     ??Straight_5
   \   00004A   F2404C00.... MOV.B   #0x4c, &enteringDirection
   \   000050   033C         JMP     ??Straight_1
     55                      else enteringDirection = MOVING_RIGHT;
   \                     ??Straight_5:
   \   000052   F2405200.... MOV.B   #0x52, &enteringDirection
     56          
     57                      stateCounter++;
   \                     ??Straight_1:
   \   000058   9253....     ADD.W   #0x1, &stateCounter
     58                  }
     59              }
     60          
     61              if(stateCounter == 2) {
   \                     ??Straight_0:
   \   00005C   A293....     CMP.W   #0x2, &stateCounter
   \   000060   0920         JNE     ??Straight_6
     62                  if(LockMotors(-1, -1)) stateCounter++;
   \   000062   3D43         MOV.W   #0xffff, R13
   \   000064   3C43         MOV.W   #0xffff, R12
   \   000066   ........     CALLA   #LockMotors
   \   00006A   0C93         CMP.W   #0x0, R12
   \   00006C   1124         JEQ     ??Straight_7
   \   00006E   9253....     ADD.W   #0x1, &stateCounter
   \   000072   1001         RETA
     63              }
     64          
     65              else if (stateCounter == 3) {
   \                     ??Straight_6:
   \   000074   B2900300.... CMP.W   #0x3, &stateCounter
   \   00007A   0A20         JNE     ??Straight_7
     66                  stateCounter = 0 ;
   \   00007C   8243....     MOV.W   #0x0, &stateCounter
     67                  state = WAIT;
   \   000080   F2405700.... MOV.B   #0x57, &state
     68                  nextState = TURN;
   \   000086   F2405400.... MOV.B   #0x54, &nextState
     69                  EmitterOff();
   \   00008C   ........     CALLA   #EmitterOff
     70              }
     71          }
   \                     ??Straight_7:
   \   000090   1001         RETA
     72          

   \                                 In  segment CODE, align 2
     73          void Turn() {
   \                     Turn:
     74            switch(stateCounter){
   \   000000   1F42....     MOV.W   &stateCounter, R15
   \   000004   0F83         SUB.W   #0x0, R15
   \   000006   0724         JEQ     ??Turn_3
   \   000008   1F83         SUB.W   #0x1, R15
   \   00000A   0A24         JEQ     ??Turn_4
   \   00000C   1F83         SUB.W   #0x1, R15
   \   00000E   2A24         JEQ     ??Turn_5
   \   000010   1F83         SUB.W   #0x1, R15
   \   000012   5824         JEQ     ??Turn_6
   \   000014   1001         RETA
     75            case 0:
     76                  EmitterOn();
   \                     ??Turn_3:
   \   000016   ........     CALLA   #EmitterOn
     77                  stateCounter = 1;
   \   00001A   9243....     MOV.W   #0x1, &stateCounter
     78                  break;
   \   00001E   1001         RETA
     79          
     80            case 1: // gotta remove this
     81                  if(enteringDirection == MOVING_LEFT) 
   \                     ??Turn_4:
   \   000020   F2904C00.... CMP.B   #0x4c, &enteringDirection
   \   000026   5A20         JNE     ??Turn_1
     82                      if(Drive_Path_Definite(STRAIGHT_RIGHT / 2, -STRAIGHT_LEFT / 2, 20)) stateCounter++;
   \   000028   3E401400     MOV.W   #0x14, R14
   \   00002C   3D40C0E0     MOV.W   #0xe0c0, R13
   \   000030   3C401027     MOV.W   #0x2710, R12
   \   000034   ........     CALLA   #Drive_Path_Definite
   \   000038   0C93         CMP.W   #0x0, R12
   \   00003A   0324         JEQ     ??Turn_7
   \   00003C   9253....     ADD.W   #0x1, &stateCounter
   \   000040   1001         RETA
     83                  else if(enteringDirection == MOVING_RIGHT) 
   \                     ??Turn_7:
   \   000042   F2905200.... CMP.B   #0x52, &enteringDirection
   \   000048   4920         JNE     ??Turn_1
     84                      if(Drive_Path_Definite(-STRAIGHT_RIGHT / 2, STRAIGHT_LEFT / 2, 20)) stateCounter++;
   \   00004A   3E401400     MOV.W   #0x14, R14
   \   00004E   3D40401F     MOV.W   #0x1f40, R13
   \   000052   3C40F0D8     MOV.W   #0xd8f0, R12
   \   000056   ........     CALLA   #Drive_Path_Definite
   \   00005A   0C93         CMP.W   #0x0, R12
   \   00005C   3F24         JEQ     ??Turn_1
   \   00005E   9253....     ADD.W   #0x1, &stateCounter
     85                  
     86                  break;
   \   000062   1001         RETA
     87          
     88            case 2:
     89                  if (((ADC_Left_Detect <= LEFT_GRAY_DETECT || ADC_Right_Detect <= RIGHT_GRAY_DETECT))) {
   \                     ??Turn_5:
   \   000064   1F42....     MOV.W   &LBDetect, R15
   \   000068   0C4F         MOV.W   R15, R12
   \   00006A                RPT     #0x2
   \   00006A   41180C5F     ADDX.W  R15, R12
   \   00006E   3E400A00     MOV.W   #0xa, R14
   \   000072   ........     CALLA   #?DivMod16u
   \   000076   1C92....     CMP.W   &ADC_Left_Detect, R12
   \   00007A   0C2C         JC      ??Turn_8
   \   00007C   1F42....     MOV.W   &RBDetect, R15
   \   000080   0C4F         MOV.W   R15, R12
   \   000082                RPT     #0x2
   \   000082   41180C5F     ADDX.W  R15, R12
   \   000086   3E400A00     MOV.W   #0xa, R14
   \   00008A   ........     CALLA   #?DivMod16u
   \   00008E   1C92....     CMP.W   &ADC_Right_Detect, R12
   \   000092   1528         JNC     ??Turn_9
     90                      if(enteringDirection == MOVING_LEFT)Drive_Path_Indefinite(STRAIGHT_RIGHT >> 2, -STRAIGHT_LEFT >> 2);
   \                     ??Turn_8:
   \   000094   F2904C00.... CMP.B   #0x4c, &enteringDirection
   \   00009A   0620         JNE     ??Turn_10
   \   00009C   3D4060F0     MOV.W   #0xf060, R13
   \   0000A0   3C408813     MOV.W   #0x1388, R12
   \   0000A4   ........     CALLA   #Drive_Path_Indefinite
     91          
     92                      if(enteringDirection == MOVING_RIGHT)Drive_Path_Indefinite(-STRAIGHT_RIGHT >> 2, STRAIGHT_LEFT >> 2);
   \                     ??Turn_10:
   \   0000A8   F2905200.... CMP.B   #0x52, &enteringDirection
   \   0000AE   1620         JNE     ??Turn_1
   \   0000B0   3D40A00F     MOV.W   #0xfa0, R13
   \   0000B4   3C4078EC     MOV.W   #0xec78, R12
   \   0000B8   ........     CALLA   #Drive_Path_Indefinite
   \   0000BC   1001         RETA
     93                  } else stateCounter++;
   \                     ??Turn_9:
   \   0000BE   9253....     ADD.W   #0x1, &stateCounter
     94                  break;
   \   0000C2   1001         RETA
     95                  
     96            case 3:
     97                  ShutoffMotors();
   \                     ??Turn_6:
   \   0000C4   ........     CALLA   #ShutoffMotors
     98                  stateCounter = 0 ;
   \   0000C8   8243....     MOV.W   #0x0, &stateCounter
     99                  state = WAIT;
   \   0000CC   F2405700.... MOV.B   #0x57, &state
    100                  nextState = LINEFOLLOW;
   \   0000D2   F2404C00.... MOV.B   #0x4c, &nextState
    101                  EmitterOff();
   \   0000D8   ........     CALLA   #EmitterOff
    102              break;
    103            }
    104          }
   \                     ??Turn_1:
   \   0000DC   1001         RETA
    105          

   \                                 In  segment CODE, align 2
    106          void LineFollow() {
   \                     LineFollow:
   \   000000   5B15         PUSHM.W #0x6, R11
    107            
    108              int rFollowSpeed, rAdjustSpeed;
                                       ^
Warning[Pe177]: variable "rAdjustSpeed" was declared but never referenced
    109              int lFollowSpeed, lAdjustSpeed;
                                       ^
Warning[Pe177]: variable "lAdjustSpeed" was declared but never referenced
    110          
    111              int leftPIDOut = GetOutput(&leftFollowController, LEFT_WHITE_DETECT, ADC_Left_Detect);
   \   000002   1E42....     MOV.W   &ADC_Left_Detect, R14
   \   000006   1D42....     MOV.W   &LWDetect, R13
   \   00000A   3D501400     ADD.W   #0x14, R13
   \   00000E   3C40....     MOV.W   #leftFollowController, R12
   \   000012   ........     CALLA   #GetOutput
   \   000016   084C         MOV.W   R12, R8
    112              int rightPIDOut = GetOutput(&rightFollowController, RIGHT_WHITE_DETECT, ADC_Right_Detect);
   \   000018   1E42....     MOV.W   &ADC_Right_Detect, R14
   \   00001C   1D42....     MOV.W   &RWDetect, R13
   \   000020   3D501400     ADD.W   #0x14, R13
   \   000024   3C40....     MOV.W   #rightFollowController, R12
   \   000028   ........     CALLA   #GetOutput
   \   00002C   094C         MOV.W   R12, R9
    113              rFollowSpeed = additionSafe(RIGHT_FORWARD_SPEED, RIGHT_MAX, RIGHT_MIN >> 1, leftPIDOut); // swapped b/c they are physically swapped
   \   00002E   0F48         MOV.W   R8, R15
   \   000030   3E409A10     MOV.W   #0x109a, R14
   \   000034   3D401027     MOV.W   #0x2710, R13
   \   000038   1C425404     MOV.W   &0x454, R12
   \   00003C   ........     CALLA   #additionSafe
   \   000040   0A4C         MOV.W   R12, R10
    114              lFollowSpeed = additionSafe(LEFT_FORWARD_SPEED, LEFT_MAX, LEFT_MIN >> 1, rightPIDOut); // swapped b/c they are physically swapped
   \   000042   0F49         MOV.W   R9, R15
   \   000044   3E409A10     MOV.W   #0x109a, R14
   \   000048   3D401027     MOV.W   #0x2710, R13
   \   00004C   1C425604     MOV.W   &0x456, R12
   \   000050   ........     CALLA   #additionSafe
   \   000054   0B4C         MOV.W   R12, R11
    115              
    116              switch(stateCounter){
   \   000056   1F42....     MOV.W   &stateCounter, R15
   \   00005A   0F83         SUB.W   #0x0, R15
   \   00005C   0B24         JEQ     ??LineFollow_8
   \   00005E   1F83         SUB.W   #0x1, R15
   \   000060   1824         JEQ     ??LineFollow_9
   \   000062   1F83         SUB.W   #0x1, R15
   \   000064   6E24         JEQ     ??LineFollow_10
   \   000066   1F83         SUB.W   #0x1, R15
   \   000068   8E24         JEQ     ??LineFollow_11
   \   00006A   1F83         SUB.W   #0x1, R15
   \   00006C   AD24         JEQ     ??LineFollow_12
   \   00006E   1F83         SUB.W   #0x1, R15
   \   000070   CD24         JEQ     ??LineFollow_13
   \   000072   D53C         JMP     ??LineFollow_0
    117                case 0:
    118                  EmitterOn();
   \                     ??LineFollow_8:
   \   000074   ........     CALLA   #EmitterOn
    119                  stopwatch_seconds = 0;
   \   000078   8243....     MOV.W   #0x0, &stopwatch_seconds
    120                  cycle_count = 0;
   \   00007C   8243....     MOV.W   #0x0, &cycle_count
    121                  if(rightSwitchable && leftSwitchable)stateCounter++;
   \   000080   8293....     CMP.W   #0x0, &rightSwitchable
   \   000084   CC24         JEQ     ??LineFollow_0
   \   000086   8293....     CMP.W   #0x0, &leftSwitchable
   \   00008A   C924         JEQ     ??LineFollow_0
   \   00008C   9253....     ADD.W   #0x1, &stateCounter
    122                  else return;
    123                  break;
   \   000090   C63C         JMP     ??LineFollow_0
    124                case 1:
    125                    if(ADC_Left_Detect < (LEFT_GRAY_DETECT) ^ ADC_Right_Detect < (RIGHT_GRAY_DETECT)) stateCounter = 2;
                           ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is undefined
          in this statement
   \                     ??LineFollow_9:
   \   000092   1F42....     MOV.W   &LBDetect, R15
   \   000096   0C4F         MOV.W   R15, R12
   \   000098                RPT     #0x2
   \   000098   41180C5F     ADDX.W  R15, R12
   \   00009C   3E400A00     MOV.W   #0xa, R14
   \   0000A0   ........     CALLA   #?DivMod16u
   \   0000A4   829C....     CMP.W   R12, &ADC_Left_Detect
   \   0000A8   022C         JC      ??LineFollow_14
   \   0000AA   5643         MOV.B   #0x1, R6
   \   0000AC   013C         JMP     ??LineFollow_5
   \                     ??LineFollow_14:
   \   0000AE   4643         MOV.B   #0x0, R6
   \                     ??LineFollow_5:
   \   0000B0   1F42....     MOV.W   &RBDetect, R15
   \   0000B4   0C4F         MOV.W   R15, R12
   \   0000B6                RPT     #0x2
   \   0000B6   41180C5F     ADDX.W  R15, R12
   \   0000BA   3E400A00     MOV.W   #0xa, R14
   \   0000BE   ........     CALLA   #?DivMod16u
   \   0000C2   829C....     CMP.W   R12, &ADC_Right_Detect
   \   0000C6   022C         JC      ??LineFollow_15
   \   0000C8   5E43         MOV.B   #0x1, R14
   \   0000CA   013C         JMP     ??LineFollow_6
   \                     ??LineFollow_15:
   \   0000CC   4E43         MOV.B   #0x0, R14
   \                     ??LineFollow_6:
   \   0000CE   46EE         XOR.B   R14, R6
   \   0000D0   4693         CMP.B   #0x0, R6
   \   0000D2   0324         JEQ     ??LineFollow_16
   \   0000D4   A243....     MOV.W   #0x2, &stateCounter
   \   0000D8   253C         JMP     ??LineFollow_7
    126                    else if (ADC_Left_Detect < (LEFT_GRAY_DETECT) && ADC_Right_Detect < (RIGHT_GRAY_DETECT)) {
   \                     ??LineFollow_16:
   \   0000DA   1F42....     MOV.W   &LBDetect, R15
   \   0000DE   0C4F         MOV.W   R15, R12
   \   0000E0                RPT     #0x2
   \   0000E0   41180C5F     ADDX.W  R15, R12
   \   0000E4   3E400A00     MOV.W   #0xa, R14
   \   0000E8   ........     CALLA   #?DivMod16u
   \   0000EC   829C....     CMP.W   R12, &ADC_Left_Detect
   \   0000F0   112C         JC      ??LineFollow_17
   \   0000F2   1F42....     MOV.W   &RBDetect, R15
   \   0000F6   0C4F         MOV.W   R15, R12
   \   0000F8                RPT     #0x2
   \   0000F8   41180C5F     ADDX.W  R15, R12
   \   0000FC   3E400A00     MOV.W   #0xa, R14
   \   000100   ........     CALLA   #?DivMod16u
   \   000104   829C....     CMP.W   R12, &ADC_Right_Detect
   \   000108   052C         JC      ??LineFollow_17
    127                        rFollowSpeed = -RIGHT_MIN;
   \   00010A   3A40CCDE     MOV.W   #0xdecc, R10
    128                        lFollowSpeed = -LEFT_MIN;
   \   00010E   3B40CCDE     MOV.W   #0xdecc, R11
   \   000112   083C         JMP     ??LineFollow_7
    129                    } else {
    130                        ClearController(&rightFollowController);
   \                     ??LineFollow_17:
   \   000114   3C40....     MOV.W   #rightFollowController, R12
   \   000118   ........     CALLA   #ClearController
    131                        ClearController(&leftFollowController);
   \   00011C   3C40....     MOV.W   #leftFollowController, R12
   \   000120   ........     CALLA   #ClearController
    132                    }
    133                    if(delay(70, 0)) stateCounter = 5;
   \                     ??LineFollow_7:
   \   000124   0D43         MOV.W   #0x0, R13
   \   000126   3C404600     MOV.W   #0x46, R12
   \   00012A   ........     CALLA   #delay
   \   00012E   0C93         CMP.W   #0x0, R12
   \   000130   0324         JEQ     ??LineFollow_18
   \   000132   B2400500.... MOV.W   #0x5, &stateCounter
    134          
    135                    Drive_Path_Indefinite(rFollowSpeed, lFollowSpeed);
   \                     ??LineFollow_18:
   \   000138   0D4B         MOV.W   R11, R13
   \   00013A   0C4A         MOV.W   R10, R12
   \   00013C   ........     CALLA   #Drive_Path_Indefinite
    136                    break;
   \   000140   6E3C         JMP     ??LineFollow_0
    137          
    138                
    139                case 2:
    140                    if(ADC_Left_Detect < LEFT_BLACK_DETECT && ADC_Right_Detect >= RIGHT_BLACK_DETECT) stateCounter = 3;
   \                     ??LineFollow_10:
   \   000142   1F42....     MOV.W   &LBDetect, R15
   \   000146   5F03         RRUM.W  #0x1, R15
   \   000148   829F....     CMP.W   R15, &ADC_Left_Detect
   \   00014C   0A2C         JC      ??LineFollow_19
   \   00014E   1F42....     MOV.W   &RBDetect, R15
   \   000152   5F03         RRUM.W  #0x1, R15
   \   000154   829F....     CMP.W   R15, &ADC_Right_Detect
   \   000158   0428         JNC     ??LineFollow_19
   \   00015A   B2400300.... MOV.W   #0x3, &stateCounter
   \   000160   5E3C         JMP     ??LineFollow_0
    141                    else if(ADC_Left_Detect >= LEFT_BLACK_DETECT && ADC_Right_Detect < RIGHT_BLACK_DETECT) stateCounter = 4;
   \                     ??LineFollow_19:
   \   000162   1F42....     MOV.W   &LBDetect, R15
   \   000166   5F03         RRUM.W  #0x1, R15
   \   000168   829F....     CMP.W   R15, &ADC_Left_Detect
   \   00016C   0928         JNC     ??LineFollow_20
   \   00016E   1F42....     MOV.W   &RBDetect, R15
   \   000172   5F03         RRUM.W  #0x1, R15
   \   000174   829F....     CMP.W   R15, &ADC_Right_Detect
   \   000178   032C         JC      ??LineFollow_20
   \   00017A   A242....     MOV.W   #0x4, &stateCounter
   \   00017E   4F3C         JMP     ??LineFollow_0
    142                    else stateCounter = 1;
   \                     ??LineFollow_20:
   \   000180   9243....     MOV.W   #0x1, &stateCounter
    143                    break;
   \   000184   4C3C         JMP     ??LineFollow_0
    144          
    145                case 3:// turn left ()
    146                    if(ADC_Left_Detect < LEFT_BLACK_DETECT)Drive_Path_Indefinite((RIGHT_MIN - LF_TURN_DECREMENT), -(LEFT_MIN - LF_TURN_DECREMENT));
   \                     ??LineFollow_11:
   \   000186   1F42....     MOV.W   &LBDetect, R15
   \   00018A   5F03         RRUM.W  #0x1, R15
   \   00018C   829F....     CMP.W   R15, &ADC_Left_Detect
   \   000190   072C         JC      ??LineFollow_21
   \   000192   3D409CE6     MOV.W   #0xe69c, R13
   \   000196   3C406419     MOV.W   #0x1964, R12
   \   00019A   ........     CALLA   #Drive_Path_Indefinite
   \   00019E   3F3C         JMP     ??LineFollow_0
    147                    else if (ADC_Left_Detect >= LEFT_WHITE_DETECT && ADC_Right_Detect >= RIGHT_WHITE_DETECT) stateCounter = 1;
   \                     ??LineFollow_21:
   \   0001A0   1F42....     MOV.W   &LWDetect, R15
   \   0001A4   3F501400     ADD.W   #0x14, R15
   \   0001A8   829F....     CMP.W   R15, &ADC_Left_Detect
   \   0001AC   0A28         JNC     ??LineFollow_22
   \   0001AE   1F42....     MOV.W   &RWDetect, R15
   \   0001B2   3F501400     ADD.W   #0x14, R15
   \   0001B6   829F....     CMP.W   R15, &ADC_Right_Detect
   \   0001BA   0328         JNC     ??LineFollow_22
   \   0001BC   9243....     MOV.W   #0x1, &stateCounter
   \   0001C0   2E3C         JMP     ??LineFollow_0
    148                    else stateCounter = 4;
   \                     ??LineFollow_22:
   \   0001C2   A242....     MOV.W   #0x4, &stateCounter
    149                    break;
   \   0001C6   2B3C         JMP     ??LineFollow_0
    150                case 4:
    151                    if(ADC_Right_Detect < RIGHT_BLACK_DETECT)Drive_Path_Indefinite(-(RIGHT_MIN - LF_TURN_DECREMENT), (LEFT_MIN - LF_TURN_DECREMENT));
   \                     ??LineFollow_12:
   \   0001C8   1F42....     MOV.W   &RBDetect, R15
   \   0001CC   5F03         RRUM.W  #0x1, R15
   \   0001CE   829F....     CMP.W   R15, &ADC_Right_Detect
   \   0001D2   072C         JC      ??LineFollow_23
   \   0001D4   3D406419     MOV.W   #0x1964, R13
   \   0001D8   3C409CE6     MOV.W   #0xe69c, R12
   \   0001DC   ........     CALLA   #Drive_Path_Indefinite
   \   0001E0   1E3C         JMP     ??LineFollow_0
    152                    else if (ADC_Left_Detect >= LEFT_WHITE_DETECT && ADC_Right_Detect >= RIGHT_WHITE_DETECT) stateCounter = 1;
   \                     ??LineFollow_23:
   \   0001E2   1F42....     MOV.W   &LWDetect, R15
   \   0001E6   3F501400     ADD.W   #0x14, R15
   \   0001EA   829F....     CMP.W   R15, &ADC_Left_Detect
   \   0001EE   0A28         JNC     ??LineFollow_24
   \   0001F0   1F42....     MOV.W   &RWDetect, R15
   \   0001F4   3F501400     ADD.W   #0x14, R15
   \   0001F8   829F....     CMP.W   R15, &ADC_Right_Detect
   \   0001FC   0328         JNC     ??LineFollow_24
   \   0001FE   9243....     MOV.W   #0x1, &stateCounter
   \   000202   0D3C         JMP     ??LineFollow_0
    153                    else stateCounter = 3;
   \                     ??LineFollow_24:
   \   000204   B2400300.... MOV.W   #0x3, &stateCounter
    154                    break;
   \   00020A   093C         JMP     ??LineFollow_0
    155                
    156                //case 10:
    157                //    if(LockMotorsTime(-1, -1, 1)) stateCounter = 2;
    158                //    break;
    159          
    160                case 5:
    161                    ShutoffMotors();
   \                     ??LineFollow_13:
   \   00020C   ........     CALLA   #ShutoffMotors
    162                    stateCounter = 0 ;
   \   000210   8243....     MOV.W   #0x0, &stateCounter
    163                    state = START;
   \   000214   F2405300.... MOV.B   #0x53, &state
    164                    EmitterOff();
   \   00021A   ........     CALLA   #EmitterOff
    165                    break;
    166              }
    167            
    168              
    169          }
   \                     ??LineFollow_0:
   \   00021E   5617         POPM.W  #0x6, R11
   \   000220   1001         RETA
   \   000222                REQUIRE _A_TB3CCR1_L
   \   000222                REQUIRE _A_TB3CCR2_L
    170          

   \                                 In  segment CODE, align 2
    171          void Drive(int polR,int polL,unsigned int time) {
   \                     Drive:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   084E         MOV.W   R14, R8
    172            switch(stateCounter){
   \   000008   1F42....     MOV.W   &stateCounter, R15
   \   00000C   0F83         SUB.W   #0x0, R15
   \   00000E   0724         JEQ     ??Drive_3
   \   000010   1F83         SUB.W   #0x1, R15
   \   000012   0C24         JEQ     ??Drive_4
   \   000014   1F83         SUB.W   #0x1, R15
   \   000016   2C24         JEQ     ??Drive_5
   \   000018   1F83         SUB.W   #0x1, R15
   \   00001A   3724         JEQ     ??Drive_6
   \   00001C   3F3C         JMP     ??Drive_1
    173            
    174              case 0 :
    175                  display_changed = 1;
   \                     ??Drive_3:
   \   00001E   D243....     MOV.B   #0x1, &display_changed
    176                  EmitterOn();
   \   000022   ........     CALLA   #EmitterOn
    177                  stateCounter++;
   \   000026   9253....     ADD.W   #0x1, &stateCounter
    178                  break;
   \   00002A   383C         JMP     ??Drive_1
    179              case 1 :
    180                if(Drive_Path_Definite(polR*STRAIGHT_RIGHT,polL*STRAIGHT_LEFT, time))stateCounter++;
   \                     ??Drive_4:
   \   00002C   0E48         MOV.W   R8, R14
   \   00002E   0D4B         MOV.W   R11, R13
   \   000030   5D0E         RLAM.W  #0x4, R13
   \   000032   5D0A         RLAM.W  #0x3, R13
   \   000034   0F4D         MOV.W   R13, R15
   \   000036   5D06         RLAM.W  #0x2, R13
   \   000038   0F5D         ADD.W   R13, R15
   \   00003A   0D5D         RLA.W   R13
   \   00003C   0F5D         ADD.W   R13, R15
   \   00003E   0D5D         RLA.W   R13
   \   000040   0F5D         ADD.W   R13, R15
   \   000042   0D5D         RLA.W   R13
   \   000044   0F5D         ADD.W   R13, R15
   \   000046   0D5D         RLA.W   R13
   \   000048   0D5F         ADD.W   R15, R13
   \   00004A   0C4A         MOV.W   R10, R12
   \   00004C   5C0E         RLAM.W  #0x4, R12
   \   00004E   5C02         RLAM.W  #0x1, R12
   \   000050   0F4C         MOV.W   R12, R15
   \   000052   5C0E         RLAM.W  #0x4, R12
   \   000054   0F5C         ADD.W   R12, R15
   \   000056   0C5C         RLA.W   R12
   \   000058   0F5C         ADD.W   R12, R15
   \   00005A   0C5C         RLA.W   R12
   \   00005C   0F5C         ADD.W   R12, R15
   \   00005E   5C0A         RLAM.W  #0x3, R12
   \   000060   0C5F         ADD.W   R15, R12
   \   000062   ........     CALLA   #Drive_Path_Definite
   \   000066   0C93         CMP.W   #0x0, R12
   \   000068   1924         JEQ     ??Drive_1
   \   00006A   9253....     ADD.W   #0x1, &stateCounter
    181                break;
   \   00006E   163C         JMP     ??Drive_1
    182          
    183              case 2 :
    184                  if(LockMotors(-polR, -polL)) stateCounter++;
   \                     ??Drive_5:
   \   000070   0D4B         MOV.W   R11, R13
   \   000072   3DE3         XOR.W   #0xffff, R13
   \   000074   1D53         ADD.W   #0x1, R13
   \   000076   0C4A         MOV.W   R10, R12
   \   000078   3CE3         XOR.W   #0xffff, R12
   \   00007A   1C53         ADD.W   #0x1, R12
   \   00007C   ........     CALLA   #LockMotors
   \   000080   0C93         CMP.W   #0x0, R12
   \   000082   0C24         JEQ     ??Drive_1
   \   000084   9253....     ADD.W   #0x1, &stateCounter
    185                  break;
   \   000088   093C         JMP     ??Drive_1
    186          
    187              case 3 : 
    188                  ShutoffMotors();
   \                     ??Drive_6:
   \   00008A   ........     CALLA   #ShutoffMotors
    189                  stateCounter = 0 ;
   \   00008E   8243....     MOV.W   #0x0, &stateCounter
    190                  state = START;
   \   000092   F2405300.... MOV.B   #0x53, &state
    191                  EmitterOff();
   \   000098   ........     CALLA   #EmitterOff
    192                  break;
    193            }
    194          }
   \                     ??Drive_1:
   \   00009C   3817         POPM.W  #0x4, R11
   \   00009E   1001         RETA
    195          
    196          
    197          
    198          // delays for a specified time and then switches state to global nextState
    199          // make sure nextState is set to desired vlaue before the end of delay

   \                                 In  segment CODE, align 2
    200          int delay(int seconds, int cycles) {
   \                     delay:
   \   000000   0F4C         MOV.W   R12, R15
    201              if(stopwatch_seconds == 0 && cycle_count <= 1) {
   \   000002   8293....     CMP.W   #0x0, &stopwatch_seconds
   \   000006   0520         JNE     ??delay_0
   \   000008   A293....     CMP.W   #0x2, &cycle_count
   \   00000C   022C         JC      ??delay_0
    202                  display_changed = 1;
   \   00000E   D243....     MOV.B   #0x1, &display_changed
    203              }
    204          
    205              if(stopwatch_seconds >= seconds && cycle_count >= cycles) {
   \                     ??delay_0:
   \   000012   829F....     CMP.W   R15, &stopwatch_seconds
   \   000016   0928         JNC     ??delay_1
   \   000018   829D....     CMP.W   R13, &cycle_count
   \   00001C   0628         JNC     ??delay_1
    206                  stopwatch_seconds = 0;
   \   00001E   8243....     MOV.W   #0x0, &stopwatch_seconds
    207                  cycle_count = 0;
   \   000022   8243....     MOV.W   #0x0, &cycle_count
    208                  return 1;
   \   000026   1C43         MOV.W   #0x1, R12
   \   000028   1001         RETA
    209              } else return 0;
   \                     ??delay_1:
   \   00002A   0C43         MOV.W   #0x0, R12
   \   00002C   1001         RETA
    210          }
    211          
    212          
    213          

   \                                 In  segment CODE, align 2
    214          void StateMachine(void) {
   \                     StateMachine:
    215              switch(state) {
   \   000000   5E42....     MOV.B   &state, R14
   \   000004   7E804300     SUB.B   #0x43, R14
   \   000008   1024         JEQ     ??StateMachine_3
   \   00000A   5E83         SUB.B   #0x1, R14
   \   00000C   3624         JEQ     ??StateMachine_4
   \   00000E   7E82         SUB.B   #0x8, R14
   \   000010   3124         JEQ     ??StateMachine_5
   \   000012   7E800700     SUB.B   #0x7, R14
   \   000016   1224         JEQ     ??StateMachine_6
   \   000018   5E83         SUB.B   #0x1, R14
   \   00001A   2924         JEQ     ??StateMachine_7
   \   00001C   7E800300     SUB.B   #0x3, R14
   \   000020   1224         JEQ     ??StateMachine_8
   \   000022   7E801C00     SUB.B   #0x1c, R14
   \   000026   2024         JEQ     ??StateMachine_9
   \   000028   1001         RETA
    216                  case (CALIBRATE):
    217                      calibrate();
   \                     ??StateMachine_3:
   \   00002A   ........     CALLA   #calibrate
    218          
    219                      if(calibrationMode >= 2) {
   \   00002E   A293....     CMP.W   #0x2, &calibrationMode
   \   000032   2B28         JNC     ??StateMachine_0
    220                          state = START;
   \   000034   F2405300.... MOV.B   #0x53, &state
    221                      }
    222          
    223                      break;
   \   00003A   1001         RETA
    224          
    225                  case (START):
    226                      stopwatch_seconds = 0;
   \                     ??StateMachine_6:
   \   00003C   8243....     MOV.W   #0x0, &stopwatch_seconds
    227                      cycle_count = 0;
   \   000040   8243....     MOV.W   #0x0, &cycle_count
    228                      break;
   \   000044   1001         RETA
    229          
    230                  case (WAIT):
    231                      strcpy(display_line[0], "WAITING...");
   \                     ??StateMachine_8:
   \   000046   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   00004A   3C40....     MOV.W   #display_line, R12
   \   00004E   ........     CALLA   #strcpy
    232          
    233                      if (delay(delayTime, 0)) state = nextState;
   \   000052   0D43         MOV.W   #0x0, R13
   \   000054   1C42....     MOV.W   &delayTime, R12
   \   000058   ........     CALLA   #delay
   \   00005C   0C93         CMP.W   #0x0, R12
   \   00005E   1524         JEQ     ??StateMachine_0
   \   000060   D242........ MOV.B   &nextState, &state
    234          
    235                      break;
   \   000066   1001         RETA
    236          
    237                  case (STRAIGHT):
    238                      Straight();
   \                     ??StateMachine_9:
   \   000068   ........     CALLA   #Straight
    239                      break;
   \   00006C   1001         RETA
    240          
    241                  case (TURN):
    242                      Turn();
   \                     ??StateMachine_7:
   \   00006E   ........     CALLA   #Turn
    243                      break;
   \   000072   1001         RETA
    244          
    245                  case (LINEFOLLOW):
    246                      LineFollow();
   \                     ??StateMachine_5:
   \   000074   ........     CALLA   #LineFollow
    247                      break;
   \   000078   1001         RETA
    248                      
    249                  case (DRIVE):
    250                      Drive(polarityRight,polarityLeft,driveTime);
   \                     ??StateMachine_4:
   \   00007A   1E42....     MOV.W   &driveTime, R14
   \   00007E   1D42....     MOV.W   &polarityLeft, R13
   \   000082   1C42....     MOV.W   &polarityRight, R12
   \   000086   ........     CALLA   #Drive
    251                      //if(Drive_Path(polarityRight*STRAIGHT_RIGHT,polarityLeft*STRAIGHT_LEFT, driveTime))state = START;
    252                  default:
    253                      break;
    254              }
    255          }
   \                     ??StateMachine_0:
   \   00008A   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for state>`:
   \   000000   53           DC8 83

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for nextState>`:
   \   000000   73           DC8 115

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for delayTime>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for enteringDirection>`:
   \   000000   4E           DC8 78

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WAITING...">`:
   \   000000   57414954494E DC8 "WAITING..."
   \            472E2E2E00  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Drive
       12   -> Drive_Path_Definite
       12   -> EmitterOff
       12   -> EmitterOn
       12   -> LockMotors
       12   -> ShutoffMotors
     16   LineFollow
       16   -> ClearController
       16   -> Drive_Path_Indefinite
       16   -> EmitterOff
       16   -> EmitterOn
       16   -> GetOutput
       16   -> ShutoffMotors
       16   -> additionSafe
       16   -> delay
       16 ?DivMod16u
      4   StateMachine
        4   -> Drive
        4   -> LineFollow
        4   -> Straight
        4   -> Turn
        4   -> calibrate
        4   -> delay
        4   -> strcpy
      4   Straight
        4   -> Drive_Path_Indefinite
        4   -> EmitterOff
        4   -> EmitterOn
        4   -> LockMotors
      4   Turn
        4   -> Drive_Path_Definite
        4   -> Drive_Path_Indefinite
        4   -> EmitterOff
        4   -> EmitterOn
        4   -> ShutoffMotors
        4 ?DivMod16u
      4   delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "WAITING...">
       2  ?<Initializer for delayTime>
       1  ?<Initializer for enteringDirection>
       1  ?<Initializer for nextState>
       1  ?<Initializer for state>
     160  Drive
     546  LineFollow
     140  StateMachine
     146  Straight
     222  Turn
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
      46  delay
       2  delayTime
       2  driveTime
       1  enteringDirection
       1  nextState
       2  polarityLeft
       2  polarityRight
       1  state
       2  stateCounter

 
 1 260 bytes in segment CODE
     4 bytes in segment DATA16_AN
    11 bytes in segment DATA16_C
     5 bytes in segment DATA16_I
     5 bytes in segment DATA16_ID
     8 bytes in segment DATA16_Z
 
 1 260 bytes of CODE  memory
    16 bytes of CONST memory
    13 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: 3
