###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          05/Apr/2022  09:29:39
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 09\sm.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW1EDC.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 09\sm.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 09\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 09\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 09\Debug\List\sm.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 09\Debug\Obj\sm.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 09\sm.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2
      2          #include "ports.h"
      3          #include "wheels.h"
      4          #include "sm.h"
      5          #include <string.h>
      6          #include "adc.h"
      7          #include "timers.h"
      8          #include "detectors.h"
      9          #include "pid.h"
     10          
     11          extern volatile unsigned int cycle_count;
     12          extern volatile unsigned int stopwatch_milliseconds;
     13          extern volatile unsigned int stopwatch_seconds;
     14          extern volatile unsigned char display_changed;
     15          extern char display_line[4][11];
     16          extern volatile unsigned int wheel_periods;

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     17          volatile char state = START;//CALIBRATE;
   \                     state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for state>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile int stateCounter;
   \                     stateCounter:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     19          volatile char nextState = STRAIGHT;
   \                     nextState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for nextState>`
     20          extern volatile unsigned int Time_Sequence;
     21          extern volatile unsigned int Last_Time_Sequence;
     22          extern volatile unsigned int time_change;

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     23          volatile unsigned int delayTime = 1;
   \                     delayTime:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for delayTime>`
     24          extern volatile unsigned int ADC_Left_Detect, ADC_Right_Detect;
     25          extern volatile unsigned int rightSwitchable, leftSwitchable;
     26          extern unsigned int temp;
     27          extern char movingDirection;

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     28          char enteringDirection = NOT_MOVING;
   \                     enteringDirection:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for enteringDirection>`
     29          extern int leftVals[VALUES_TO_HOLD];
     30          extern int rightVals[VALUES_TO_HOLD];
     31          extern volatile unsigned int calibrationMode;
     32          extern unsigned int LBDetect, LWDetect, RBDetect, RWDetect;
     33          extern PIDController rightFollowController, rightAdjustController;
     34          extern PIDController leftFollowController, leftAdjustController;
     35          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          int polarityRight, polarityLeft;
   \                     polarityRight:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     polarityLeft:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          unsigned int driveTime;
   \                     driveTime:
   \   000000                DS8 2
     38          
     39          

   \                                 In  segment CODE, align 2
     40          void Straight(void) {
   \                     Straight:
     41          
     42              if (stateCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &stateCounter
   \   000004   0C20         JNE     ??Straight_2
     43                  strcpy(display_line[0], "INTERCEPT ");
   \   000006   3D40....     MOV.W   #`?<Constant "INTERCEPT ">`, R13
   \   00000A   3C40....     MOV.W   #display_line, R12
   \   00000E   ........     CALLA   #strcpy
     44                  display_changed = 1;
   \   000012   D243....     MOV.B   #0x1, &display_changed
     45                  EmitterOn();
   \   000016   ........     CALLA   #EmitterOn
     46                  stateCounter++;
   \   00001A   9253....     ADD.W   #0x1, &stateCounter
     47              }
     48          
     49              if(stateCounter == 1) {
   \                     ??Straight_2:
   \   00001E   9293....     CMP.W   #0x1, &stateCounter
   \   000022   2520         JNE     ??Straight_0
     50                  if ((ADC_Left_Detect < LEFT_WHITE_DETECT || ADC_Right_Detect < RIGHT_WHITE_DETECT)) {
   \   000024   1F42....     MOV.W   &LWDetect, R15
   \   000028   3F501400     ADD.W   #0x14, R15
   \   00002C   829F....     CMP.W   R15, &ADC_Left_Detect
   \   000030   0728         JNC     ??Straight_3
   \   000032   1F42....     MOV.W   &RWDetect, R15
   \   000036   3F501400     ADD.W   #0x14, R15
   \   00003A   829F....     CMP.W   R15, &ADC_Right_Detect
   \   00003E   082C         JC      ??Straight_4
     51                      Drive_Path(STRAIGHT_RIGHT, STRAIGHT_LEFT, 0);
   \                     ??Straight_3:
   \   000040   0E43         MOV.W   #0x0, R14
   \   000042   3D40803E     MOV.W   #0x3e80, R13
   \   000046   3C40204E     MOV.W   #0x4e20, R12
   \   00004A   ........     CALLA   #Drive_Path
   \   00004E   0F3C         JMP     ??Straight_0
     52                  } else {
     53                      int left = ADC_Left_Detect;
   \                     ??Straight_4:
   \   000050   1F42....     MOV.W   &ADC_Left_Detect, R15
     54                      int right = ADC_Right_Detect;
   \   000054   1E42....     MOV.W   &ADC_Right_Detect, R14
     55          
     56                      if(left > right) enteringDirection = MOVING_LEFT;
   \   000058   0E9F         CMP.W   R15, R14
   \   00005A   0434         JGE     ??Straight_5
   \   00005C   F2404C00.... MOV.B   #0x4c, &enteringDirection
   \   000062   033C         JMP     ??Straight_1
     57                      else enteringDirection = MOVING_RIGHT;
   \                     ??Straight_5:
   \   000064   F2405200.... MOV.B   #0x52, &enteringDirection
     58          
     59                      stateCounter++;
   \                     ??Straight_1:
   \   00006A   9253....     ADD.W   #0x1, &stateCounter
     60                  }
     61              }
     62          
     63              if(stateCounter == 2) {
   \                     ??Straight_0:
   \   00006E   A293....     CMP.W   #0x2, &stateCounter
   \   000072   0920         JNE     ??Straight_6
     64                  if(LockMotors(-1, -1)) stateCounter++;
   \   000074   3D43         MOV.W   #0xffff, R13
   \   000076   3C43         MOV.W   #0xffff, R12
   \   000078   ........     CALLA   #LockMotors
   \   00007C   0C93         CMP.W   #0x0, R12
   \   00007E   1424         JEQ     ??Straight_7
   \   000080   9253....     ADD.W   #0x1, &stateCounter
   \   000084   1001         RETA
     65              }
     66          
     67              else if (stateCounter == 3) {
   \                     ??Straight_6:
   \   000086   B2900300.... CMP.W   #0x3, &stateCounter
   \   00008C   0D20         JNE     ??Straight_7
     68                  ShutoffMotors();
   \   00008E   ........     CALLA   #ShutoffMotors
     69                  stateCounter = 0 ;
   \   000092   8243....     MOV.W   #0x0, &stateCounter
     70                  state = START;
   \   000096   F2405300.... MOV.B   #0x53, &state
     71                  stopwatch_seconds = 0;
   \   00009C   8243....     MOV.W   #0x0, &stopwatch_seconds
     72                  cycle_count = 0;
   \   0000A0   8243....     MOV.W   #0x0, &cycle_count
     73                  EmitterOff();
   \   0000A4   ........     CALLA   #EmitterOff
     74                  //strcpy(display_line[1], "BLACK LINE");
     75                  //strcpy(display_line[2], " DETECTED ");
     76                  //display_changed = 1;
     77              }
     78          }
   \                     ??Straight_7:
   \   0000A8   1001         RETA
     79          

   \                                 In  segment CODE, align 2
     80          void Turn() {
   \                     Turn:
     81              if (stateCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &stateCounter
   \   000004   1820         JNE     ??Turn_1
     82                  EmitterOn();
   \   000006   ........     CALLA   #EmitterOn
     83                  strcpy(display_line[0], "  TURNING ");
   \   00000A   3D40....     MOV.W   #`?<Constant "  TURNING ">`, R13
   \   00000E   3C40....     MOV.W   #display_line, R12
   \   000012   ........     CALLA   #strcpy
     84                  strcpy(display_line[1], "          ");
   \   000016   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00001A   3C40....     MOV.W   #display_line + 11, R12
   \   00001E   ........     CALLA   #strcpy
     85                  strcpy(display_line[2], "          ");
   \   000022   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000026   3C40....     MOV.W   #display_line + 22, R12
   \   00002A   ........     CALLA   #strcpy
     86                  display_changed = 1;
   \   00002E   D243....     MOV.B   #0x1, &display_changed
     87                  stateCounter = 1;
   \   000032   9243....     MOV.W   #0x1, &stateCounter
     88              }
     89          
     90              if(stateCounter == 1) {
   \                     ??Turn_1:
   \   000036   9293....     CMP.W   #0x1, &stateCounter
   \   00003A   2120         JNE     ??Turn_0
     91                  if(enteringDirection == MOVING_LEFT) {
   \   00003C   F2904C00.... CMP.B   #0x4c, &enteringDirection
   \   000042   0D20         JNE     ??Turn_2
     92                      if(Drive_Path(STRAIGHT_RIGHT / 2, -STRAIGHT_LEFT / 2, 20)) stateCounter++;
   \   000044   3E401400     MOV.W   #0x14, R14
   \   000048   3D40C0E0     MOV.W   #0xe0c0, R13
   \   00004C   3C401027     MOV.W   #0x2710, R12
   \   000050   ........     CALLA   #Drive_Path
   \   000054   0C93         CMP.W   #0x0, R12
   \   000056   1324         JEQ     ??Turn_0
   \   000058   9253....     ADD.W   #0x1, &stateCounter
   \   00005C   103C         JMP     ??Turn_0
     93                  } else if(enteringDirection == MOVING_RIGHT) {
   \                     ??Turn_2:
   \   00005E   F2905200.... CMP.B   #0x52, &enteringDirection
   \   000064   0C20         JNE     ??Turn_0
     94                      if(Drive_Path(-STRAIGHT_RIGHT / 2, STRAIGHT_LEFT / 2, 20)) stateCounter++;
   \   000066   3E401400     MOV.W   #0x14, R14
   \   00006A   3D40401F     MOV.W   #0x1f40, R13
   \   00006E   3C40F0D8     MOV.W   #0xd8f0, R12
   \   000072   ........     CALLA   #Drive_Path
   \   000076   0C93         CMP.W   #0x0, R12
   \   000078   0224         JEQ     ??Turn_0
   \   00007A   9253....     ADD.W   #0x1, &stateCounter
     95                  }
     96              }
     97          
     98              if (stateCounter == 2) {
   \                     ??Turn_0:
   \   00007E   A293....     CMP.W   #0x2, &stateCounter
   \   000082   3220         JNE     ??Turn_3
     99                  if (((ADC_Left_Detect <= LEFT_GRAY_DETECT || ADC_Right_Detect <= RIGHT_GRAY_DETECT))) {
   \   000084   1F42....     MOV.W   &LBDetect, R15
   \   000088   0C4F         MOV.W   R15, R12
   \   00008A                RPT     #0x2
   \   00008A   41180C5F     ADDX.W  R15, R12
   \   00008E   3E400A00     MOV.W   #0xa, R14
   \   000092   ........     CALLA   #?DivMod16u
   \   000096   1C92....     CMP.W   &ADC_Left_Detect, R12
   \   00009A   0C2C         JC      ??Turn_4
   \   00009C   1F42....     MOV.W   &RBDetect, R15
   \   0000A0   0C4F         MOV.W   R15, R12
   \   0000A2                RPT     #0x2
   \   0000A2   41180C5F     ADDX.W  R15, R12
   \   0000A6   3E400A00     MOV.W   #0xa, R14
   \   0000AA   ........     CALLA   #?DivMod16u
   \   0000AE   1C92....     CMP.W   &ADC_Right_Detect, R12
   \   0000B2   1728         JNC     ??Turn_5
    100                      if(enteringDirection == MOVING_LEFT)Drive_Path(STRAIGHT_RIGHT >> 2, -STRAIGHT_LEFT >> 2, 0);
   \                     ??Turn_4:
   \   0000B4   F2904C00.... CMP.B   #0x4c, &enteringDirection
   \   0000BA   0720         JNE     ??Turn_6
   \   0000BC   0E43         MOV.W   #0x0, R14
   \   0000BE   3D4060F0     MOV.W   #0xf060, R13
   \   0000C2   3C408813     MOV.W   #0x1388, R12
   \   0000C6   ........     CALLA   #Drive_Path
    101          
    102                      if(enteringDirection == MOVING_RIGHT)Drive_Path(-STRAIGHT_RIGHT >> 2, STRAIGHT_LEFT >> 2, 0);
   \                     ??Turn_6:
   \   0000CA   F2905200.... CMP.B   #0x52, &enteringDirection
   \   0000D0   1C20         JNE     ??Turn_7
   \   0000D2   0E43         MOV.W   #0x0, R14
   \   0000D4   3D40A00F     MOV.W   #0xfa0, R13
   \   0000D8   3C4078EC     MOV.W   #0xec78, R12
   \   0000DC   ........     CALLA   #Drive_Path
   \   0000E0   1001         RETA
    103                  } else stateCounter++;
   \                     ??Turn_5:
   \   0000E2   9253....     ADD.W   #0x1, &stateCounter
   \   0000E6   1001         RETA
    104              } else if (stateCounter == 3) {
   \                     ??Turn_3:
   \   0000E8   B2900300.... CMP.W   #0x3, &stateCounter
   \   0000EE   0D20         JNE     ??Turn_7
    105                  ShutoffMotors();
   \   0000F0   ........     CALLA   #ShutoffMotors
    106                  stateCounter = 0 ;
   \   0000F4   8243....     MOV.W   #0x0, &stateCounter
    107                  state = START;
   \   0000F8   F2405300.... MOV.B   #0x53, &state
    108                  stopwatch_seconds = 0;
   \   0000FE   8243....     MOV.W   #0x0, &stopwatch_seconds
    109                  cycle_count = 0;
   \   000102   8243....     MOV.W   #0x0, &cycle_count
    110                  EmitterOff();
   \   000106   ........     CALLA   #EmitterOff
    111              }
    112          }
   \                     ??Turn_7:
   \   00010A   1001         RETA
    113          

   \                                 In  segment CODE, align 2
    114          void LineFollow() {
   \                     LineFollow:
   \   000000   5B15         PUSHM.W #0x6, R11
    115              if (stateCounter == 0) {
   \   000002   8293....     CMP.W   #0x0, &stateCounter
   \   000006   1620         JNE     ??LineFollow_7
    116                  EmitterOn();
   \   000008   ........     CALLA   #EmitterOn
    117                  strcpy(display_line[0], " CIRCLING ");
   \   00000C   3D40....     MOV.W   #`?<Constant " CIRCLING ">`, R13
   \   000010   3C40....     MOV.W   #display_line, R12
   \   000014   ........     CALLA   #strcpy
    118                  display_changed = 1;
   \   000018   D243....     MOV.B   #0x1, &display_changed
    119                  stopwatch_seconds = 0;
   \   00001C   8243....     MOV.W   #0x0, &stopwatch_seconds
    120                  cycle_count = 0;
   \   000020   8243....     MOV.W   #0x0, &cycle_count
    121          
    122                  if(rightSwitchable && leftSwitchable)stateCounter++;
   \   000024   8293....     CMP.W   #0x0, &rightSwitchable
   \   000028   0524         JEQ     ??LineFollow_7
   \   00002A   8293....     CMP.W   #0x0, &leftSwitchable
   \   00002E   0224         JEQ     ??LineFollow_7
   \   000030   9253....     ADD.W   #0x1, &stateCounter
    123              }
    124          
    125              int rFollowSpeed, rAdjustSpeed;
                                       ^
Warning[Pe177]: variable "rAdjustSpeed" was declared but never referenced
    126              int lFollowSpeed, lAdjustSpeed;
                                       ^
Warning[Pe177]: variable "lAdjustSpeed" was declared but never referenced
    127          
    128              int leftPIDOut = GetOutput(&leftFollowController, LEFT_WHITE_DETECT, ADC_Left_Detect);
   \                     ??LineFollow_7:
   \   000034   1E42....     MOV.W   &ADC_Left_Detect, R14
   \   000038   1D42....     MOV.W   &LWDetect, R13
   \   00003C   3D501400     ADD.W   #0x14, R13
   \   000040   3C40....     MOV.W   #leftFollowController, R12
   \   000044   ........     CALLA   #GetOutput
   \   000048   084C         MOV.W   R12, R8
    129              int rightPIDOut = GetOutput(&rightFollowController, RIGHT_WHITE_DETECT, ADC_Right_Detect);
   \   00004A   1E42....     MOV.W   &ADC_Right_Detect, R14
   \   00004E   1D42....     MOV.W   &RWDetect, R13
   \   000052   3D501400     ADD.W   #0x14, R13
   \   000056   3C40....     MOV.W   #rightFollowController, R12
   \   00005A   ........     CALLA   #GetOutput
   \   00005E   094C         MOV.W   R12, R9
    130              rFollowSpeed = additionSafe(RIGHT_FORWARD_SPEED, RIGHT_MAX, RIGHT_MIN >> 1, leftPIDOut); // swapped b/c they are physically swapped
   \   000060   0F48         MOV.W   R8, R15
   \   000062   3E409A10     MOV.W   #0x109a, R14
   \   000066   3D401027     MOV.W   #0x2710, R13
   \   00006A   1C425404     MOV.W   &0x454, R12
   \   00006E   ........     CALLA   #additionSafe
   \   000072   0A4C         MOV.W   R12, R10
    131              lFollowSpeed = additionSafe(LEFT_FORWARD_SPEED, LEFT_MAX, LEFT_MIN >> 1, rightPIDOut); // swapped b/c they are physically swapped
   \   000074   0F49         MOV.W   R9, R15
   \   000076   3E409A10     MOV.W   #0x109a, R14
   \   00007A   3D401027     MOV.W   #0x2710, R13
   \   00007E   1C425604     MOV.W   &0x456, R12
   \   000082   ........     CALLA   #additionSafe
   \   000086   0B4C         MOV.W   R12, R11
    132          
    133              //leftPIDOut = GetOutput(&leftAdjustController,LEFT_GRAY_DETECT,ADC_Left_Detect);
    134              //rightPIDOut = GetOutput(&rightAdjustController,RIGHT_GRAY_DETECT,ADC_Right_Detect);
    135              //rAdjustSpeed = additionSafe(RIGHT_FORWARD_SPEED,RIGHT_MAX,RIGHT_MIN>>1,leftPIDOut); // swapped b/c they are physically swapped
    136              //lAdjustSpeed = additionSafe(LEFT_FORWARD_SPEED,LEFT_MAX,LEFT_MIN>>1,rightPIDOut); // swapped b/c they are physically swapped*
    137          
    138              if(stateCounter == 1 && rFollowSpeed != lFollowSpeed) P6OUT |= GRN_LED;
   \   000088   9293....     CMP.W   #0x1, &stateCounter
   \   00008C   0620         JNE     ??LineFollow_8
   \   00008E   0A9B         CMP.W   R11, R10
   \   000090   0424         JEQ     ??LineFollow_8
   \   000092   F2D040004302 BIS.B   #0x40, &0x243
   \   000098   033C         JMP     ??LineFollow_0
    139              else P6OUT &= ~GRN_LED;
   \                     ??LineFollow_8:
   \   00009A   F2C040004302 BIC.B   #0x40, &0x243
    140          
    141              if(stateCounter == 1) {
   \                     ??LineFollow_0:
   \   0000A0   9293....     CMP.W   #0x1, &stateCounter
   \   0000A4   5820         JNE     ??LineFollow_9
    142                  if(ADC_Left_Detect < (LEFT_GRAY_DETECT) ^ ADC_Right_Detect < (RIGHT_GRAY_DETECT)) stateCounter = 2;
                         ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is undefined
          in this statement
   \   0000A6   1F42....     MOV.W   &LBDetect, R15
   \   0000AA   0C4F         MOV.W   R15, R12
   \   0000AC                RPT     #0x2
   \   0000AC   41180C5F     ADDX.W  R15, R12
   \   0000B0   3E400A00     MOV.W   #0xa, R14
   \   0000B4   ........     CALLA   #?DivMod16u
   \   0000B8   829C....     CMP.W   R12, &ADC_Left_Detect
   \   0000BC   022C         JC      ??LineFollow_10
   \   0000BE   5643         MOV.B   #0x1, R6
   \   0000C0   013C         JMP     ??LineFollow_1
   \                     ??LineFollow_10:
   \   0000C2   4643         MOV.B   #0x0, R6
   \                     ??LineFollow_1:
   \   0000C4   1F42....     MOV.W   &RBDetect, R15
   \   0000C8   0C4F         MOV.W   R15, R12
   \   0000CA                RPT     #0x2
   \   0000CA   41180C5F     ADDX.W  R15, R12
   \   0000CE   3E400A00     MOV.W   #0xa, R14
   \   0000D2   ........     CALLA   #?DivMod16u
   \   0000D6   829C....     CMP.W   R12, &ADC_Right_Detect
   \   0000DA   022C         JC      ??LineFollow_11
   \   0000DC   5E43         MOV.B   #0x1, R14
   \   0000DE   013C         JMP     ??LineFollow_2
   \                     ??LineFollow_11:
   \   0000E0   4E43         MOV.B   #0x0, R14
   \                     ??LineFollow_2:
   \   0000E2   46EE         XOR.B   R14, R6
   \   0000E4   4693         CMP.B   #0x0, R6
   \   0000E6   0324         JEQ     ??LineFollow_12
   \   0000E8   A243....     MOV.W   #0x2, &stateCounter
   \   0000EC   253C         JMP     ??LineFollow_3
    143                  else if (ADC_Left_Detect < (LEFT_GRAY_DETECT) && ADC_Right_Detect < (RIGHT_GRAY_DETECT)) {
   \                     ??LineFollow_12:
   \   0000EE   1F42....     MOV.W   &LBDetect, R15
   \   0000F2   0C4F         MOV.W   R15, R12
   \   0000F4                RPT     #0x2
   \   0000F4   41180C5F     ADDX.W  R15, R12
   \   0000F8   3E400A00     MOV.W   #0xa, R14
   \   0000FC   ........     CALLA   #?DivMod16u
   \   000100   829C....     CMP.W   R12, &ADC_Left_Detect
   \   000104   112C         JC      ??LineFollow_13
   \   000106   1F42....     MOV.W   &RBDetect, R15
   \   00010A   0C4F         MOV.W   R15, R12
   \   00010C                RPT     #0x2
   \   00010C   41180C5F     ADDX.W  R15, R12
   \   000110   3E400A00     MOV.W   #0xa, R14
   \   000114   ........     CALLA   #?DivMod16u
   \   000118   829C....     CMP.W   R12, &ADC_Right_Detect
   \   00011C   052C         JC      ??LineFollow_13
    144                      rFollowSpeed = -RIGHT_MIN;
   \   00011E   3A40CCDE     MOV.W   #0xdecc, R10
    145                      lFollowSpeed = -LEFT_MIN;
   \   000122   3B40CCDE     MOV.W   #0xdecc, R11
   \   000126   083C         JMP     ??LineFollow_3
    146                  } else {
    147                      ClearController(&rightFollowController);
   \                     ??LineFollow_13:
   \   000128   3C40....     MOV.W   #rightFollowController, R12
   \   00012C   ........     CALLA   #ClearController
    148                      ClearController(&leftFollowController);
   \   000130   3C40....     MOV.W   #leftFollowController, R12
   \   000134   ........     CALLA   #ClearController
    149                  }
    150          
    151                  //if(ADC_Left_Detect>(LEFT_BLACK_DETECT+50) && ADC_Right_Detect>(RIGHT_BLACK_DETECT+50)){
    152                  //  rFollowSpeed = RIGHT_MIN;
    153                  //  lFollowSpeed = LEFT_MIN;
    154                  //}
    155                  if(delay(70, 0)) stateCounter = 5;
   \                     ??LineFollow_3:
   \   000138   0D43         MOV.W   #0x0, R13
   \   00013A   3C404600     MOV.W   #0x46, R12
   \   00013E   ........     CALLA   #delay
   \   000142   0C93         CMP.W   #0x0, R12
   \   000144   0324         JEQ     ??LineFollow_14
   \   000146   B2400500.... MOV.W   #0x5, &stateCounter
    156          
    157                  Drive_Path(rFollowSpeed, lFollowSpeed, 0);
   \                     ??LineFollow_14:
   \   00014C   0E43         MOV.W   #0x0, R14
   \   00014E   0D4B         MOV.W   R11, R13
   \   000150   0C4A         MOV.W   R10, R12
   \   000152   ........     CALLA   #Drive_Path
    158              }
    159          
    160              if(stateCounter == 10)
   \                     ??LineFollow_9:
   \   000156   B2900A00.... CMP.W   #0xa, &stateCounter
   \   00015C   0920         JNE     ??LineFollow_15
    161                  if(LockMotorsTime(-1, -1, 1)) stateCounter = 2;
   \   00015E   1E43         MOV.W   #0x1, R14
   \   000160   3D43         MOV.W   #0xffff, R13
   \   000162   3C43         MOV.W   #0xffff, R12
   \   000164   ........     CALLA   #LockMotorsTime
   \   000168   0C93         CMP.W   #0x0, R12
   \   00016A   0224         JEQ     ??LineFollow_15
   \   00016C   A243....     MOV.W   #0x2, &stateCounter
    162          
    163              if(stateCounter == 2) {
   \                     ??LineFollow_15:
   \   000170   A293....     CMP.W   #0x2, &stateCounter
   \   000174   2120         JNE     ??LineFollow_4
    164                  if(ADC_Left_Detect < LEFT_BLACK_DETECT && ADC_Right_Detect >= RIGHT_BLACK_DETECT) //
   \   000176   1F42....     MOV.W   &LBDetect, R15
   \   00017A   5F03         RRUM.W  #0x1, R15
   \   00017C   829F....     CMP.W   R15, &ADC_Left_Detect
   \   000180   0A2C         JC      ??LineFollow_16
   \   000182   1F42....     MOV.W   &RBDetect, R15
   \   000186   5F03         RRUM.W  #0x1, R15
   \   000188   829F....     CMP.W   R15, &ADC_Right_Detect
   \   00018C   0428         JNC     ??LineFollow_16
    165                      stateCounter = 3;
   \   00018E   B2400300.... MOV.W   #0x3, &stateCounter
   \   000194   113C         JMP     ??LineFollow_4
    166                  else if(ADC_Left_Detect >= LEFT_BLACK_DETECT && ADC_Right_Detect < RIGHT_BLACK_DETECT) // LCIRC
   \                     ??LineFollow_16:
   \   000196   1F42....     MOV.W   &LBDetect, R15
   \   00019A   5F03         RRUM.W  #0x1, R15
   \   00019C   829F....     CMP.W   R15, &ADC_Left_Detect
   \   0001A0   0928         JNC     ??LineFollow_17
   \   0001A2   1F42....     MOV.W   &RBDetect, R15
   \   0001A6   5F03         RRUM.W  #0x1, R15
   \   0001A8   829F....     CMP.W   R15, &ADC_Right_Detect
   \   0001AC   032C         JC      ??LineFollow_17
    167                      stateCounter = 4;
   \   0001AE   A242....     MOV.W   #0x4, &stateCounter
   \   0001B2   023C         JMP     ??LineFollow_4
    168                  else stateCounter = 1;
   \                     ??LineFollow_17:
   \   0001B4   9243....     MOV.W   #0x1, &stateCounter
    169              }
    170          
    171              if(stateCounter == 3) { // turn left ()
   \                     ??LineFollow_4:
   \   0001B8   B2900300.... CMP.W   #0x3, &stateCounter
   \   0001BE   2120         JNE     ??LineFollow_5
    172                  if(ADC_Left_Detect < LEFT_BLACK_DETECT)Drive_Path((RIGHT_MIN - 2000), -(LEFT_MIN - 2000), 0);
   \   0001C0   1F42....     MOV.W   &LBDetect, R15
   \   0001C4   5F03         RRUM.W  #0x1, R15
   \   0001C6   829F....     CMP.W   R15, &ADC_Left_Detect
   \   0001CA   082C         JC      ??LineFollow_18
   \   0001CC   0E43         MOV.W   #0x0, R14
   \   0001CE   3D409CE6     MOV.W   #0xe69c, R13
   \   0001D2   3C406419     MOV.W   #0x1964, R12
   \   0001D6   ........     CALLA   #Drive_Path
   \   0001DA   133C         JMP     ??LineFollow_5
    173                  else if (ADC_Left_Detect >= LEFT_WHITE_DETECT && ADC_Right_Detect >= RIGHT_WHITE_DETECT) stateCounter = 1;
   \                     ??LineFollow_18:
   \   0001DC   1F42....     MOV.W   &LWDetect, R15
   \   0001E0   3F501400     ADD.W   #0x14, R15
   \   0001E4   829F....     CMP.W   R15, &ADC_Left_Detect
   \   0001E8   0A28         JNC     ??LineFollow_19
   \   0001EA   1F42....     MOV.W   &RWDetect, R15
   \   0001EE   3F501400     ADD.W   #0x14, R15
   \   0001F2   829F....     CMP.W   R15, &ADC_Right_Detect
   \   0001F6   0328         JNC     ??LineFollow_19
   \   0001F8   9243....     MOV.W   #0x1, &stateCounter
   \   0001FC   023C         JMP     ??LineFollow_5
    174                  else stateCounter = 4;
   \                     ??LineFollow_19:
   \   0001FE   A242....     MOV.W   #0x4, &stateCounter
    175              }
    176          
    177              if(stateCounter == 4) {
   \                     ??LineFollow_5:
   \   000202   A292....     CMP.W   #0x4, &stateCounter
   \   000206   2320         JNE     ??LineFollow_20
    178                  if(ADC_Right_Detect < RIGHT_BLACK_DETECT)Drive_Path(-(RIGHT_MIN - 2000), (LEFT_MIN - 2000), 0);
   \   000208   1F42....     MOV.W   &RBDetect, R15
   \   00020C   5F03         RRUM.W  #0x1, R15
   \   00020E   829F....     CMP.W   R15, &ADC_Right_Detect
   \   000212   082C         JC      ??LineFollow_21
   \   000214   0E43         MOV.W   #0x0, R14
   \   000216   3D406419     MOV.W   #0x1964, R13
   \   00021A   3C409CE6     MOV.W   #0xe69c, R12
   \   00021E   ........     CALLA   #Drive_Path
   \   000222   263C         JMP     ??LineFollow_6
    179                  else if (ADC_Left_Detect >= LEFT_WHITE_DETECT && ADC_Right_Detect >= RIGHT_WHITE_DETECT) stateCounter = 1;
   \                     ??LineFollow_21:
   \   000224   1F42....     MOV.W   &LWDetect, R15
   \   000228   3F501400     ADD.W   #0x14, R15
   \   00022C   829F....     CMP.W   R15, &ADC_Left_Detect
   \   000230   0A28         JNC     ??LineFollow_22
   \   000232   1F42....     MOV.W   &RWDetect, R15
   \   000236   3F501400     ADD.W   #0x14, R15
   \   00023A   829F....     CMP.W   R15, &ADC_Right_Detect
   \   00023E   0328         JNC     ??LineFollow_22
   \   000240   9243....     MOV.W   #0x1, &stateCounter
   \   000244   153C         JMP     ??LineFollow_6
    180                  else stateCounter = 3;
   \                     ??LineFollow_22:
   \   000246   B2400300.... MOV.W   #0x3, &stateCounter
   \   00024C   113C         JMP     ??LineFollow_6
    181              }
    182          
    183              else if (stateCounter == 5) {
   \                     ??LineFollow_20:
   \   00024E   B2900500.... CMP.W   #0x5, &stateCounter
   \   000254   0D20         JNE     ??LineFollow_6
    184                  ShutoffMotors();
   \   000256   ........     CALLA   #ShutoffMotors
    185                  stateCounter = 0 ;
   \   00025A   8243....     MOV.W   #0x0, &stateCounter
    186                  state = START;
   \   00025E   F2405300.... MOV.B   #0x53, &state
    187                  stopwatch_seconds = 0;
   \   000264   8243....     MOV.W   #0x0, &stopwatch_seconds
    188                  cycle_count = 0;
   \   000268   8243....     MOV.W   #0x0, &cycle_count
    189                  EmitterOff();
   \   00026C   ........     CALLA   #EmitterOff
    190              }
    191          }
   \                     ??LineFollow_6:
   \   000270   5617         POPM.W  #0x6, R11
   \   000272   1001         RETA
   \   000274                REQUIRE _A_TB3CCR1_L
   \   000274                REQUIRE _A_TB3CCR2_L
   \   000274                REQUIRE _A_PCOUT_L
    192          

   \                                 In  segment CODE, align 2
    193          void Drive(int polR,int polL,unsigned int time) {
   \                     Drive:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   084E         MOV.W   R14, R8
    194          
    195              if (stateCounter == 0) {
   \   000008   8293....     CMP.W   #0x0, &stateCounter
   \   00000C   0620         JNE     ??Drive_1
    196                  display_changed = 1;
   \   00000E   D243....     MOV.B   #0x1, &display_changed
    197                  EmitterOn();
   \   000012   ........     CALLA   #EmitterOn
    198                  stateCounter++;
   \   000016   9253....     ADD.W   #0x1, &stateCounter
    199              }
    200          
    201              if(stateCounter == 1) {
   \                     ??Drive_1:
   \   00001A   9293....     CMP.W   #0x1, &stateCounter
   \   00001E   2120         JNE     ??Drive_2
    202                if(Drive_Path(polR*STRAIGHT_RIGHT,polL*STRAIGHT_LEFT, time))stateCounter++;
   \   000020   0E48         MOV.W   R8, R14
   \   000022   0D4B         MOV.W   R11, R13
   \   000024   5D0E         RLAM.W  #0x4, R13
   \   000026   5D0A         RLAM.W  #0x3, R13
   \   000028   0F4D         MOV.W   R13, R15
   \   00002A   5D06         RLAM.W  #0x2, R13
   \   00002C   0F5D         ADD.W   R13, R15
   \   00002E   0D5D         RLA.W   R13
   \   000030   0F5D         ADD.W   R13, R15
   \   000032   0D5D         RLA.W   R13
   \   000034   0F5D         ADD.W   R13, R15
   \   000036   0D5D         RLA.W   R13
   \   000038   0F5D         ADD.W   R13, R15
   \   00003A   0D5D         RLA.W   R13
   \   00003C   0D5F         ADD.W   R15, R13
   \   00003E   0C4A         MOV.W   R10, R12
   \   000040   5C0E         RLAM.W  #0x4, R12
   \   000042   5C02         RLAM.W  #0x1, R12
   \   000044   0F4C         MOV.W   R12, R15
   \   000046   5C0E         RLAM.W  #0x4, R12
   \   000048   0F5C         ADD.W   R12, R15
   \   00004A   0C5C         RLA.W   R12
   \   00004C   0F5C         ADD.W   R12, R15
   \   00004E   0C5C         RLA.W   R12
   \   000050   0F5C         ADD.W   R12, R15
   \   000052   5C0A         RLAM.W  #0x3, R12
   \   000054   0C5F         ADD.W   R15, R12
   \   000056   ........     CALLA   #Drive_Path
   \   00005A   0C93         CMP.W   #0x0, R12
   \   00005C   0224         JEQ     ??Drive_2
   \   00005E   9253....     ADD.W   #0x1, &stateCounter
    203              }
    204          
    205              if(stateCounter == 2) {
   \                     ??Drive_2:
   \   000062   A293....     CMP.W   #0x2, &stateCounter
   \   000066   0D20         JNE     ??Drive_3
    206                  if(LockMotors(-polR, -polL)) stateCounter++;
   \   000068   0D4B         MOV.W   R11, R13
   \   00006A   3DE3         XOR.W   #0xffff, R13
   \   00006C   1D53         ADD.W   #0x1, R13
   \   00006E   0C4A         MOV.W   R10, R12
   \   000070   3CE3         XOR.W   #0xffff, R12
   \   000072   1C53         ADD.W   #0x1, R12
   \   000074   ........     CALLA   #LockMotors
   \   000078   0C93         CMP.W   #0x0, R12
   \   00007A   1A24         JEQ     ??Drive_0
   \   00007C   9253....     ADD.W   #0x1, &stateCounter
   \   000080   173C         JMP     ??Drive_0
    207              }
    208          
    209              else if (stateCounter == 3) {
   \                     ??Drive_3:
   \   000082   B2900300.... CMP.W   #0x3, &stateCounter
   \   000088   1320         JNE     ??Drive_0
    210                  ShutoffMotors();
   \   00008A   ........     CALLA   #ShutoffMotors
    211                  stateCounter = 0 ;
   \   00008E   8243....     MOV.W   #0x0, &stateCounter
    212                  state = START;
   \   000092   F2405300.... MOV.B   #0x53, &state
    213                  stopwatch_seconds = 0;
   \   000098   8243....     MOV.W   #0x0, &stopwatch_seconds
    214                  cycle_count = 0;
   \   00009C   8243....     MOV.W   #0x0, &cycle_count
    215                  strcpy(display_line[1], "          ");
   \   0000A0   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   0000A4   3C40....     MOV.W   #display_line + 11, R12
   \   0000A8   ........     CALLA   #strcpy
    216                  EmitterOff();
   \   0000AC   ........     CALLA   #EmitterOff
    217              }
    218          }
   \                     ??Drive_0:
   \   0000B0   3817         POPM.W  #0x4, R11
   \   0000B2   1001         RETA
    219          
    220          
    221          
    222          // delays for a specified time and then switches state to global nextState
    223          // make sure nextState is set to desired vlaue before the end of delay

   \                                 In  segment CODE, align 2
    224          int delay(int seconds, int cycles) {
   \                     delay:
   \   000000   0F4C         MOV.W   R12, R15
    225              if(stopwatch_seconds == 0 && cycle_count <= 1) {
   \   000002   8293....     CMP.W   #0x0, &stopwatch_seconds
   \   000006   0520         JNE     ??delay_0
   \   000008   A293....     CMP.W   #0x2, &cycle_count
   \   00000C   022C         JC      ??delay_0
    226                  display_changed = 1;
   \   00000E   D243....     MOV.B   #0x1, &display_changed
    227              }
    228          
    229              if(stopwatch_seconds >= seconds && cycle_count >= cycles) {
   \                     ??delay_0:
   \   000012   829F....     CMP.W   R15, &stopwatch_seconds
   \   000016   0928         JNC     ??delay_1
   \   000018   829D....     CMP.W   R13, &cycle_count
   \   00001C   0628         JNC     ??delay_1
    230                  stopwatch_seconds = 0;
   \   00001E   8243....     MOV.W   #0x0, &stopwatch_seconds
    231                  cycle_count = 0;
   \   000022   8243....     MOV.W   #0x0, &cycle_count
    232                  return 1;
   \   000026   1C43         MOV.W   #0x1, R12
   \   000028   1001         RETA
    233              } else return 0;
   \                     ??delay_1:
   \   00002A   0C43         MOV.W   #0x0, R12
   \   00002C   1001         RETA
    234          }
    235          
    236          
    237          

   \                                 In  segment CODE, align 2
    238          void StateMachine(void) {
   \                     StateMachine:
    239              switch(state) {
   \   000000   F2904400.... CMP.B   #0x44, &state
   \   000006   0820         JNE     ??StateMachine_0
    240                  /*case (CALIBRATE):
    241                      calibrate();
    242          
    243                      if(calibrationMode >= 2) {
    244                          state = START;
    245                      }
    246          
    247                      break;
    248          
    249                  case (START):
    250                      //strcpy(display_line[0], "WAITING...");
    251                      //display_changed = 1;
    252                      stopwatch_seconds = 0;
    253                      cycle_count = 0;
    254                      break;
    255          
    256                  case (WAIT):
    257                      strcpy(display_line[0], "WAITING...");
    258          
    259                      if (delay(delayTime, 0)) state = nextState;
    260          
    261                      break;
    262          
    263                  case (STRAIGHT):
    264                      Straight();
    265                      break;
    266          
    267                  case (TURN):
    268                      //Turn();
    269                      break;
    270          
    271                  case (LINEFOLLOW):
    272                      //LineFollow();
    273                      break;*/
    274                      
    275                  case (DRIVE):
    276                      Drive(polarityRight,polarityLeft,driveTime);
   \   000008   1E42....     MOV.W   &driveTime, R14
   \   00000C   1D42....     MOV.W   &polarityLeft, R13
   \   000010   1C42....     MOV.W   &polarityRight, R12
   \   000014   ........     CALLA   #Drive
    277          
    278                  default:
    279                      break;
    280              }
    281          }
   \                     ??StateMachine_0:
   \   000018   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for state>`:
   \   000000   53           DC8 83

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for nextState>`:
   \   000000   73           DC8 115

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for delayTime>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for enteringDirection>`:
   \   000000   4E           DC8 78

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "INTERCEPT ">`:
   \   000000   494E54455243 DC8 "INTERCEPT "
   \            4550542000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  TURNING ">`:
   \   000000   20205455524E DC8 "  TURNING "
   \            494E472000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " CIRCLING ">`:
   \   000000   20434952434C DC8 " CIRCLING "
   \            494E472000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Drive
       12   -> Drive_Path
       12   -> EmitterOff
       12   -> EmitterOn
       12   -> LockMotors
       12   -> ShutoffMotors
       12   -> strcpy
     16   LineFollow
       16   -> ClearController
       16   -> Drive_Path
       16   -> EmitterOff
       16   -> EmitterOn
       16   -> GetOutput
       16   -> LockMotorsTime
       16   -> ShutoffMotors
       16   -> additionSafe
       16   -> delay
       16   -> strcpy
       16 ?DivMod16u
      4   StateMachine
        4   -> Drive
      4   Straight
        4   -> Drive_Path
        4   -> EmitterOff
        4   -> EmitterOn
        4   -> LockMotors
        4   -> ShutoffMotors
        4   -> strcpy
      4   Turn
        4   -> Drive_Path
        4   -> EmitterOff
        4   -> EmitterOn
        4   -> ShutoffMotors
        4   -> strcpy
        4 ?DivMod16u
      4   delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "  TURNING ">
      11  ?<Constant " CIRCLING ">
      11  ?<Constant "INTERCEPT ">
       2  ?<Initializer for delayTime>
       1  ?<Initializer for enteringDirection>
       1  ?<Initializer for nextState>
       1  ?<Initializer for state>
     180  Drive
     628  LineFollow
      26  StateMachine
     170  Straight
     268  Turn
       2  _A_PCOUT_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
      46  delay
       2  delayTime
       2  driveTime
       1  enteringDirection
       1  nextState
       2  polarityLeft
       2  polarityRight
       1  state
       2  stateCounter

 
 1 318 bytes in segment CODE
     6 bytes in segment DATA16_AN
    44 bytes in segment DATA16_C
     5 bytes in segment DATA16_I
     5 bytes in segment DATA16_ID
     8 bytes in segment DATA16_Z
 
 1 318 bytes of CODE  memory
    49 bytes of CONST memory
    13 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: 3
