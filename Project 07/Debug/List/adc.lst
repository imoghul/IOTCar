###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          05/Mar/2022  08:20:04
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 07\adc.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWFFEC.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 07\adc.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 07\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 07\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 07\Debug\List\adc.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 07\Debug\Obj\adc.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 07\adc.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADCCTL0_L
   \                     _A_ADCCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x702
   \   union <unnamed> _A_ADCCTL1_L
   \                     _A_ADCCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x704
   \   union <unnamed> _A_ADCCTL2_L
   \                     _A_ADCCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADCMCTL0_L
   \                     _A_ADCMCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x712
   \   union <unnamed> _A_ADCMEM0_L
   \                     _A_ADCMEM0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71a
   \   union <unnamed> _A_ADCIE_L
   \                     _A_ADCIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71e
   \   union <unnamed> _A_ADCIV_L
   \                     _A_ADCIV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x240
   \   union <unnamed> _A_PCIN_L
   \                     _A_PCIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x120
   \   union <unnamed> _A_PMMCTL0_L
   \                     _A_PMMCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x124
   \   union <unnamed> _A_PMMCTL2_L
   \                     _A_PMMCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb0
   \   union <unnamed> _A_SAC3OA_L
   \                     _A_SAC3OA_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb2
   \   union <unnamed> _A_SAC3PGA_L
   \                     _A_SAC3PGA_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb4
   \   union <unnamed> _A_SAC3DAC_L
   \                     _A_SAC3DAC_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb6
   \   union <unnamed> _A_SAC3DAT_L
   \                     _A_SAC3DAT_L:
   \   000000                DS8 2
      2          #include "ports.h"
      3          #include "adc.h"
      4          #include "macros.h"
      5          #include "wheels.h"
      6          #include "functions.h"
      7          #include "detectors.h"
      8          #include <string.h>
      9          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          volatile unsigned int ADC_Channel;
   \                     ADC_Channel:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          volatile unsigned int ADC_Left_Detect,ADC_Right_Detect,ADC_Thumb, ADC_Vbat, ADC_Vdac, ADC_V3v3;
   \                     ADC_Left_Detect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Right_Detect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Thumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Vbat:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Vdac:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_V3v3:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          volatile unsigned int DAC_data;
   \                     DAC_data:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          char adc_char[5];
   \                     adc_char:
   \   000000                DS8 5
     14          extern char display_line[4][11];
     15          extern volatile unsigned char display_changed;
     16          extern volatile unsigned int checkAdc;
     17          extern volatile char state;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int adcUpdated;
   \                     adcUpdated:
   \   000000                DS8 2
     19          

   \                                 In  segment CODE, align 2
     20          void Init_ADC(void){
   \                     Init_ADC:
     21          //------------------------------------------------------------------------------
     22          // V_DETECT_L
     23          // V_DETECT_R
     24          // V_THUMB
     25          //------------------------------------------------------------------------------
     26          // ADCCTL0 Register
     27            ADCCTL0 = 0;
   \   000000   82430007     MOV.W   #0x0, &0x700
     28            ADCCTL0 |= ADCSHT_2;
   \   000004   B2D000020007 BIS.W   #0x200, &0x700
     29            ADCCTL0 |= ADCMSC;
   \   00000A   B2D080000007 BIS.W   #0x80, &0x700
     30            ADCCTL0 |= ADCON;
   \   000010   B2D010000007 BIS.W   #0x10, &0x700
     31          // ADCCTL1 Register
     32            ADCCTL1 = 0;
   \   000016   82430207     MOV.W   #0x0, &0x702
     33            ADCCTL1 |= ADCSHS_0; 
   \   00001A   924202070207 MOV.W   &0x702, &0x702
     34            ADCCTL1 |= ADCSHP; 
   \   000020   B2D000020207 BIS.W   #0x200, &0x702
     35            ADCCTL1 &= ~ADCISSH; 
   \   000026   B2C000010207 BIC.W   #0x100, &0x702
     36            ADCCTL1 |= ADCDIV_0; 
   \   00002C   924202070207 MOV.W   &0x702, &0x702
     37            ADCCTL1 |= ADCSSEL_0; 
   \   000032   924202070207 MOV.W   &0x702, &0x702
     38            ADCCTL1 |= ADCCONSEQ_0;
   \   000038   924202070207 MOV.W   &0x702, &0x702
     39          // ADCCTL2 Register
     40            ADCCTL2 = 0;
   \   00003E   82430407     MOV.W   #0x0, &0x704
     41            ADCCTL2 |= ADCPDIV0;
   \   000042   B2D000010407 BIS.W   #0x100, &0x704
     42            ADCCTL2 |= ADCRES_2;
   \   000048   B2D020000407 BIS.W   #0x20, &0x704
     43            ADCCTL2 &= ~ADCDF;
   \   00004E   B2C20407     BIC.W   #0x8, &0x704
     44            ADCCTL2 &= ~ADCSR;
   \   000052   A2C20407     BIC.W   #0x4, &0x704
     45          // ADCMCTL0 Register
     46            ADCMCTL0 |= ADCSREF_0;
   \   000056   92420A070A07 MOV.W   &0x70a, &0x70a
     47            ADCMCTL0 |= ADCINCH_5;
   \   00005C   B2D005000A07 BIS.W   #0x5, &0x70a
     48            
     49            ADCIE |= ADCIE0;
   \   000062   92D31A07     BIS.W   #0x1, &0x71a
     50            ADCCTL0 |= ADCENC;
   \   000066   A2D30007     BIS.W   #0x2, &0x700
     51            ADCCTL0 |= ADCSC;
   \   00006A   92D30007     BIS.W   #0x1, &0x700
     52          }
   \   00006E   1001         RETA
   \   000070                REQUIRE _A_ADCCTL0_L
   \   000070                REQUIRE _A_ADCCTL1_L
   \   000070                REQUIRE _A_ADCCTL2_L
   \   000070                REQUIRE _A_ADCMCTL0_L
   \   000070                REQUIRE _A_ADCIE_L
     53          

   \                                 In  segment CODE, align 2
     54          void Init_REF(void){
   \                     Init_REF:
     55            PMMCTL0_H = PMMPW_H;
   \   000000   F240A5002101 MOV.B   #0xa5, &0x121
     56            PMMCTL2 = INTREFEN;
   \   000006   92432401     MOV.W   #0x1, &0x124
     57            PMMCTL2 |= REFVSEL_2;
   \   00000A   B2D020002401 BIS.W   #0x20, &0x124
     58            while(!(PMMCTL2 & REFGENRDY));
   \                     ??Init_REF_0:
   \   000010   B2B000102401 BIT.W   #0x1000, &0x124
   \   000016   FC2B         JNC     ??Init_REF_0
     59          }
   \   000018   1001         RETA
   \   00001A                REQUIRE _A_PMMCTL0_L
   \   00001A                REQUIRE _A_PMMCTL2_L
     60          

   \                                 In  segment CODE, align 2
     61          void Init_DAC(void){
   \                     Init_DAC:
     62            DAC_data = 1000;
   \   000000   B240E803.... MOV.W   #0x3e8, &DAC_data
     63            SAC3DAT = DAC_data;
   \   000006   9242....B60C MOV.W   &DAC_data, &0xcb6
     64            SAC3DAC = DACSREF_1;
   \   00000C   B2400010B40C MOV.W   #0x1000, &0xcb4
     65            SAC3DAC |= DACLSEL_0;
   \   000012   9242B40CB40C MOV.W   &0xcb4, &0xcb4
     66          //  SAC3DAC |= DACIE;
     67            SAC3DAC |= DACEN;
   \   000018   92D3B40C     BIS.W   #0x1, &0xcb4
     68            SAC3OA = NMUXEN; 
   \   00001C   B2408000B00C MOV.W   #0x80, &0xcb0
     69            SAC3OA |= PMUXEN; 
   \   000022   B2D2B00C     BIS.W   #0x8, &0xcb0
     70            SAC3OA |= PSEL_1; 
   \   000026   92D3B00C     BIS.W   #0x1, &0xcb0
     71            SAC3OA |= NSEL_1; 
   \   00002A   B2D01000B00C BIS.W   #0x10, &0xcb0
     72            SAC3OA |= OAPM; 
   \   000030   B2D00002B00C BIS.W   #0x200, &0xcb0
     73            SAC3PGA = MSEL_1; 
   \   000036   9243B20C     MOV.W   #0x1, &0xcb2
     74            SAC3OA |= SACEN; 
   \   00003A   B2D00004B00C BIS.W   #0x400, &0xcb0
     75            SAC3OA |= OAEN;
   \   000040   B2D00001B00C BIS.W   #0x100, &0xcb0
     76          }
   \   000046   1001         RETA
   \   000048                REQUIRE _A_SAC3DAT_L
   \   000048                REQUIRE _A_SAC3DAC_L
   \   000048                REQUIRE _A_SAC3OA_L
   \   000048                REQUIRE _A_SAC3PGA_L
     77          
     78          #pragma vector=ADC_VECTOR 

   \                                 In  segment ISR_CODE, align 2
     79          __interrupt void ADC_ISR(void){
   \                     ADC_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
     80            if(ADC_Channel==0 && P6IN&IR_LED/* && (state == STRAIGHT || state==TURN || state==LINEFOLLOW)*/){
   \   000002   8293....     CMP.W   #0x0, &ADC_Channel
   \   000006   1320         JNE     ??ADC_ISR_2
   \   000008   F2B010004102 BIT.B   #0x10, &0x241
   \   00000E   0F28         JNC     ??ADC_ISR_2
     81              HEXtoBCD(ADC_Right_Detect,3,0); 
   \   000010   0E43         MOV.W   #0x0, R14
   \   000012   3D400300     MOV.W   #0x3, R13
   \   000016   1C42....     MOV.W   &ADC_Right_Detect, R12
   \   00001A   ........     CALLA   #HEXtoBCD
     82              HEXtoBCD(ADC_Left_Detect,3,6); 
   \   00001E   3E400600     MOV.W   #0x6, R14
   \   000022   3D400300     MOV.W   #0x3, R13
   \   000026   1C42....     MOV.W   &ADC_Left_Detect, R12
   \   00002A   ........     CALLA   #HEXtoBCD
     83            }
     84            switch(__even_in_range(ADCIV,ADCIV_ADCIFG)){ 
   \                     ??ADC_ISR_2:
   \   00002E   1F421E07     MOV.W   &0x71e, R15
   \   000032   E00F         ADDA    R15, PC
   \                     `?<Jumptable for ADC_ISR>_0`:
   \   000034   8D3C         JMP     ??ADC_ISR_1
   \   000036   8C3C         JMP     ??ADC_ISR_1
   \   000038   8B3C         JMP     ??ADC_ISR_1
   \   00003A   8A3C         JMP     ??ADC_ISR_1
   \   00003C   893C         JMP     ??ADC_ISR_1
   \   00003E   883C         JMP     ??ADC_ISR_1
   \   000040   003C         JMP     ??ADC_ISR_10
     85              case ADCIV_NONE:
     86                break;
     87              case ADCIV_ADCOVIFG:
     88                break;
     89              case ADCIV_ADCTOVIFG:
     90                break;
     91              case ADCIV_ADCHIIFG:
     92                break;
     93              case ADCIV_ADCLOIFG:
     94                break;
     95              case ADCIV_ADCINIFG:
     96                break;
     97              case ADCIV_ADCIFG:
     98                ADCCTL0 &= ~ADCENC; 
   \                     ??ADC_ISR_10:
   \   000042   A2C30007     BIC.W   #0x2, &0x700
     99                switch (ADC_Channel++){
   \   000046   1F42....     MOV.W   &ADC_Channel, R15
   \   00004A   0E4F         MOV.W   R15, R14
   \   00004C   1E53         ADD.W   #0x1, R14
   \   00004E   824E....     MOV.W   R14, &ADC_Channel
   \   000052   0F83         SUB.W   #0x0, R15
   \   000054   0D24         JEQ     ??ADC_ISR_3
   \   000056   1F83         SUB.W   #0x1, R15
   \   000058   2224         JEQ     ??ADC_ISR_4
   \   00005A   1F83         SUB.W   #0x1, R15
   \   00005C   3124         JEQ     ??ADC_ISR_5
   \   00005E   1F83         SUB.W   #0x1, R15
   \   000060   4024         JEQ     ??ADC_ISR_6
   \   000062   1F83         SUB.W   #0x1, R15
   \   000064   4E24         JEQ     ??ADC_ISR_7
   \   000066   1F83         SUB.W   #0x1, R15
   \   000068   5D24         JEQ     ??ADC_ISR_8
   \   00006A   1F83         SUB.W   #0x1, R15
   \   00006C   6B24         JEQ     ??ADC_ISR_9
   \   00006E   6E3C         JMP     ??ADC_ISR_0
    100                  case 0x00:
    101                    ADCMCTL0 &= ~ADCINCH_5; 
   \                     ??ADC_ISR_3:
   \   000070   B2F0FAFF0A07 AND.W   #0xfffa, &0x70a
    102                    ADCMCTL0 = ADCINCH_9; 
   \   000076   B24009000A07 MOV.W   #0x9, &0x70a
    103                    ADC_Thumb = ADCMEM0; 
   \   00007C   92421207.... MOV.W   &0x712, &ADC_Thumb
    104                    ADC_Thumb = ADC_Thumb >> 2; 
   \   000082   1F42....     MOV.W   &ADC_Thumb, R15
   \   000086   5F07         RRUM.W  #0x2, R15
   \   000088   824F....     MOV.W   R15, &ADC_Thumb
    105                    ADCCTL0 |= ADCSC;
   \   00008C   92D30007     BIS.W   #0x1, &0x700
    106                    HEXtoBCD(ADC_Thumb,1,0); 
   \   000090   0E43         MOV.W   #0x0, R14
   \   000092   1D43         MOV.W   #0x1, R13
   \   000094   1C42....     MOV.W   &ADC_Thumb, R12
   \   000098   ........     CALLA   #HEXtoBCD
    107                    break; 
   \   00009C   573C         JMP     ??ADC_ISR_0
    108                  case 0x01:
    109                    ADCMCTL0 &= ~ADCINCH_9; 
   \                     ??ADC_ISR_4:
   \   00009E   B2F0F6FF0A07 AND.W   #0xfff6, &0x70a
    110                    ADCMCTL0 = ADCINCH_10; 
   \   0000A4   B2400A000A07 MOV.W   #0xa, &0x70a
    111                    ADC_Vbat = ADCMEM0; 
   \   0000AA   92421207.... MOV.W   &0x712, &ADC_Vbat
    112                    ADC_Vbat = ADC_Vbat >> 2; 
   \   0000B0   1F42....     MOV.W   &ADC_Vbat, R15
   \   0000B4   5F07         RRUM.W  #0x2, R15
   \   0000B6   824F....     MOV.W   R15, &ADC_Vbat
    113                    ADCCTL0 |= ADCSC;
   \   0000BA   92D30007     BIS.W   #0x1, &0x700
    114                    //HEXtoBCD(ADC_Vbat,1); 
    115                    break; 
   \   0000BE   463C         JMP     ??ADC_ISR_0
    116                  case 0x02:
    117                    ADCMCTL0 &= ~ADCINCH_10; 
   \                     ??ADC_ISR_5:
   \   0000C0   B2F0F5FF0A07 AND.W   #0xfff5, &0x70a
    118                    ADCMCTL0 = ADCINCH_11; 
   \   0000C6   B2400B000A07 MOV.W   #0xb, &0x70a
    119                    ADC_Vdac = ADCMEM0; 
   \   0000CC   92421207.... MOV.W   &0x712, &ADC_Vdac
    120                    ADC_Vdac = ADC_Vdac >> 2; 
   \   0000D2   1F42....     MOV.W   &ADC_Vdac, R15
   \   0000D6   5F07         RRUM.W  #0x2, R15
   \   0000D8   824F....     MOV.W   R15, &ADC_Vdac
    121                    //HEXtoBCD(ADC_Vdac,2); 
    122                    ADCCTL0 |= ADCSC;
   \   0000DC   92D30007     BIS.W   #0x1, &0x700
    123                    break;
   \   0000E0   353C         JMP     ??ADC_ISR_0
    124                  case 0x03:
    125                    ADCMCTL0 &= ~ADCINCH_11; 
   \                     ??ADC_ISR_6:
   \   0000E2   B2F0F4FF0A07 AND.W   #0xfff4, &0x70a
    126                    ADCMCTL0 = ADCINCH_2; 
   \   0000E8   A2430A07     MOV.W   #0x2, &0x70a
    127                    ADC_V3v3 = ADCMEM0; 
   \   0000EC   92421207.... MOV.W   &0x712, &ADC_V3v3
    128                    ADC_V3v3 = ADC_V3v3 >> 2; 
   \   0000F2   1F42....     MOV.W   &ADC_V3v3, R15
   \   0000F6   5F07         RRUM.W  #0x2, R15
   \   0000F8   824F....     MOV.W   R15, &ADC_V3v3
    129                    //HEXtoBCD(ADC_V3v3,3); 
    130                    ADCCTL0 |= ADCSC;
   \   0000FC   92D30007     BIS.W   #0x1, &0x700
    131                    break; 
   \   000100   253C         JMP     ??ADC_ISR_0
    132                  case 0x04:
    133                    ADCMCTL0 &= ~ADCINCH_2; 
   \                     ??ADC_ISR_7:
   \   000102   A2C30A07     BIC.W   #0x2, &0x70a
    134                    ADCMCTL0 = ADCINCH_3; 
   \   000106   B24003000A07 MOV.W   #0x3, &0x70a
    135                    ADC_Left_Detect = ADCMEM0; 
   \   00010C   92421207.... MOV.W   &0x712, &ADC_Left_Detect
    136                    ADC_Left_Detect = ADC_Left_Detect >> 7; 
   \   000112   1F42....     MOV.W   &ADC_Left_Detect, R15
   \   000116   5F0F         RRUM.W  #0x4, R15
   \   000118   5F0B         RRUM.W  #0x3, R15
   \   00011A   824F....     MOV.W   R15, &ADC_Left_Detect
    137                    ADCCTL0 |= ADCSC;
   \   00011E   92D30007     BIS.W   #0x1, &0x700
    138                    break; 
   \   000122   143C         JMP     ??ADC_ISR_0
    139                  case 0x05:
    140                    ADCMCTL0 &= ~ADCINCH_3; 
   \                     ??ADC_ISR_8:
   \   000124   B2F0FCFF0A07 AND.W   #0xfffc, &0x70a
    141                    ADCMCTL0 = ADCINCH_5; 
   \   00012A   B24005000A07 MOV.W   #0x5, &0x70a
    142                    ADC_Right_Detect = ADCMEM0; 
   \   000130   92421207.... MOV.W   &0x712, &ADC_Right_Detect
    143                    ADC_Right_Detect = ADC_Right_Detect >> 7; 
   \   000136   1F42....     MOV.W   &ADC_Right_Detect, R15
   \   00013A   5F0F         RRUM.W  #0x4, R15
   \   00013C   5F0B         RRUM.W  #0x3, R15
   \   00013E   824F....     MOV.W   R15, &ADC_Right_Detect
    144                    break; 
   \   000142   043C         JMP     ??ADC_ISR_0
    145                  case 0x06:
    146                    adcUpdated = 1;
   \                     ??ADC_ISR_9:
   \   000144   9243....     MOV.W   #0x1, &adcUpdated
    147                    ADC_Channel=0;
   \   000148   8243....     MOV.W   #0x0, &ADC_Channel
    148                    break; 
    149                  default: break;
    150                  }
    151                  ADCCTL0 |= ADCENC; 
   \                     ??ADC_ISR_0:
   \   00014C   A2D30007     BIS.W   #0x2, &0x700
    152                  
    153              default: break;
    154            }
    155          }
   \                     ??ADC_ISR_1:
   \   000150   3C17         POPM.W  #0x4, R15
   \   000152   0013         RETI
   \   000154                REQUIRE _A_PCIN_L
   \   000154                REQUIRE _A_ADCCTL0_L
   \   000154                REQUIRE _A_ADCMCTL0_L
   \   000154                REQUIRE _A_ADCMEM0_L
   \   000154                REQUIRE _A_ADCIV_L
    156          
    157          

   \                                 In  segment CODE, align 2
    158          void HEXtoBCD(int hex_value, int line, int start){
   \                     HEXtoBCD:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0A4E         MOV.W   R14, R10
    159            int value=0;
   \   000004   0F43         MOV.W   #0x0, R15
    160            adc_char[0] = '0';
   \   000006   F2403000.... MOV.B   #0x30, &adc_char
    161            while(hex_value>999){
   \                     ??HEXtoBCD_0:
   \   00000C   3C90E803     CMP.W   #0x3e8, R12
   \   000010   0438         JL      ??HEXtoBCD_3
    162              hex_value-=1000;
   \   000012   3C5018FC     ADD.W   #0xfc18, R12
    163              value+=1;
   \   000016   1F53         ADD.W   #0x1, R15
   \   000018   F93F         JMP     ??HEXtoBCD_0
    164            }
    165            adc_char[0] = 0x30 + value;
   \                     ??HEXtoBCD_3:
   \   00001A   0E12         PUSH.W  R14
   \   00001C   C14F0000     MOV.B   R15, 0(SP)
   \   000020   3E41         POP.W   R14
   \   000022   7E503000     ADD.B   #0x30, R14
   \   000026   C24E....     MOV.B   R14, &adc_char
    166            display_line[line][start] = 0x30 + value;
   \   00002A   0E12         PUSH.W  R14
   \   00002C   C14F0000     MOV.B   R15, 0(SP)
   \   000030   3E41         POP.W   R14
   \   000032   7E503000     ADD.B   #0x30, R14
   \   000036   0B4D         MOV.W   R13, R11
   \   000038                RPT     #0xa
   \   000038   49180B5D     ADDX.W  R13, R11
   \   00003C   0B5A         ADD.W   R10, R11
   \   00003E   CB4E....     MOV.B   R14, display_line(R11)
    167            value = 0;
   \   000042   0F43         MOV.W   #0x0, R15
    168            while(hex_value > 99){
   \                     ??HEXtoBCD_1:
   \   000044   3C906400     CMP.W   #0x64, R12
   \   000048   1938         JL      ??HEXtoBCD_4
    169              hex_value -= 100;
   \   00004A   3C509CFF     ADD.W   #0xff9c, R12
    170              value += 1;
   \   00004E   1F53         ADD.W   #0x1, R15
    171              adc_char[1] = 0x30 + value;
   \   000050   0E12         PUSH.W  R14
   \   000052   C14F0000     MOV.B   R15, 0(SP)
   \   000056   3E41         POP.W   R14
   \   000058   7E503000     ADD.B   #0x30, R14
   \   00005C   C24E....     MOV.B   R14, &adc_char + 1
    172              display_line[line][start+1] = 0x30 + value;
   \   000060   0B12         PUSH.W  R11
   \   000062   C14F0000     MOV.B   R15, 0(SP)
   \   000066   3B41         POP.W   R11
   \   000068   7B503000     ADD.B   #0x30, R11
   \   00006C   084D         MOV.W   R13, R8
   \   00006E                RPT     #0xa
   \   00006E   4918085D     ADDX.W  R13, R8
   \   000072   0E4A         MOV.W   R10, R14
   \   000074   0E58         ADD.W   R8, R14
   \   000076   CE4B....     MOV.B   R11, display_line + 1(R14)
   \   00007A   E43F         JMP     ??HEXtoBCD_1
    173            }
    174            adc_char[1] = 0x30 + value;
   \                     ??HEXtoBCD_4:
   \   00007C   0E12         PUSH.W  R14
   \   00007E   C14F0000     MOV.B   R15, 0(SP)
   \   000082   3E41         POP.W   R14
   \   000084   7E503000     ADD.B   #0x30, R14
   \   000088   C24E....     MOV.B   R14, &adc_char + 1
    175            display_line[line][start+1] = 0x30 + value;
   \   00008C   0B12         PUSH.W  R11
   \   00008E   C14F0000     MOV.B   R15, 0(SP)
   \   000092   3B41         POP.W   R11
   \   000094   7B503000     ADD.B   #0x30, R11
   \   000098   084D         MOV.W   R13, R8
   \   00009A                RPT     #0xa
   \   00009A   4918085D     ADDX.W  R13, R8
   \   00009E   0E4A         MOV.W   R10, R14
   \   0000A0   0E58         ADD.W   R8, R14
   \   0000A2   CE4B....     MOV.B   R11, display_line + 1(R14)
    176            value = 0;
   \   0000A6   0F43         MOV.W   #0x0, R15
    177            while(hex_value > 9){
   \                     ??HEXtoBCD_2:
   \   0000A8   3C900A00     CMP.W   #0xa, R12
   \   0000AC   0438         JL      ??HEXtoBCD_5
    178              hex_value -= 10;
   \   0000AE   3C50F6FF     ADD.W   #0xfff6, R12
    179              value += 1;
   \   0000B2   1F53         ADD.W   #0x1, R15
   \   0000B4   F93F         JMP     ??HEXtoBCD_2
    180            }
    181            adc_char[2] = 0x30 + value;
   \                     ??HEXtoBCD_5:
   \   0000B6   0E12         PUSH.W  R14
   \   0000B8   C14F0000     MOV.B   R15, 0(SP)
   \   0000BC   3E41         POP.W   R14
   \   0000BE   7E503000     ADD.B   #0x30, R14
   \   0000C2   C24E....     MOV.B   R14, &adc_char + 2
    182            display_line[line][start+2] = 0x30 + value;
   \   0000C6   0B12         PUSH.W  R11
   \   0000C8   C14F0000     MOV.B   R15, 0(SP)
   \   0000CC   3B41         POP.W   R11
   \   0000CE   7B503000     ADD.B   #0x30, R11
   \   0000D2   084D         MOV.W   R13, R8
   \   0000D4                RPT     #0xa
   \   0000D4   4918085D     ADDX.W  R13, R8
   \   0000D8   0E4A         MOV.W   R10, R14
   \   0000DA   0E58         ADD.W   R8, R14
   \   0000DC   CE4B....     MOV.B   R11, display_line + 2(R14)
    183            adc_char[3] = 0x30 + hex_value;
   \   0000E0   0E12         PUSH.W  R14
   \   0000E2   C14C0000     MOV.B   R12, 0(SP)
   \   0000E6   3E41         POP.W   R14
   \   0000E8   7E503000     ADD.B   #0x30, R14
   \   0000EC   C24E....     MOV.B   R14, &adc_char + 3
    184            display_line[line][start+3] = 0x30 + hex_value;
   \   0000F0   0B12         PUSH.W  R11
   \   0000F2   C14C0000     MOV.B   R12, 0(SP)
   \   0000F6   3B41         POP.W   R11
   \   0000F8   7B503000     ADD.B   #0x30, R11
   \   0000FC   084D         MOV.W   R13, R8
   \   0000FE                RPT     #0xa
   \   0000FE   4918085D     ADDX.W  R13, R8
   \   000102   0E4A         MOV.W   R10, R14
   \   000104   0E58         ADD.W   R8, R14
   \   000106   CE4B....     MOV.B   R11, display_line + 3(R14)
    185            adc_char[4] = 0;
   \   00010A   C243....     MOV.B   #0x0, &adc_char + 4
    186            display_changed=1;
   \   00010E   D243....     MOV.B   #0x1, &display_changed
    187          }
   \   000112   3817         POPM.W  #0x4, R11
   \   000114   1001         RETA

   \                                 In  segment INTVEC, offset 0x3a, root
   \                     `??ADC_ISR::??INTVEC 58`:
   \   00003A   ....         DC16    ADC_ISR
    188          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   ADC_ISR
       12   -> HEXtoBCD
     14   HEXtoBCD
      4   Init_ADC
      4   Init_DAC
      4   Init_REF


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ADC_Channel
     340  ADC_ISR
       2  ADC_ISR::??INTVEC 58
       2  ADC_Left_Detect
       2  ADC_Right_Detect
       2  ADC_Thumb
       2  ADC_V3v3
       2  ADC_Vbat
       2  ADC_Vdac
       2  DAC_data
     278  HEXtoBCD
     112  Init_ADC
      72  Init_DAC
      26  Init_REF
       2  _A_ADCCTL0_L
       2  _A_ADCCTL1_L
       2  _A_ADCCTL2_L
       2  _A_ADCIE_L
       2  _A_ADCIV_L
       2  _A_ADCMCTL0_L
       2  _A_ADCMEM0_L
       2  _A_PCIN_L
       2  _A_PMMCTL0_L
       2  _A_PMMCTL2_L
       2  _A_SAC3DAC_L
       2  _A_SAC3DAT_L
       2  _A_SAC3OA_L
       2  _A_SAC3PGA_L
       2  adcUpdated
       5  adc_char

 
 488 bytes in segment CODE
  28 bytes in segment DATA16_AN
  23 bytes in segment DATA16_Z
   2 bytes in segment INTVEC
 340 bytes in segment ISR_CODE
 
 828 bytes of CODE  memory
   0 bytes of CONST memory (+  2 bytes shared)
  23 bytes of DATA  memory (+ 28 bytes shared)

Errors: none
Warnings: none
