###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          06/Mar/2022  20:34:27
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 07\sm.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW9759.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 07\sm.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 07\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 07\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 07\Debug\List\sm.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 07\Debug\Obj\sm.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 07\sm.c
      1          #include "msp430.h"
      2          #include "ports.h"
      3          #include "wheels.h"
      4          #include "sm.h"
      5          #include <string.h>
      6          #include "adc.h"
      7          #include "timers.h"
      8          #include "detectors.h"
      9          #include "pid.h"
     10          
     11          extern volatile unsigned int cycle_count;
     12          extern volatile unsigned int stopwatch_milliseconds;
     13          extern volatile unsigned int stopwatch_seconds;
     14          extern volatile unsigned char display_changed;
     15          extern char display_line[4][11];
     16          extern volatile unsigned int wheel_periods;

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     17          volatile char state = CALIBRATE;
   \                     state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for state>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile int stateCounter;
   \                     stateCounter:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     19          volatile char nextState = STRAIGHT;
   \                     nextState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for nextState>`
     20          extern volatile unsigned int Time_Sequence;
     21          extern volatile unsigned int Last_Time_Sequence;
     22          extern volatile unsigned int time_change;

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     23          volatile unsigned int delayTime = 1;
   \                     delayTime:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for delayTime>`
     24          extern volatile unsigned int ADC_Left_Detect,ADC_Right_Detect;
     25          extern volatile unsigned int rightSwitchable, leftSwitchable;
     26          extern unsigned int temp;
     27          extern char movingDirection;

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     28          char enteringDirection = NOT_MOVING;
   \                     enteringDirection:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for enteringDirection>`
     29          extern int leftVals[VALUES_TO_HOLD];
     30          extern int rightVals[VALUES_TO_HOLD];
     31          extern volatile unsigned int calibrationMode;
     32          extern unsigned int LBDetect, LWDetect, RBDetect, RWDetect;
     33          

   \                                 In  segment CODE, align 2
     34          void Straight(void){
   \                     Straight:
     35            
     36            if (stateCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &stateCounter
   \   000004   0C20         JNE     ??Straight_2
     37              strcpy(display_line[0], "INTERCEPT ");
   \   000006   3D40....     MOV.W   #`?<Constant "INTERCEPT ">`, R13
   \   00000A   3C40....     MOV.W   #display_line, R12
   \   00000E   ........     CALLA   #strcpy
     38              display_changed = 1;
   \   000012   D243....     MOV.B   #0x1, &display_changed
     39              EmitterOn();
   \   000016   ........     CALLA   #EmitterOn
     40              stateCounter++;
   \   00001A   9253....     ADD.W   #0x1, &stateCounter
     41            }
     42            if(stateCounter==1){
   \                     ??Straight_2:
   \   00001E   9293....     CMP.W   #0x1, &stateCounter
   \   000022   2B20         JNE     ??Straight_0
     43              if ((ADC_Left_Detect <= LEFT_BLACK_DETECT || ADC_Right_Detect <= RIGHT_BLACK_DETECT)){
   \   000024   1C42....     MOV.W   &LBDetect, R12
   \   000028   0C5C         RLA.W   R12
   \   00002A   3E400500     MOV.W   #0x5, R14
   \   00002E   ........     CALLA   #?DivMod16u
   \   000032   1C92....     CMP.W   &ADC_Left_Detect, R12
   \   000036   0A2C         JC      ??Straight_3
   \   000038   1C42....     MOV.W   &RBDetect, R12
   \   00003C   0C5C         RLA.W   R12
   \   00003E   3E400500     MOV.W   #0x5, R14
   \   000042   ........     CALLA   #?DivMod16u
   \   000046   1C92....     CMP.W   &ADC_Right_Detect, R12
   \   00004A   0828         JNC     ??Straight_4
     44                Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT, 0);
   \                     ??Straight_3:
   \   00004C   0E43         MOV.W   #0x0, R14
   \   00004E   3D40803E     MOV.W   #0x3e80, R13
   \   000052   3C40204E     MOV.W   #0x4e20, R12
   \   000056   ........     CALLA   #Drive_Path
   \   00005A   0F3C         JMP     ??Straight_0
     45              }
     46              else{
     47                int left = ADC_Left_Detect;
   \                     ??Straight_4:
   \   00005C   1F42....     MOV.W   &ADC_Left_Detect, R15
     48                int right = ADC_Right_Detect;
   \   000060   1E42....     MOV.W   &ADC_Right_Detect, R14
     49                if(left>right) enteringDirection = MOVING_LEFT;
   \   000064   0E9F         CMP.W   R15, R14
   \   000066   0434         JGE     ??Straight_5
   \   000068   F2404C00.... MOV.B   #0x4c, &enteringDirection
   \   00006E   033C         JMP     ??Straight_1
     50                else enteringDirection = MOVING_RIGHT;
   \                     ??Straight_5:
   \   000070   F2405200.... MOV.B   #0x52, &enteringDirection
     51                stateCounter++;
   \                     ??Straight_1:
   \   000076   9253....     ADD.W   #0x1, &stateCounter
     52              }
     53            }
     54            if(stateCounter==2){
   \                     ??Straight_0:
   \   00007A   A293....     CMP.W   #0x2, &stateCounter
   \   00007E   0920         JNE     ??Straight_6
     55              if(LockMotors(-1,-1)) stateCounter++;
   \   000080   3D43         MOV.W   #0xffff, R13
   \   000082   3C43         MOV.W   #0xffff, R12
   \   000084   ........     CALLA   #LockMotors
   \   000088   0C93         CMP.W   #0x0, R12
   \   00008A   1A24         JEQ     ??Straight_7
   \   00008C   9253....     ADD.W   #0x1, &stateCounter
   \   000090   1001         RETA
     56            }
     57            
     58            else if (stateCounter==3) {
   \                     ??Straight_6:
   \   000092   B2900300.... CMP.W   #0x3, &stateCounter
   \   000098   1320         JNE     ??Straight_7
     59              ShutoffMotors();
   \   00009A   ........     CALLA   #ShutoffMotors
     60              stateCounter = 0 ;
   \   00009E   8243....     MOV.W   #0x0, &stateCounter
     61              state = WAIT;    
   \   0000A2   F2405700.... MOV.B   #0x57, &state
     62              delayTime = 3;
   \   0000A8   B2400300.... MOV.W   #0x3, &delayTime
     63              stopwatch_seconds = 0;
   \   0000AE   8243....     MOV.W   #0x0, &stopwatch_seconds
     64              cycle_count = 0;
   \   0000B2   8243....     MOV.W   #0x0, &cycle_count
     65              nextState = TURN;
   \   0000B6   F2405400.... MOV.B   #0x54, &nextState
     66              EmitterOff();
   \   0000BC   ........     CALLA   #EmitterOff
     67              //strcpy(display_line[1], "BLACK LINE");
     68              //strcpy(display_line[2], " DETECTED ");
     69              //display_changed = 1;
     70            }
     71          }
   \                     ??Straight_7:
   \   0000C0   1001         RETA
     72          

   \                                 In  segment CODE, align 2
     73          void Turn(){
   \                     Turn:
     74            if (stateCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &stateCounter
   \   000004   1820         JNE     ??Turn_1
     75              EmitterOn();
   \   000006   ........     CALLA   #EmitterOn
     76              strcpy(display_line[0], "  TURNING ");
   \   00000A   3D40....     MOV.W   #`?<Constant "  TURNING ">`, R13
   \   00000E   3C40....     MOV.W   #display_line, R12
   \   000012   ........     CALLA   #strcpy
     77              strcpy(display_line[1], "          ");
   \   000016   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00001A   3C40....     MOV.W   #display_line + 11, R12
   \   00001E   ........     CALLA   #strcpy
     78              strcpy(display_line[2], "          ");
   \   000022   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000026   3C40....     MOV.W   #display_line + 22, R12
   \   00002A   ........     CALLA   #strcpy
     79              display_changed = 1;
   \   00002E   D243....     MOV.B   #0x1, &display_changed
     80              stateCounter=1;
   \   000032   9243....     MOV.W   #0x1, &stateCounter
     81            }
     82            if(stateCounter==1){
   \                     ??Turn_1:
   \   000036   9293....     CMP.W   #0x1, &stateCounter
   \   00003A   2120         JNE     ??Turn_0
     83              if(enteringDirection == MOVING_LEFT){
   \   00003C   F2904C00.... CMP.B   #0x4c, &enteringDirection
   \   000042   0D20         JNE     ??Turn_2
     84                if(Drive_Path(STRAIGHT_RIGHT/2,-STRAIGHT_LEFT/2,20)) stateCounter++;
   \   000044   3E401400     MOV.W   #0x14, R14
   \   000048   3D40C0E0     MOV.W   #0xe0c0, R13
   \   00004C   3C401027     MOV.W   #0x2710, R12
   \   000050   ........     CALLA   #Drive_Path
   \   000054   0C93         CMP.W   #0x0, R12
   \   000056   1324         JEQ     ??Turn_0
   \   000058   9253....     ADD.W   #0x1, &stateCounter
   \   00005C   103C         JMP     ??Turn_0
     85              }
     86              else if(enteringDirection == MOVING_RIGHT){
   \                     ??Turn_2:
   \   00005E   F2905200.... CMP.B   #0x52, &enteringDirection
   \   000064   0C20         JNE     ??Turn_0
     87                if(Drive_Path(-STRAIGHT_RIGHT/2,STRAIGHT_LEFT/2,20)) stateCounter++;
   \   000066   3E401400     MOV.W   #0x14, R14
   \   00006A   3D40401F     MOV.W   #0x1f40, R13
   \   00006E   3C40F0D8     MOV.W   #0xd8f0, R12
   \   000072   ........     CALLA   #Drive_Path
   \   000076   0C93         CMP.W   #0x0, R12
   \   000078   0224         JEQ     ??Turn_0
   \   00007A   9253....     ADD.W   #0x1, &stateCounter
     88              }
     89            }
     90            if (stateCounter==2){
   \                     ??Turn_0:
   \   00007E   A293....     CMP.W   #0x2, &stateCounter
   \   000082   2E20         JNE     ??Turn_3
     91              if (((ADC_Left_Detect < LEFT_BLACK_DETECT || ADC_Right_Detect < RIGHT_BLACK_DETECT))){
   \   000084   1C42....     MOV.W   &LBDetect, R12
   \   000088   0C5C         RLA.W   R12
   \   00008A   3E400500     MOV.W   #0x5, R14
   \   00008E   ........     CALLA   #?DivMod16u
   \   000092   829C....     CMP.W   R12, &ADC_Left_Detect
   \   000096   0A28         JNC     ??Turn_4
   \   000098   1C42....     MOV.W   &RBDetect, R12
   \   00009C   0C5C         RLA.W   R12
   \   00009E   3E400500     MOV.W   #0x5, R14
   \   0000A2   ........     CALLA   #?DivMod16u
   \   0000A6   829C....     CMP.W   R12, &ADC_Right_Detect
   \   0000AA   172C         JC      ??Turn_5
     92                if(enteringDirection == MOVING_LEFT)Drive_Path(STRAIGHT_RIGHT/4,-STRAIGHT_LEFT/4,0);
   \                     ??Turn_4:
   \   0000AC   F2904C00.... CMP.B   #0x4c, &enteringDirection
   \   0000B2   0720         JNE     ??Turn_6
   \   0000B4   0E43         MOV.W   #0x0, R14
   \   0000B6   3D4060F0     MOV.W   #0xf060, R13
   \   0000BA   3C408813     MOV.W   #0x1388, R12
   \   0000BE   ........     CALLA   #Drive_Path
     93                if(enteringDirection == MOVING_RIGHT)Drive_Path(-STRAIGHT_RIGHT/4,STRAIGHT_LEFT/4,0);
   \                     ??Turn_6:
   \   0000C2   F2905200.... CMP.B   #0x52, &enteringDirection
   \   0000C8   2220         JNE     ??Turn_7
   \   0000CA   0E43         MOV.W   #0x0, R14
   \   0000CC   3D40A00F     MOV.W   #0xfa0, R13
   \   0000D0   3C4078EC     MOV.W   #0xec78, R12
   \   0000D4   ........     CALLA   #Drive_Path
   \   0000D8   1001         RETA
     94              }
     95              else stateCounter++;
   \                     ??Turn_5:
   \   0000DA   9253....     ADD.W   #0x1, &stateCounter
   \   0000DE   1001         RETA
     96            }
     97            else if (stateCounter==3) {
   \                     ??Turn_3:
   \   0000E0   B2900300.... CMP.W   #0x3, &stateCounter
   \   0000E6   1320         JNE     ??Turn_7
     98              ShutoffMotors();
   \   0000E8   ........     CALLA   #ShutoffMotors
     99              stateCounter = 0 ;
   \   0000EC   8243....     MOV.W   #0x0, &stateCounter
    100              state = WAIT;    
   \   0000F0   F2405700.... MOV.B   #0x57, &state
    101              delayTime = 3;
   \   0000F6   B2400300.... MOV.W   #0x3, &delayTime
    102              stopwatch_seconds = 0;
   \   0000FC   8243....     MOV.W   #0x0, &stopwatch_seconds
    103              cycle_count = 0;
   \   000100   8243....     MOV.W   #0x0, &cycle_count
    104              nextState = LINEFOLLOW;
   \   000104   F2404C00.... MOV.B   #0x4c, &nextState
    105              EmitterOff();
   \   00010A   ........     CALLA   #EmitterOff
    106            }
    107          }
   \                     ??Turn_7:
   \   00010E   1001         RETA
    108          

   \                                 In  segment CODE, align 2
    109          void LineFollow(){
   \                     LineFollow:
   \   000000   1B15         PUSHM.W #0x2, R11
    110            if (stateCounter == 0) {
   \   000002   8293....     CMP.W   #0x0, &stateCounter
   \   000006   1620         JNE     ??LineFollow_3
    111              EmitterOn();
   \   000008   ........     CALLA   #EmitterOn
    112              strcpy(display_line[0], " CIRCLING ");
   \   00000C   3D40....     MOV.W   #`?<Constant " CIRCLING ">`, R13
   \   000010   3C40....     MOV.W   #display_line, R12
   \   000014   ........     CALLA   #strcpy
    113              display_changed = 1;
   \   000018   D243....     MOV.B   #0x1, &display_changed
    114              stopwatch_seconds = 0;
   \   00001C   8243....     MOV.W   #0x0, &stopwatch_seconds
    115              cycle_count = 0;
   \   000020   8243....     MOV.W   #0x0, &cycle_count
    116              if(rightSwitchable && leftSwitchable)stateCounter++;
   \   000024   8293....     CMP.W   #0x0, &rightSwitchable
   \   000028   0524         JEQ     ??LineFollow_3
   \   00002A   8293....     CMP.W   #0x0, &leftSwitchable
   \   00002E   0224         JEQ     ??LineFollow_3
   \   000030   9253....     ADD.W   #0x1, &stateCounter
    117            }
    118            
    119            if(stateCounter == 1){
   \                     ??LineFollow_3:
   \   000034   9293....     CMP.W   #0x1, &stateCounter
   \   000038   2920         JNE     ??LineFollow_4
    120              
    121              int rSpeed = RIGHT_MAX;
   \   00003A   3A408813     MOV.W   #0x1388, R10
    122              int lSpeed = LEFT_MAX;
   \   00003E   3B40A00F     MOV.W   #0xfa0, R11
    123              if(ADC_Left_Detect<LEFT_BLACK_DETECT || ADC_Right_Detect<RIGHT_BLACK_DETECT) stateCounter = 2;
   \   000042   1C42....     MOV.W   &LBDetect, R12
   \   000046   0C5C         RLA.W   R12
   \   000048   3E400500     MOV.W   #0x5, R14
   \   00004C   ........     CALLA   #?DivMod16u
   \   000050   829C....     CMP.W   R12, &ADC_Left_Detect
   \   000054   0A28         JNC     ??LineFollow_5
   \   000056   1C42....     MOV.W   &RBDetect, R12
   \   00005A   0C5C         RLA.W   R12
   \   00005C   3E400500     MOV.W   #0x5, R14
   \   000060   ........     CALLA   #?DivMod16u
   \   000064   829C....     CMP.W   R12, &ADC_Right_Detect
   \   000068   022C         JC      ??LineFollow_6
   \                     ??LineFollow_5:
   \   00006A   A243....     MOV.W   #0x2, &stateCounter
    124              
    125              if(delay(30,0)) stateCounter = 5;
   \                     ??LineFollow_6:
   \   00006E   0D43         MOV.W   #0x0, R13
   \   000070   3C401E00     MOV.W   #0x1e, R12
   \   000074   ........     CALLA   #delay
   \   000078   0C93         CMP.W   #0x0, R12
   \   00007A   0324         JEQ     ??LineFollow_7
   \   00007C   B2400500.... MOV.W   #0x5, &stateCounter
    126              Drive_Path(rSpeed,lSpeed,0);
   \                     ??LineFollow_7:
   \   000082   0E43         MOV.W   #0x0, R14
   \   000084   0D4B         MOV.W   R11, R13
   \   000086   0C4A         MOV.W   R10, R12
   \   000088   ........     CALLA   #Drive_Path
    127            }
    128            
    129            if(stateCounter == 2){
   \                     ??LineFollow_4:
   \   00008C   A293....     CMP.W   #0x2, &stateCounter
   \   000090   3120         JNE     ??LineFollow_0
    130              if(ADC_Left_Detect<LEFT_BLACK_DETECT && ADC_Right_Detect>=RIGHT_BLACK_DETECT) // RCIRC
   \   000092   1C42....     MOV.W   &LBDetect, R12
   \   000096   0C5C         RLA.W   R12
   \   000098   3E400500     MOV.W   #0x5, R14
   \   00009C   ........     CALLA   #?DivMod16u
   \   0000A0   829C....     CMP.W   R12, &ADC_Left_Detect
   \   0000A4   0E2C         JC      ??LineFollow_8
   \   0000A6   1C42....     MOV.W   &RBDetect, R12
   \   0000AA   0C5C         RLA.W   R12
   \   0000AC   3E400500     MOV.W   #0x5, R14
   \   0000B0   ........     CALLA   #?DivMod16u
   \   0000B4   829C....     CMP.W   R12, &ADC_Right_Detect
   \   0000B8   0428         JNC     ??LineFollow_8
    131                stateCounter = 3;
   \   0000BA   B2400300.... MOV.W   #0x3, &stateCounter
   \   0000C0   193C         JMP     ??LineFollow_0
    132              else if(ADC_Left_Detect>=LEFT_BLACK_DETECT && ADC_Right_Detect<RIGHT_BLACK_DETECT) // LCIRC
   \                     ??LineFollow_8:
   \   0000C2   1C42....     MOV.W   &LBDetect, R12
   \   0000C6   0C5C         RLA.W   R12
   \   0000C8   3E400500     MOV.W   #0x5, R14
   \   0000CC   ........     CALLA   #?DivMod16u
   \   0000D0   829C....     CMP.W   R12, &ADC_Left_Detect
   \   0000D4   0D28         JNC     ??LineFollow_9
   \   0000D6   1C42....     MOV.W   &RBDetect, R12
   \   0000DA   0C5C         RLA.W   R12
   \   0000DC   3E400500     MOV.W   #0x5, R14
   \   0000E0   ........     CALLA   #?DivMod16u
   \   0000E4   829C....     CMP.W   R12, &ADC_Right_Detect
   \   0000E8   032C         JC      ??LineFollow_9
    133                stateCounter = 4;
   \   0000EA   A242....     MOV.W   #0x4, &stateCounter
   \   0000EE   023C         JMP     ??LineFollow_0
    134              else stateCounter = 1;
   \                     ??LineFollow_9:
   \   0000F0   9243....     MOV.W   #0x1, &stateCounter
    135            }
    136            
    137            if(stateCounter == 3){ // turn left ()
   \                     ??LineFollow_0:
   \   0000F4   B2900300.... CMP.W   #0x3, &stateCounter
   \   0000FA   1F20         JNE     ??LineFollow_1
    138               if(ADC_Left_Detect<LEFT_BLACK_DETECT)Drive_Path(RCIRC_RIGHT/4,-RCIRC_LEFT, 0);
   \   0000FC   1C42....     MOV.W   &LBDetect, R12
   \   000100   0C5C         RLA.W   R12
   \   000102   3E400500     MOV.W   #0x5, R14
   \   000106   ........     CALLA   #?DivMod16u
   \   00010A   829C....     CMP.W   R12, &ADC_Left_Detect
   \   00010E   082C         JC      ??LineFollow_10
   \   000110   0E43         MOV.W   #0x0, R14
   \   000112   3D4048F4     MOV.W   #0xf448, R13
   \   000116   3C408813     MOV.W   #0x1388, R12
   \   00011A   ........     CALLA   #Drive_Path
   \   00011E   0D3C         JMP     ??LineFollow_1
    139               else if (ADC_Left_Detect>=LEFT_WHITE_DETECT && ADC_Right_Detect>=RIGHT_WHITE_DETECT) stateCounter = 1;
   \                     ??LineFollow_10:
   \   000120   9292........ CMP.W   &LWDetect, &ADC_Left_Detect
   \   000126   0728         JNC     ??LineFollow_11
   \   000128   9292........ CMP.W   &RWDetect, &ADC_Right_Detect
   \   00012E   0328         JNC     ??LineFollow_11
   \   000130   9243....     MOV.W   #0x1, &stateCounter
   \   000134   023C         JMP     ??LineFollow_1
    140               else stateCounter = 4;
   \                     ??LineFollow_11:
   \   000136   A242....     MOV.W   #0x4, &stateCounter
    141            }
    142            
    143            if(stateCounter == 4){
   \                     ??LineFollow_1:
   \   00013A   A292....     CMP.W   #0x4, &stateCounter
   \   00013E   2120         JNE     ??LineFollow_12
    144               if(ADC_Right_Detect<RIGHT_BLACK_DETECT)Drive_Path(-LCIRC_RIGHT,LCIRC_LEFT/4, 0);
   \   000140   1C42....     MOV.W   &RBDetect, R12
   \   000144   0C5C         RLA.W   R12
   \   000146   3E400500     MOV.W   #0x5, R14
   \   00014A   ........     CALLA   #?DivMod16u
   \   00014E   829C....     CMP.W   R12, &ADC_Right_Detect
   \   000152   082C         JC      ??LineFollow_13
   \   000154   0E43         MOV.W   #0x0, R14
   \   000156   3D408813     MOV.W   #0x1388, R13
   \   00015A   3C4048F4     MOV.W   #0xf448, R12
   \   00015E   ........     CALLA   #Drive_Path
   \   000162   233C         JMP     ??LineFollow_2
    145               else if (ADC_Left_Detect>=LEFT_WHITE_DETECT && ADC_Right_Detect>=RIGHT_WHITE_DETECT) stateCounter = 1;
   \                     ??LineFollow_13:
   \   000164   9292........ CMP.W   &LWDetect, &ADC_Left_Detect
   \   00016A   0728         JNC     ??LineFollow_14
   \   00016C   9292........ CMP.W   &RWDetect, &ADC_Right_Detect
   \   000172   0328         JNC     ??LineFollow_14
   \   000174   9243....     MOV.W   #0x1, &stateCounter
   \   000178   183C         JMP     ??LineFollow_2
    146               else stateCounter = 3;
   \                     ??LineFollow_14:
   \   00017A   B2400300.... MOV.W   #0x3, &stateCounter
   \   000180   143C         JMP     ??LineFollow_2
    147            }
    148           
    149            else if (stateCounter==5) {
   \                     ??LineFollow_12:
   \   000182   B2900500.... CMP.W   #0x5, &stateCounter
   \   000188   1020         JNE     ??LineFollow_2
    150              ShutoffMotors();
   \   00018A   ........     CALLA   #ShutoffMotors
    151              stateCounter = 0 ;
   \   00018E   8243....     MOV.W   #0x0, &stateCounter
    152              state = WAIT;    
   \   000192   F2405700.... MOV.B   #0x57, &state
    153              stopwatch_seconds = 0;
   \   000198   8243....     MOV.W   #0x0, &stopwatch_seconds
    154              cycle_count = 0;
   \   00019C   8243....     MOV.W   #0x0, &cycle_count
    155              nextState = EXIT;
   \   0001A0   F2406500.... MOV.B   #0x65, &nextState
    156              EmitterOff();
   \   0001A6   ........     CALLA   #EmitterOff
    157            }
    158          }
   \                     ??LineFollow_2:
   \   0001AA   1A17         POPM.W  #0x2, R11
   \   0001AC   1001         RETA
    159          

   \                                 In  segment CODE, align 2
    160          void Exit(){
   \                     Exit:
    161            if (stateCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &stateCounter
   \   000004   1220         JNE     ??Exit_2
    162              EmitterOn();
   \   000006   ........     CALLA   #EmitterOn
    163              strcpy(display_line[0], "  EXITING ");
   \   00000A   3D40....     MOV.W   #`?<Constant "  EXITING ">`, R13
   \   00000E   3C40....     MOV.W   #display_line, R12
   \   000012   ........     CALLA   #strcpy
    164              display_changed = 1;
   \   000016   D243....     MOV.B   #0x1, &display_changed
    165              if(rightSwitchable && leftSwitchable)stateCounter++;
   \   00001A   8293....     CMP.W   #0x0, &rightSwitchable
   \   00001E   0524         JEQ     ??Exit_2
   \   000020   8293....     CMP.W   #0x0, &leftSwitchable
   \   000024   0224         JEQ     ??Exit_2
   \   000026   9253....     ADD.W   #0x1, &stateCounter
    166            }
    167            
    168            if (stateCounter == 1){
   \                     ??Exit_2:
   \   00002A   9293....     CMP.W   #0x1, &stateCounter
   \   00002E   2120         JNE     ??Exit_0
    169              if(enteringDirection == MOVING_LEFT){
   \   000030   F2904C00.... CMP.B   #0x4c, &enteringDirection
   \   000036   0D20         JNE     ??Exit_3
    170                if(Drive_Path(-STRAIGHT_RIGHT,STRAIGHT_LEFT,75)) stateCounter++;
   \   000038   3E404B00     MOV.W   #0x4b, R14
   \   00003C   3D40803E     MOV.W   #0x3e80, R13
   \   000040   3C40E0B1     MOV.W   #0xb1e0, R12
   \   000044   ........     CALLA   #Drive_Path
   \   000048   0C93         CMP.W   #0x0, R12
   \   00004A   1324         JEQ     ??Exit_0
   \   00004C   9253....     ADD.W   #0x1, &stateCounter
   \   000050   103C         JMP     ??Exit_0
    171              }
    172              else if (enteringDirection == MOVING_RIGHT){
   \                     ??Exit_3:
   \   000052   F2905200.... CMP.B   #0x52, &enteringDirection
   \   000058   0C20         JNE     ??Exit_0
    173                if(Drive_Path(STRAIGHT_RIGHT,-STRAIGHT_LEFT,75)) stateCounter++;
   \   00005A   3E404B00     MOV.W   #0x4b, R14
   \   00005E   3D4080C1     MOV.W   #0xc180, R13
   \   000062   3C40204E     MOV.W   #0x4e20, R12
   \   000066   ........     CALLA   #Drive_Path
   \   00006A   0C93         CMP.W   #0x0, R12
   \   00006C   0224         JEQ     ??Exit_0
   \   00006E   9253....     ADD.W   #0x1, &stateCounter
    174              }
    175            }
    176            
    177            if (stateCounter == 2){
   \                     ??Exit_0:
   \   000072   A293....     CMP.W   #0x2, &stateCounter
   \   000076   1920         JNE     ??Exit_1
    178              if(enteringDirection == MOVING_LEFT){
   \   000078   F2904C00.... CMP.B   #0x4c, &enteringDirection
   \   00007E   0920         JNE     ??Exit_4
    179                if(LockMotors(1,-1)) stateCounter++;
   \   000080   3D43         MOV.W   #0xffff, R13
   \   000082   1C43         MOV.W   #0x1, R12
   \   000084   ........     CALLA   #LockMotors
   \   000088   0C93         CMP.W   #0x0, R12
   \   00008A   0F24         JEQ     ??Exit_1
   \   00008C   9253....     ADD.W   #0x1, &stateCounter
   \   000090   0C3C         JMP     ??Exit_1
    180              }
    181              else if (enteringDirection == MOVING_RIGHT){
   \                     ??Exit_4:
   \   000092   F2905200.... CMP.B   #0x52, &enteringDirection
   \   000098   0820         JNE     ??Exit_1
    182                if(LockMotors(-1,1)) stateCounter++;
   \   00009A   1D43         MOV.W   #0x1, R13
   \   00009C   3C43         MOV.W   #0xffff, R12
   \   00009E   ........     CALLA   #LockMotors
   \   0000A2   0C93         CMP.W   #0x0, R12
   \   0000A4   0224         JEQ     ??Exit_1
   \   0000A6   9253....     ADD.W   #0x1, &stateCounter
    183              }
    184            }
    185            
    186            if (stateCounter == 3){
   \                     ??Exit_1:
   \   0000AA   B2900300.... CMP.W   #0x3, &stateCounter
   \   0000B0   0C20         JNE     ??Exit_5
    187              if(Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT,150)) stateCounter++;
   \   0000B2   3E409600     MOV.W   #0x96, R14
   \   0000B6   3D40803E     MOV.W   #0x3e80, R13
   \   0000BA   3C40204E     MOV.W   #0x4e20, R12
   \   0000BE   ........     CALLA   #Drive_Path
   \   0000C2   0C93         CMP.W   #0x0, R12
   \   0000C4   0224         JEQ     ??Exit_5
   \   0000C6   9253....     ADD.W   #0x1, &stateCounter
    188            }
    189           
    190            if (stateCounter == 4){
   \                     ??Exit_5:
   \   0000CA   A292....     CMP.W   #0x4, &stateCounter
   \   0000CE   0920         JNE     ??Exit_6
    191              if(LockMotors(-1,-1)) stateCounter++;
   \   0000D0   3D43         MOV.W   #0xffff, R13
   \   0000D2   3C43         MOV.W   #0xffff, R12
   \   0000D4   ........     CALLA   #LockMotors
   \   0000D8   0C93         CMP.W   #0x0, R12
   \   0000DA   1724         JEQ     ??Exit_7
   \   0000DC   9253....     ADD.W   #0x1, &stateCounter
   \   0000E0   1001         RETA
    192            }
    193            
    194            else if (stateCounter==5) {
   \                     ??Exit_6:
   \   0000E2   B2900500.... CMP.W   #0x5, &stateCounter
   \   0000E8   1020         JNE     ??Exit_7
    195              ShutoffMotors();
   \   0000EA   ........     CALLA   #ShutoffMotors
    196              stateCounter = 0 ;
   \   0000EE   8243....     MOV.W   #0x0, &stateCounter
    197              state = END;    
   \   0000F2   F2404500.... MOV.B   #0x45, &state
    198              stopwatch_seconds = 0;
   \   0000F8   8243....     MOV.W   #0x0, &stopwatch_seconds
    199              cycle_count = 0;
   \   0000FC   8243....     MOV.W   #0x0, &cycle_count
    200              nextState = END;
   \   000100   F2404500.... MOV.B   #0x45, &nextState
    201              EmitterOff();
   \   000106   ........     CALLA   #EmitterOff
    202            }
    203          }
   \                     ??Exit_7:
   \   00010A   1001         RETA
    204          
    205          
    206          // delays for a specified time and then switches state to global nextState
    207          // make sure nextState is set to desired vlaue before the end of delay

   \                                 In  segment CODE, align 2
    208          int delay(int seconds,int cycles){
   \                     delay:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
    209            if(stopwatch_seconds == 0 && cycle_count<=1) {
   \   000006   8293....     CMP.W   #0x0, &stopwatch_seconds
   \   00000A   0B20         JNE     ??delay_1
   \   00000C   A293....     CMP.W   #0x2, &cycle_count
   \   000010   082C         JC      ??delay_1
    210              strcpy(display_line[0], "WAITING...");
   \   000012   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   000016   3C40....     MOV.W   #display_line, R12
   \   00001A   ........     CALLA   #strcpy
    211              display_changed = 1;
   \   00001E   D243....     MOV.B   #0x1, &display_changed
    212            }
    213            if(stopwatch_seconds>=seconds && cycle_count >= cycles) {
   \                     ??delay_1:
   \   000022   829A....     CMP.W   R10, &stopwatch_seconds
   \   000026   0928         JNC     ??delay_2
   \   000028   829B....     CMP.W   R11, &cycle_count
   \   00002C   0628         JNC     ??delay_2
    214              stopwatch_seconds = 0;
   \   00002E   8243....     MOV.W   #0x0, &stopwatch_seconds
    215              cycle_count = 0;
   \   000032   8243....     MOV.W   #0x0, &cycle_count
    216              return 1;
   \   000036   1C43         MOV.W   #0x1, R12
   \   000038   013C         JMP     ??delay_0
    217            }
    218            else return 0;
   \                     ??delay_2:
   \   00003A   0C43         MOV.W   #0x0, R12
   \                     ??delay_0:
   \   00003C   1A17         POPM.W  #0x2, R11
   \   00003E   1001         RETA
    219          }
    220          
    221          
    222          

   \                                 In  segment CODE, align 2
    223          void StateMachine(void){
   \                     StateMachine:
    224            switch(state){
   \   000000   5E42....     MOV.B   &state, R14
   \   000004   7E804300     SUB.B   #0x43, R14
   \   000008   1424         JEQ     ??StateMachine_3
   \   00000A   6E83         SUB.B   #0x2, R14
   \   00000C   3724         JEQ     ??StateMachine_4
   \   00000E   7E800700     SUB.B   #0x7, R14
   \   000012   2E24         JEQ     ??StateMachine_5
   \   000014   7E800700     SUB.B   #0x7, R14
   \   000018   1524         JEQ     ??StateMachine_6
   \   00001A   5E83         SUB.B   #0x1, R14
   \   00001C   2624         JEQ     ??StateMachine_7
   \   00001E   7E800300     SUB.B   #0x3, R14
   \   000022   1524         JEQ     ??StateMachine_8
   \   000024   7E800E00     SUB.B   #0xe, R14
   \   000028   2624         JEQ     ??StateMachine_9
   \   00002A   7E800E00     SUB.B   #0xe, R14
   \   00002E   1A24         JEQ     ??StateMachine_10
   \   000030   1001         RETA
    225              case (CALIBRATE):
    226                calibrate();
   \                     ??StateMachine_3:
   \   000032   ........     CALLA   #calibrate
    227                if(calibrationMode>=2) state=START;
   \   000036   A293....     CMP.W   #0x2, &calibrationMode
   \   00003A   2828         JNC     ??StateMachine_0
   \   00003C   F2405300.... MOV.B   #0x53, &state
    228                break;
   \   000042   1001         RETA
    229              case (START):
    230                //strcpy(display_line[0], "WAITING...");
    231                //display_changed = 1;
    232                stopwatch_seconds = 0;
   \                     ??StateMachine_6:
   \   000044   8243....     MOV.W   #0x0, &stopwatch_seconds
    233                cycle_count = 0;
   \   000048   8243....     MOV.W   #0x0, &cycle_count
    234                break;
   \   00004C   1001         RETA
    235              case (WAIT):
    236                if (delay(delayTime,0)) state = nextState;
   \                     ??StateMachine_8:
   \   00004E   0D43         MOV.W   #0x0, R13
   \   000050   1C42....     MOV.W   &delayTime, R12
   \   000054   ........     CALLA   #delay
   \   000058   0C93         CMP.W   #0x0, R12
   \   00005A   1824         JEQ     ??StateMachine_0
   \   00005C   D242........ MOV.B   &nextState, &state
    237                break;
   \   000062   1001         RETA
    238              case (STRAIGHT):
    239                Straight();
   \                     ??StateMachine_10:
   \   000064   ........     CALLA   #Straight
    240                break;
   \   000068   1001         RETA
    241              case (TURN):
    242                Turn();
   \                     ??StateMachine_7:
   \   00006A   ........     CALLA   #Turn
    243                break;
   \   00006E   1001         RETA
    244              case (LINEFOLLOW):
    245                LineFollow();
   \                     ??StateMachine_5:
   \   000070   ........     CALLA   #LineFollow
    246                break;
   \   000074   1001         RETA
    247              case (EXIT):
    248                Exit();
   \                     ??StateMachine_9:
   \   000076   ........     CALLA   #Exit
    249                break;
   \   00007A   1001         RETA
    250              case (END):
    251                strcpy(display_line[0], "  STOPPED ");
   \                     ??StateMachine_4:
   \   00007C   3D40....     MOV.W   #`?<Constant "  STOPPED ">`, R13
   \   000080   3C40....     MOV.W   #display_line, R12
   \   000084   ........     CALLA   #strcpy
    252                display_changed = 1;
   \   000088   D243....     MOV.B   #0x1, &display_changed
    253                break;
    254              default: break;  
    255            }
    256          }
   \                     ??StateMachine_0:
   \   00008C   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for state>`:
   \   000000   43           DC8 67

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for nextState>`:
   \   000000   73           DC8 115

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for delayTime>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for enteringDirection>`:
   \   000000   4E           DC8 78

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "INTERCEPT ">`:
   \   000000   494E54455243 DC8 "INTERCEPT "
   \            4550542000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  TURNING ">`:
   \   000000   20205455524E DC8 "  TURNING "
   \            494E472000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " CIRCLING ">`:
   \   000000   20434952434C DC8 " CIRCLING "
   \            494E472000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  EXITING ">`:
   \   000000   202045584954 DC8 "  EXITING "
   \            494E472000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WAITING...">`:
   \   000000   57414954494E DC8 "WAITING..."
   \            472E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  STOPPED ">`:
   \   000000   202053544F50 DC8 "  STOPPED "
   \            5045442000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Exit
        4   -> Drive_Path
        4   -> EmitterOff
        4   -> EmitterOn
        4   -> LockMotors
        4   -> ShutoffMotors
        4   -> strcpy
      8   LineFollow
        8   -> Drive_Path
        8   -> EmitterOff
        8   -> EmitterOn
        8   -> ShutoffMotors
        8   -> delay
        8   -> strcpy
        8 ?DivMod16u
      4   StateMachine
        4   -> Exit
        4   -> LineFollow
        4   -> Straight
        4   -> Turn
        4   -> calibrate
        4   -> delay
        4   -> strcpy
      4   Straight
        4   -> Drive_Path
        4   -> EmitterOff
        4   -> EmitterOn
        4   -> LockMotors
        4   -> ShutoffMotors
        4   -> strcpy
        4 ?DivMod16u
      4   Turn
        4   -> Drive_Path
        4   -> EmitterOff
        4   -> EmitterOn
        4   -> ShutoffMotors
        4   -> strcpy
        4 ?DivMod16u
      8   delay
        8   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "  EXITING ">
      11  ?<Constant "  STOPPED ">
      11  ?<Constant "  TURNING ">
      11  ?<Constant " CIRCLING ">
      11  ?<Constant "INTERCEPT ">
      11  ?<Constant "WAITING...">
       2  ?<Initializer for delayTime>
       1  ?<Initializer for enteringDirection>
       1  ?<Initializer for nextState>
       1  ?<Initializer for state>
     268  Exit
     430  LineFollow
     142  StateMachine
     194  Straight
     272  Turn
      64  delay
       2  delayTime
       1  enteringDirection
       1  nextState
       1  state
       2  stateCounter

 
 1 370 bytes in segment CODE
    77 bytes in segment DATA16_C
     5 bytes in segment DATA16_I
     5 bytes in segment DATA16_ID
     2 bytes in segment DATA16_Z
 
 1 370 bytes of CODE  memory
    82 bytes of CONST memory
     7 bytes of DATA  memory

Errors: none
Warnings: none
