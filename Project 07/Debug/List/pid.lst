###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          04/Mar/2022  15:30:20
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 07\pid.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW89CA.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 07\pid.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 07\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 07\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 07\Debug\List\pid.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 07\Debug\Obj\pid.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 07\pid.c
      1          #include "pid.h"
      2          #include "msp430.h"
      3          

   \                                 In  segment CODE, align 2
      4          int GetOutput(PIDController* pidController, int setPoint, int current){
   \                     GetOutput:
   \   000000   7B15         PUSHM.W #0x8, R11
   \   000002   084C         MOV.W   R12, R8
   \   000004   094D         MOV.W   R13, R9
   \   000006   064E         MOV.W   R14, R6
      5            pidController->error = setPoint-current;
   \   000008   0F49         MOV.W   R9, R15
   \   00000A   0F86         SUB.W   R6, R15
   \   00000C   884F0C00     MOV.W   R15, 0xc(R8)
      6            int integral = pidController->lastIntegral+pidController->error;
   \   000010   17481000     MOV.W   0x10(R8), R7
   \   000014   17580C00     ADD.W   0xc(R8), R7
      7            int derivative = pidController->error-pidController->lastError;
   \   000018   14480C00     MOV.W   0xc(R8), R4
   \   00001C   14880E00     SUB.W   0xe(R8), R4
      8            pidController->lastError = pidController->error;
   \   000020   98480C000E00 MOV.W   0xc(R8), 0xe(R8)
      9            pidController->lastIntegral = integral;
   \   000026   88471000     MOV.W   R7, 0x10(R8)
     10            int errorTerm = pidController->error*pidController->kP;
                                   ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   00002A   1C480C00     MOV.W   0xc(R8), R12
   \   00002E   0D4C         MOV.W   R12, R13
   \   000030   0D5D         RLA.W   R13
   \   000032   0D7D         SUBC.W  R13, R13
   \   000034   3DE3         XOR.W   #0xffff, R13
   \   000036   ........     CALLA   #_Cast32sto32f
   \   00003A   2E48         MOV.W   @R8, R14
   \   00003C   1F480200     MOV.W   0x2(R8), R15
   \   000040   ........     CALLA   #_Mul32f
   \   000044   ........     CALLA   #_Cast32fto32s
     11            return (int)(errorTerm + derivative*pidController->kD + integral*pidController->kI);
   \   000048   0D4C         MOV.W   R12, R13
   \   00004A   0D5D         RLA.W   R13
   \   00004C   0D7D         SUBC.W  R13, R13
   \   00004E   3DE3         XOR.W   #0xffff, R13
   \   000050   ........     CALLA   #_Cast32sto32f
   \   000054   0A4C         MOV.W   R12, R10
   \   000056   0B4D         MOV.W   R13, R11
   \   000058   0C44         MOV.W   R4, R12
   \   00005A   0D4C         MOV.W   R12, R13
   \   00005C   0D5D         RLA.W   R13
   \   00005E   0D7D         SUBC.W  R13, R13
   \   000060   3DE3         XOR.W   #0xffff, R13
   \   000062   ........     CALLA   #_Cast32sto32f
   \   000066   1E480400     MOV.W   0x4(R8), R14
   \   00006A   1F480600     MOV.W   0x6(R8), R15
   \   00006E   ........     CALLA   #_Mul32f
   \   000072   0E4A         MOV.W   R10, R14
   \   000074   0F4B         MOV.W   R11, R15
   \   000076   ........     CALLA   #_Add32f
   \   00007A   0A4C         MOV.W   R12, R10
   \   00007C   0B4D         MOV.W   R13, R11
   \   00007E   0C47         MOV.W   R7, R12
   \   000080   0D4C         MOV.W   R12, R13
   \   000082   0D5D         RLA.W   R13
   \   000084   0D7D         SUBC.W  R13, R13
   \   000086   3DE3         XOR.W   #0xffff, R13
   \   000088   ........     CALLA   #_Cast32sto32f
   \   00008C   1E480800     MOV.W   0x8(R8), R14
   \   000090   1F480A00     MOV.W   0xa(R8), R15
   \   000094   ........     CALLA   #_Mul32f
   \   000098   0E4A         MOV.W   R10, R14
   \   00009A   0F4B         MOV.W   R11, R15
   \   00009C   ........     CALLA   #_Add32f
   \   0000A0   ........     CALLA   #_Cast32fto32s
   \   0000A4   7417         POPM.W  #0x8, R11
   \   0000A6   1001         RETA
     12          }
     13          

   \                                 In  segment CODE, align 2
     14          void ClearController(PIDController* pidController){
   \                     ClearController:
     15            pidController->error = 0;
   \   000000   8C430C00     MOV.W   #0x0, 0xc(R12)
     16            pidController->lastError = 0;
   \   000004   8C430E00     MOV.W   #0x0, 0xe(R12)
     17            pidController->lastIntegral = 0;
   \   000008   8C431000     MOV.W   #0x0, 0x10(R12)
     18          }
   \   00000C   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   ClearController
     20   GetOutput
       20 _Add32f
       20 _Cast32fto32s
       20 _Cast32sto32f
       20 _Mul32f


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ClearController
     168  GetOutput

 
 182 bytes in segment CODE
 
 182 bytes of CODE memory

Errors: none
Warnings: 1
