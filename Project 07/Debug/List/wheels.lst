###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          05/Mar/2022  12:09:11
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 07\wheels.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWC666.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 07\wheels.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 07\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 07\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 07\Debug\List\wheels.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 07\Debug\Obj\wheels.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 07\wheels.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x240
   \   union <unnamed> _A_PCIN_L
   \                     _A_PCIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c4
   \   union <unnamed> _A_TB1CCTL1_L
   \                     _A_TB1CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c6
   \   union <unnamed> _A_TB1CCTL2_L
   \                     _A_TB1CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d0
   \   union <unnamed> _A_TB1R_L
   \                     _A_TB1R_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d4
   \   union <unnamed> _A_TB1CCR1_L
   \                     _A_TB1CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d6
   \   union <unnamed> _A_TB1CCR2_L
   \                     _A_TB1CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
      2          #include "ports.h"
      3          #include "wheels.h"
      4          #include "adc.h"
      5          #include "timers.h"
      6          #include "detectors.h"
      7          #include "pid.h"
      8          #include <string.h>
      9          
     10          extern volatile unsigned int cycle_count;
     11          extern volatile unsigned int stopwatch_milliseconds;
     12          extern volatile unsigned int stopwatch_seconds;
     13          extern volatile unsigned char display_changed;
     14          extern char display_line[4][11];

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          volatile unsigned int wheel_periods;
   \                     wheel_periods:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     16          volatile char state = START;
   \                     state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for state>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile int stateCounter;
   \                     stateCounter:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     18          volatile char nextState = STRAIGHT;
   \                     nextState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for nextState>`
     19          extern volatile unsigned int Time_Sequence;
     20          extern volatile unsigned int Last_Time_Sequence;
     21          extern volatile unsigned int time_change;

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     22          volatile unsigned int delayTime = 1;
   \                     delayTime:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for delayTime>`
     23          extern volatile unsigned int ADC_Left_Detect,ADC_Right_Detect;

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     24          volatile unsigned int rightSwitchable=1, leftSwitchable=1;
   \                     rightSwitchable:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for rightSwitchable>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
   \                     leftSwitchable:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for leftSwitchable>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          unsigned int temp;
   \                     temp:
   \   000000                DS8 2
     26          extern char movingDirection;

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     27          char enteringDirection = NOT_MOVING;
   \                     enteringDirection:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for enteringDirection>`
     28          extern int leftVals[MEMORY_LEN];
     29          extern int rightVals[MEMORY_LEN];

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     30          PIDController rightController = {
   \                     rightController:
   \   000000                DS8 18
   \   000012                REQUIRE `?<Initializer for rightController>`
     31            .kP = 15,
     32            .kD = 0,
     33            .kI = 0,
     34            .error = 0,
     35            .lastError = 0,
     36            .lastIntegral = 0
     37          };

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     38          PIDController leftController = {
   \                     leftController:
   \   000000                DS8 18
   \   000012                REQUIRE `?<Initializer for leftController>`
     39            .kP = 15,
     40            .kD = 0,
     41            .kI = 0,
     42            .error = 0,
     43            .lastError = 0,
     44            .lastIntegral = 0
     45          };
     46          
     47          

   \                                 In  segment CODE, align 2
     48          void ShutoffMotors(void){
   \                     ShutoffMotors:
     49            ShutoffRight();
   \   000000   ........     CALLA   #ShutoffRight
     50            ShutoffLeft();
   \   000004   ........     CALLA   #ShutoffLeft
     51          }
   \   000008   1001         RETA
     52          

   \                                 In  segment CODE, align 2
     53          void ShutoffRight(void){
   \                     ShutoffRight:
     54            RIGHT_FORWARD_SPEED = RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000000   0F43         MOV.W   #0x0, R15
   \   000002   824F5804     MOV.W   R15, &0x458
   \   000006   824F5404     MOV.W   R15, &0x454
     55            rightSwitchable = 0;
   \   00000A   8243....     MOV.W   #0x0, &rightSwitchable
     56            TB1CCTL1 &= ~CCIFG;
   \   00000E   92C3C403     BIC.W   #0x1, &0x3c4
     57            TB1CCR1 = TB1R + TB1CCR1_INTERVAL;
   \   000012   1F42D003     MOV.W   &0x3d0, R15
   \   000016   3F50A861     ADD.W   #0x61a8, R15
   \   00001A   824FD403     MOV.W   R15, &0x3d4
     58            TB1CCTL1 |= CCIE;   
   \   00001E   B2D01000C403 BIS.W   #0x10, &0x3c4
     59          }
   \   000024   1001         RETA
   \   000026                REQUIRE _A_TB3CCR1_L
   \   000026                REQUIRE _A_TB3CCR3_L
   \   000026                REQUIRE _A_TB1CCTL1_L
   \   000026                REQUIRE _A_TB1CCR1_L
   \   000026                REQUIRE _A_TB1R_L
     60          

   \                                 In  segment CODE, align 2
     61          void ShutoffLeft(void){
   \                     ShutoffLeft:
     62            LEFT_FORWARD_SPEED = LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   000000   0F43         MOV.W   #0x0, R15
   \   000002   824F5A04     MOV.W   R15, &0x45a
   \   000006   824F5604     MOV.W   R15, &0x456
     63            leftSwitchable = 0;
   \   00000A   8243....     MOV.W   #0x0, &leftSwitchable
     64            TB1CCTL2 &= ~CCIFG;
   \   00000E   92C3C603     BIC.W   #0x1, &0x3c6
     65            TB1CCR2 = TB1R + TB1CCR2_INTERVAL;
   \   000012   1F42D003     MOV.W   &0x3d0, R15
   \   000016   3F50A861     ADD.W   #0x61a8, R15
   \   00001A   824FD603     MOV.W   R15, &0x3d6
     66            TB1CCTL2 |= CCIE; 
   \   00001E   B2D01000C603 BIS.W   #0x10, &0x3c6
     67          }
   \   000024   1001         RETA
   \   000026                REQUIRE _A_TB3CCR2_L
   \   000026                REQUIRE _A_TB3CCR4_L
   \   000026                REQUIRE _A_TB1CCTL2_L
   \   000026                REQUIRE _A_TB1CCR2_L
   \   000026                REQUIRE _A_TB1R_L
     68          

   \                                 In  segment CODE, align 2
     69          void MotorSafety(void){
   \                     MotorSafety:
     70            
     71            if ((((P6IN & R_FORWARD) && (P6IN & R_REVERSE)) || ((P6IN & L_FORWARD) && (P6IN & L_REVERSE_2355)))
     72                ||
     73                  ((RIGHT_FORWARD_SPEED!=0 && RIGHT_REVERSE_SPEED!=0) || (LEFT_FORWARD_SPEED!=0 && LEFT_REVERSE_SPEED!=0))){
   \   000000   D2B34102     BIT.B   #0x1, &0x241
   \   000004   0328         JNC     ??MotorSafety_0
   \   000006   E2B24102     BIT.B   #0x4, &0x241
   \   00000A   122C         JC      ??MotorSafety_1
   \                     ??MotorSafety_0:
   \   00000C   E2B34102     BIT.B   #0x2, &0x241
   \   000010   0328         JNC     ??MotorSafety_2
   \   000012   F2B24102     BIT.B   #0x8, &0x241
   \   000016   0C2C         JC      ??MotorSafety_1
   \                     ??MotorSafety_2:
   \   000018   82935404     CMP.W   #0x0, &0x454
   \   00001C   0324         JEQ     ??MotorSafety_3
   \   00001E   82935804     CMP.W   #0x0, &0x458
   \   000022   0620         JNE     ??MotorSafety_1
   \                     ??MotorSafety_3:
   \   000024   82935604     CMP.W   #0x0, &0x456
   \   000028   0824         JEQ     ??MotorSafety_4
   \   00002A   82935A04     CMP.W   #0x0, &0x45a
   \   00002E   0524         JEQ     ??MotorSafety_4
     74              ShutoffMotors();
   \                     ??MotorSafety_1:
   \   000030   ........     CALLA   #ShutoffMotors
     75              P1OUT |= RED_LED;
   \   000034   D2D30202     BIS.B   #0x1, &0x202
   \   000038   1001         RETA
     76            }
     77            else{
     78              P1OUT &= ~RED_LED;
   \                     ??MotorSafety_4:
   \   00003A   D2C30202     BIC.B   #0x1, &0x202
     79            }
     80          }
   \   00003E   1001         RETA
   \   000040                REQUIRE _A_PCIN_L
   \   000040                REQUIRE _A_TB3CCR1_L
   \   000040                REQUIRE _A_TB3CCR3_L
   \   000040                REQUIRE _A_TB3CCR2_L
   \   000040                REQUIRE _A_TB3CCR4_L
   \   000040                REQUIRE _A_PAOUT_L
     81          

   \                                 In  segment CODE, align 2
     82          int RunRightMotor(int val){
   \                     RunRightMotor:
   \   000000   0E4C         MOV.W   R12, R14
     83            if(RIGHT_REVERSE_SPEED>0 && val>0 || RIGHT_FORWARD_SPEED>0 && val<0){
   \   000002   82935804     CMP.W   #0x0, &0x458
   \   000006   0224         JEQ     ??RunRightMotor_0
   \   000008   1E93         CMP.W   #0x1, R14
   \   00000A   0534         JGE     ??RunRightMotor_1
   \                     ??RunRightMotor_0:
   \   00000C   82935404     CMP.W   #0x0, &0x454
   \   000010   0424         JEQ     ??RunRightMotor_2
   \   000012   0E93         CMP.W   #0x0, R14
   \   000014   0234         JGE     ??RunRightMotor_2
     84              ShutoffRight();
   \                     ??RunRightMotor_1:
   \   000016   ........     CALLA   #ShutoffRight
     85            }
     86            if (val>0){
   \                     ??RunRightMotor_2:
   \   00001A   1E93         CMP.W   #0x1, R14
   \   00001C   0B38         JL      ??RunRightMotor_3
     87              RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   00001E   82435804     MOV.W   #0x0, &0x458
     88              if(rightSwitchable) RIGHT_FORWARD_SPEED = val;
   \   000022   8293....     CMP.W   #0x0, &rightSwitchable
   \   000026   0224         JEQ     ??RunRightMotor_4
   \   000028   824E5404     MOV.W   R14, &0x454
     89              return P6IN&R_FORWARD;
   \                     ??RunRightMotor_4:
   \   00002C   5C424102     MOV.B   &0x241, R12
   \   000030   5CF3         AND.B   #0x1, R12
   \   000032   1001         RETA
     90            }
     91            else if (val==0){
   \                     ??RunRightMotor_3:
   \   000034   0E93         CMP.W   #0x0, R14
   \   000036   0520         JNE     ??RunRightMotor_5
     92              ShutoffRight();
   \   000038   ........     CALLA   #ShutoffRight
     93              return rightSwitchable;
   \   00003C   1C42....     MOV.W   &rightSwitchable, R12
   \   000040   1001         RETA
     94            }
     95            else{
     96              RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \                     ??RunRightMotor_5:
   \   000042   82435404     MOV.W   #0x0, &0x454
     97              if(rightSwitchable) {
   \   000046   8293....     CMP.W   #0x0, &rightSwitchable
   \   00004A   0524         JEQ     ??RunRightMotor_6
     98                RIGHT_REVERSE_SPEED = -val; 
   \   00004C   0F4E         MOV.W   R14, R15
   \   00004E   3FE3         XOR.W   #0xffff, R15
   \   000050   1F53         ADD.W   #0x1, R15
   \   000052   824F5804     MOV.W   R15, &0x458
     99              }
    100              return P6IN&R_REVERSE;
   \                     ??RunRightMotor_6:
   \   000056   5C424102     MOV.B   &0x241, R12
   \   00005A   4C4C         MOV.B   R12, R12
   \   00005C   2CF2         AND.W   #0x4, R12
   \   00005E   1001         RETA
   \   000060                REQUIRE _A_TB3CCR3_L
   \   000060                REQUIRE _A_TB3CCR1_L
   \   000060                REQUIRE _A_PCIN_L
    101            }
    102            //MotorSafety();
    103          }
    104          

   \                                 In  segment CODE, align 2
    105          int RunLeftMotor( int val){
   \                     RunLeftMotor:
   \   000000   0E4C         MOV.W   R12, R14
    106            if(LEFT_REVERSE_SPEED>0 && val>0 || LEFT_FORWARD_SPEED>0 && val<0){
   \   000002   82935A04     CMP.W   #0x0, &0x45a
   \   000006   0224         JEQ     ??RunLeftMotor_0
   \   000008   1E93         CMP.W   #0x1, R14
   \   00000A   0534         JGE     ??RunLeftMotor_1
   \                     ??RunLeftMotor_0:
   \   00000C   82935604     CMP.W   #0x0, &0x456
   \   000010   0424         JEQ     ??RunLeftMotor_2
   \   000012   0E93         CMP.W   #0x0, R14
   \   000014   0234         JGE     ??RunLeftMotor_2
    107              ShutoffLeft();
   \                     ??RunLeftMotor_1:
   \   000016   ........     CALLA   #ShutoffLeft
    108            }
    109            if (val>0){
   \                     ??RunLeftMotor_2:
   \   00001A   1E93         CMP.W   #0x1, R14
   \   00001C   0C38         JL      ??RunLeftMotor_3
    110              LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   00001E   82435A04     MOV.W   #0x0, &0x45a
    111              if(leftSwitchable) {
   \   000022   8293....     CMP.W   #0x0, &leftSwitchable
   \   000026   0224         JEQ     ??RunLeftMotor_4
    112                LEFT_FORWARD_SPEED = val;
   \   000028   824E5604     MOV.W   R14, &0x456
    113              }
    114              return P6IN&L_FORWARD;
   \                     ??RunLeftMotor_4:
   \   00002C   5C424102     MOV.B   &0x241, R12
   \   000030   4C4C         MOV.B   R12, R12
   \   000032   2CF3         AND.W   #0x2, R12
   \   000034   1001         RETA
    115            }
    116            else if (val==0){
   \                     ??RunLeftMotor_3:
   \   000036   0E93         CMP.W   #0x0, R14
   \   000038   0520         JNE     ??RunLeftMotor_5
    117              ShutoffLeft();
   \   00003A   ........     CALLA   #ShutoffLeft
    118              return leftSwitchable;
   \   00003E   1C42....     MOV.W   &leftSwitchable, R12
   \   000042   1001         RETA
    119            }
    120            else{
    121              LEFT_FORWARD_SPEED = WHEEL_OFF;
   \                     ??RunLeftMotor_5:
   \   000044   82435604     MOV.W   #0x0, &0x456
    122              if(leftSwitchable) {
   \   000048   8293....     CMP.W   #0x0, &leftSwitchable
   \   00004C   0524         JEQ     ??RunLeftMotor_6
    123                LEFT_REVERSE_SPEED = -val;
   \   00004E   0F4E         MOV.W   R14, R15
   \   000050   3FE3         XOR.W   #0xffff, R15
   \   000052   1F53         ADD.W   #0x1, R15
   \   000054   824F5A04     MOV.W   R15, &0x45a
    124              }
    125              return P6IN&L_REVERSE_2355;
   \                     ??RunLeftMotor_6:
   \   000058   5C424102     MOV.B   &0x241, R12
   \   00005C   4C4C         MOV.B   R12, R12
   \   00005E   3CF2         AND.W   #0x8, R12
   \   000060   1001         RETA
   \   000062                REQUIRE _A_TB3CCR4_L
   \   000062                REQUIRE _A_TB3CCR2_L
   \   000062                REQUIRE _A_PCIN_L
    126            }
    127            //MotorSafety();
    128          }
    129          

   \                                 In  segment CODE, align 2
    130          int LockMotors(int polR,int polL){
   \                     LockMotors:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
    131            return (Drive_Path(polR*STRAIGHT_RIGHT,polL*STRAIGHT_LEFT, 5));
   \   000006   3E400500     MOV.W   #0x5, R14
   \   00000A   0D4B         MOV.W   R11, R13
   \   00000C   5D0E         RLAM.W  #0x4, R13
   \   00000E   5D0A         RLAM.W  #0x3, R13
   \   000010   0F4D         MOV.W   R13, R15
   \   000012   5D06         RLAM.W  #0x2, R13
   \   000014   0F5D         ADD.W   R13, R15
   \   000016   0D5D         RLA.W   R13
   \   000018   0F5D         ADD.W   R13, R15
   \   00001A   0D5D         RLA.W   R13
   \   00001C   0F5D         ADD.W   R13, R15
   \   00001E   0D5D         RLA.W   R13
   \   000020   0F5D         ADD.W   R13, R15
   \   000022   0D5D         RLA.W   R13
   \   000024   0D5F         ADD.W   R15, R13
   \   000026   0C4A         MOV.W   R10, R12
   \   000028   5C0E         RLAM.W  #0x4, R12
   \   00002A   5C02         RLAM.W  #0x1, R12
   \   00002C   0F4C         MOV.W   R12, R15
   \   00002E   5C0E         RLAM.W  #0x4, R12
   \   000030   0F5C         ADD.W   R12, R15
   \   000032   0C5C         RLA.W   R12
   \   000034   0F5C         ADD.W   R12, R15
   \   000036   0C5C         RLA.W   R12
   \   000038   0F5C         ADD.W   R12, R15
   \   00003A   5C0A         RLAM.W  #0x3, R12
   \   00003C   0C5F         ADD.W   R15, R12
   \   00003E   ........     CALLA   #Drive_Path
   \   000042   1A17         POPM.W  #0x2, R11
   \   000044   1001         RETA
    132          }
    133          

   \                                 In  segment CODE, align 2
    134          int Update_Ticks(int max_tick){
   \                     Update_Ticks:
   \   000000   0F4C         MOV.W   R12, R15
    135            if(++wheel_periods>max_tick){
   \   000002   1E42....     MOV.W   &wheel_periods, R14
   \   000006   1E53         ADD.W   #0x1, R14
   \   000008   824E....     MOV.W   R14, &wheel_periods
   \   00000C   0F9E         CMP.W   R14, R15
   \   00000E   042C         JC      ??Update_Ticks_0
    136              wheel_periods=0; 
   \   000010   8243....     MOV.W   #0x0, &wheel_periods
    137              return 1;
   \   000014   1C43         MOV.W   #0x1, R12
   \   000016   1001         RETA
    138            }
    139            return 0;
   \                     ??Update_Ticks_0:
   \   000018   0C43         MOV.W   #0x0, R12
   \   00001A   1001         RETA
    140          }
    141          

   \                                 In  segment CODE, align 2
    142          int Drive_Path(int speedR,int speedL, unsigned int ticksDuration){  
   \                     Drive_Path:
   \   000000   5B15         PUSHM.W #0x6, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   084E         MOV.W   R14, R8
    143            int successR = RunRightMotor(speedR); 
   \   000008   0C4A         MOV.W   R10, R12
   \   00000A   ........     CALLA   #RunRightMotor
   \   00000E   094C         MOV.W   R12, R9
    144            int successL = RunLeftMotor(speedL);
   \   000010   0C4B         MOV.W   R11, R12
   \   000012   ........     CALLA   #RunLeftMotor
   \   000016   064C         MOV.W   R12, R6
    145            if(ticksDuration == 0) return successR && successL;
   \   000018   0893         CMP.W   #0x0, R8
   \   00001A   0920         JNE     ??Drive_Path_2
   \   00001C   0993         CMP.W   #0x0, R9
   \   00001E   0424         JEQ     ??Drive_Path_3
   \   000020   0693         CMP.W   #0x0, R6
   \   000022   0224         JEQ     ??Drive_Path_3
   \   000024   5C43         MOV.B   #0x1, R12
   \   000026   013C         JMP     ??Drive_Path_0
   \                     ??Drive_Path_3:
   \   000028   4C43         MOV.B   #0x0, R12
   \                     ??Drive_Path_0:
   \   00002A   4C4C         MOV.B   R12, R12
   \   00002C   133C         JMP     ??Drive_Path_1
    146            if (time_change){
   \                     ??Drive_Path_2:
   \   00002E   8293....     CMP.W   #0x0, &time_change
   \   000032   0F24         JEQ     ??Drive_Path_4
    147              time_change = 0;
   \   000034   8243....     MOV.W   #0x0, &time_change
    148              if (successR && successL && Update_Ticks(ticksDuration)){
   \   000038   0993         CMP.W   #0x0, R9
   \   00003A   0B24         JEQ     ??Drive_Path_4
   \   00003C   0693         CMP.W   #0x0, R6
   \   00003E   0924         JEQ     ??Drive_Path_4
   \   000040   0C48         MOV.W   R8, R12
   \   000042   ........     CALLA   #Update_Ticks
   \   000046   0C93         CMP.W   #0x0, R12
   \   000048   0424         JEQ     ??Drive_Path_4
    149                ShutoffMotors();
   \   00004A   ........     CALLA   #ShutoffMotors
    150                return 1;
   \   00004E   1C43         MOV.W   #0x1, R12
   \   000050   013C         JMP     ??Drive_Path_1
    151              }
    152            }
    153            return 0;
   \                     ??Drive_Path_4:
   \   000052   0C43         MOV.W   #0x0, R12
   \                     ??Drive_Path_1:
   \   000054   5617         POPM.W  #0x6, R11
   \   000056   1001         RETA
    154          }
    155          
    156          
    157          

   \                                 In  segment CODE, align 2
    158          void Straight(void){
   \                     Straight:
    159            
    160            if (stateCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &stateCounter
   \   000004   0420         JNE     ??Straight_2
    161              EmitterOn();
   \   000006   ........     CALLA   #EmitterOn
    162              stateCounter++;
   \   00000A   9253....     ADD.W   #0x1, &stateCounter
    163            }
    164            if(stateCounter==1){
   \                     ??Straight_2:
   \   00000E   9293....     CMP.W   #0x1, &stateCounter
   \   000012   2120         JNE     ??Straight_0
    165              if ((ADC_Left_Detect <= LEFT_LINE_DETECT && ADC_Right_Detect <= RIGHT_LINE_DETECT)){
   \   000014   B2900B00.... CMP.W   #0xb, &ADC_Left_Detect
   \   00001A   0C2C         JC      ??Straight_3
   \   00001C   B2900B00.... CMP.W   #0xb, &ADC_Right_Detect
   \   000022   082C         JC      ??Straight_3
    166                Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT, 0);
   \   000024   0E43         MOV.W   #0x0, R14
   \   000026   3D40803E     MOV.W   #0x3e80, R13
   \   00002A   3C40204E     MOV.W   #0x4e20, R12
   \   00002E   ........     CALLA   #Drive_Path
   \   000032   113C         JMP     ??Straight_0
    167              }
    168              else{
    169                int left = ADC_Left_Detect;
   \                     ??Straight_3:
   \   000034   1F42....     MOV.W   &ADC_Left_Detect, R15
    170                int right = ADC_Right_Detect;
   \   000038   1E42....     MOV.W   &ADC_Right_Detect, R14
    171                if(left>right) enteringDirection = MOVING_LEFT;
   \   00003C   0E9F         CMP.W   R15, R14
   \   00003E   0434         JGE     ??Straight_4
   \   000040   F2404C00.... MOV.B   #0x4c, &enteringDirection
   \   000046   053C         JMP     ??Straight_1
    172                else if(left<right) enteringDirection = MOVING_RIGHT;
   \                     ??Straight_4:
   \   000048   0F9E         CMP.W   R14, R15
   \   00004A   0334         JGE     ??Straight_1
   \   00004C   F2405200.... MOV.B   #0x52, &enteringDirection
    173                stateCounter++;
   \                     ??Straight_1:
   \   000052   9253....     ADD.W   #0x1, &stateCounter
    174              }
    175            }
    176            if(stateCounter==2){
   \                     ??Straight_0:
   \   000056   A293....     CMP.W   #0x2, &stateCounter
   \   00005A   0820         JNE     ??Straight_5
    177              if(LockMotors(-1,-1)) stateCounter=4;
   \   00005C   3D43         MOV.W   #0xffff, R13
   \   00005E   3C43         MOV.W   #0xffff, R12
   \   000060   ........     CALLA   #LockMotors
   \   000064   0C93         CMP.W   #0x0, R12
   \   000066   0224         JEQ     ??Straight_5
   \   000068   A242....     MOV.W   #0x4, &stateCounter
    178            }
    179            if (stateCounter==3){
   \                     ??Straight_5:
   \   00006C   B2900300.... CMP.W   #0x3, &stateCounter
   \   000072   1320         JNE     ??Straight_6
    180              if (((ADC_Left_Detect <= LEFT_LINE_DETECT && ADC_Right_Detect <= RIGHT_LINE_DETECT))){
   \   000074   B2900B00.... CMP.W   #0xb, &ADC_Left_Detect
   \   00007A   0C2C         JC      ??Straight_7
   \   00007C   B2900B00.... CMP.W   #0xb, &ADC_Right_Detect
   \   000082   082C         JC      ??Straight_7
    181                Drive_Path(-STRAIGHT_RIGHT/5,-STRAIGHT_LEFT/5,0);
   \   000084   0E43         MOV.W   #0x0, R14
   \   000086   3D4080F3     MOV.W   #0xf380, R13
   \   00008A   3C4060F0     MOV.W   #0xf060, R12
   \   00008E   ........     CALLA   #Drive_Path
   \   000092   1001         RETA
    182              }
    183              else stateCounter++;
   \                     ??Straight_7:
   \   000094   9253....     ADD.W   #0x1, &stateCounter
   \   000098   1001         RETA
    184            }
    185            else if (stateCounter==4) {
   \                     ??Straight_6:
   \   00009A   A292....     CMP.W   #0x4, &stateCounter
   \   00009E   2120         JNE     ??Straight_8
    186              ShutoffMotors();
   \   0000A0   ........     CALLA   #ShutoffMotors
    187              stateCounter = 0 ;
   \   0000A4   8243....     MOV.W   #0x0, &stateCounter
    188              state = TURN;    
   \   0000A8   F2405400.... MOV.B   #0x54, &state
    189              delayTime = 3;
   \   0000AE   B2400300.... MOV.W   #0x3, &delayTime
    190              stopwatch_seconds = 0;
   \   0000B4   8243....     MOV.W   #0x0, &stopwatch_seconds
    191              cycle_count = 0;
   \   0000B8   8243....     MOV.W   #0x0, &cycle_count
    192              nextState = TURN;
   \   0000BC   F2405400.... MOV.B   #0x54, &nextState
    193              EmitterOff();
   \   0000C2   ........     CALLA   #EmitterOff
    194              strcpy(display_line[1], "BLACK LINE");
   \   0000C6   3D40....     MOV.W   #`?<Constant "BLACK LINE">`, R13
   \   0000CA   3C40....     MOV.W   #display_line + 11, R12
   \   0000CE   ........     CALLA   #strcpy
    195              strcpy(display_line[2], " DETECTED ");
   \   0000D2   3D40....     MOV.W   #`?<Constant " DETECTED ">`, R13
   \   0000D6   3C40....     MOV.W   #display_line + 22, R12
   \   0000DA   ........     CALLA   #strcpy
    196              display_changed = 1;
   \   0000DE   D243....     MOV.B   #0x1, &display_changed
    197            }
    198          }
   \                     ??Straight_8:
   \   0000E2   1001         RETA
    199          

   \                                 In  segment CODE, align 2
    200          void Turn(){
   \                     Turn:
    201            if (stateCounter == 0) {
   \   000000   8293....     CMP.W   #0x0, &stateCounter
   \   000004   1220         JNE     ??Turn_0
    202              EmitterOn();
   \   000006   ........     CALLA   #EmitterOn
    203              strcpy(display_line[1], "          ");
   \   00000A   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00000E   3C40....     MOV.W   #display_line + 11, R12
   \   000012   ........     CALLA   #strcpy
    204              strcpy(display_line[2], "          ");
   \   000016   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00001A   3C40....     MOV.W   #display_line + 22, R12
   \   00001E   ........     CALLA   #strcpy
    205              display_changed = 1;
   \   000022   D243....     MOV.B   #0x1, &display_changed
    206              stateCounter=2;
   \   000026   A243....     MOV.W   #0x2, &stateCounter
    207            }
    208            /*if(stateCounter==1){if(enteringDirection == MOVING_LEFT){
    209                if(Drive_Path(STRAIGHT_RIGHT/2,-STRAIGHT_LEFT/2,20)) stateCounter++;
    210              }
    211              else if(enteringDirection == MOVING_RIGHT){
    212                if(Drive_Path(-STRAIGHT_RIGHT/2,STRAIGHT_LEFT/2,20)) stateCounter++;
    213              }
    214            }*/
    215            if (stateCounter==2){
   \                     ??Turn_0:
   \   00002A   A293....     CMP.W   #0x2, &stateCounter
   \   00002E   2220         JNE     ??Turn_1
    216              if (((ADC_Left_Detect <= LEFT_LINE_DETECT || ADC_Right_Detect <= RIGHT_LINE_DETECT))){
   \   000030   B2900B00.... CMP.W   #0xb, &ADC_Left_Detect
   \   000036   0428         JNC     ??Turn_2
   \   000038   B2900B00.... CMP.W   #0xb, &ADC_Right_Detect
   \   00003E   172C         JC      ??Turn_3
    217                if(enteringDirection == MOVING_LEFT)Drive_Path(STRAIGHT_RIGHT/4,-STRAIGHT_LEFT/4,0);
   \                     ??Turn_2:
   \   000040   F2904C00.... CMP.B   #0x4c, &enteringDirection
   \   000046   0720         JNE     ??Turn_4
   \   000048   0E43         MOV.W   #0x0, R14
   \   00004A   3D4060F0     MOV.W   #0xf060, R13
   \   00004E   3C408813     MOV.W   #0x1388, R12
   \   000052   ........     CALLA   #Drive_Path
    218                if(enteringDirection == MOVING_RIGHT)Drive_Path(-STRAIGHT_RIGHT/4,STRAIGHT_LEFT/4,0);
   \                     ??Turn_4:
   \   000056   F2905200.... CMP.B   #0x52, &enteringDirection
   \   00005C   1B20         JNE     ??Turn_5
   \   00005E   0E43         MOV.W   #0x0, R14
   \   000060   3D40A00F     MOV.W   #0xfa0, R13
   \   000064   3C4078EC     MOV.W   #0xec78, R12
   \   000068   ........     CALLA   #Drive_Path
   \   00006C   1001         RETA
    219              }
    220              else stateCounter++;
   \                     ??Turn_3:
   \   00006E   9253....     ADD.W   #0x1, &stateCounter
   \   000072   1001         RETA
    221            }
    222            else if (stateCounter==3) {
   \                     ??Turn_1:
   \   000074   B2900300.... CMP.W   #0x3, &stateCounter
   \   00007A   0C20         JNE     ??Turn_5
    223              ShutoffMotors();
   \   00007C   ........     CALLA   #ShutoffMotors
    224              stateCounter = 0 ;
   \   000080   8243....     MOV.W   #0x0, &stateCounter
    225              state = LINEFOLLOW;    
   \   000084   F2404C00.... MOV.B   #0x4c, &state
    226              nextState = LINEFOLLOW;
   \   00008A   F2404C00.... MOV.B   #0x4c, &nextState
    227              EmitterOff();
   \   000090   ........     CALLA   #EmitterOff
    228            }
    229          }
   \                     ??Turn_5:
   \   000094   1001         RETA
    230          

   \                                 In  segment CODE, align 2
    231          void LineFollow(){
   \                     LineFollow:
   \   000000   1B15         PUSHM.W #0x2, R11
    232            if (stateCounter == 0) {
   \   000002   8293....     CMP.W   #0x0, &stateCounter
   \   000006   0A20         JNE     ??LineFollow_3
    233              EmitterOn();
   \   000008   ........     CALLA   #EmitterOn
    234              if(rightSwitchable && leftSwitchable)stateCounter++;
   \   00000C   8293....     CMP.W   #0x0, &rightSwitchable
   \   000010   0524         JEQ     ??LineFollow_3
   \   000012   8293....     CMP.W   #0x0, &leftSwitchable
   \   000016   0224         JEQ     ??LineFollow_3
   \   000018   9253....     ADD.W   #0x1, &stateCounter
    235            }
    236            
    237            if(stateCounter == 1){
   \                     ??LineFollow_3:
   \   00001C   9293....     CMP.W   #0x1, &stateCounter
   \   000020   1320         JNE     ??LineFollow_4
    238              /*if(ADC_Right_Detect<RIGHT_LINE_DETECT && ADC_Left_Detect<LEFT_LINE_DETECT) {
    239                stateCounter = 3;
    240                return;
    241              }*/
    242              // METHOD 1
    243              /*int leftPIDOut = GetOutput(&leftController, 8, ADC_Left_Detect);
    244              int rightPIDOut = GetOutput(&rightController, 8, ADC_Right_Detect);
    245              int rSpeed = additionSafe(RIGHT_FORWARD_SPEED,RIGHT_MAX,RIGHT_MIN,leftPIDOut);
    246              //rSpeed = additionSafe(rSpeed,RIGHT_MAX/2,-RIGHT_MAX/2,-rightPIDOut);
    247              int lSpeed = additionSafe(LEFT_FORWARD_SPEED,LEFT_MAX,RIGHT_MIN,rightPIDOut);
    248              //lSpeed = additionSafe(lSpeed,LEFT_MAX/2,-LEFT_MIN/2,-leftPIDOut);
    249              */
    250              // METHOD 2
    251              /*int PIDOut = GetOutput(&leftController, ADC_Right_Detect, ADC_Left_Detect);
    252              unsigned int rSpeed = additionSafe(RIGHT_FORWARD_SPEED,RIGHT_MAX,RIGHT_MIN,PIDOut);
    253              unsigned int lSpeed = additionSafe(LEFT_FORWARD_SPEED,LEFT_MAX,LEFT_MIN,-PIDOut);
    254              */
    255              // METHOD 3 (Bang bang)
    256              int rSpeed = RIGHT_MAX;
   \   000022   3A408813     MOV.W   #0x1388, R10
    257              int lSpeed = LEFT_MAX;
   \   000026   3B40A00F     MOV.W   #0xfa0, R11
    258              if(ADC_Left_Detect<LEFT_LINE_DETECT || ADC_Right_Detect<RIGHT_LINE_DETECT) stateCounter = 2;
   \   00002A   B2900A00.... CMP.W   #0xa, &ADC_Left_Detect
   \   000030   0428         JNC     ??LineFollow_5
   \   000032   B2900A00.... CMP.W   #0xa, &ADC_Right_Detect
   \   000038   022C         JC      ??LineFollow_6
   \                     ??LineFollow_5:
   \   00003A   A243....     MOV.W   #0x2, &stateCounter
    259              
    260              
    261              /*if(ADC_Left_Detect>=LEFT_LINE_DETECT && ADC_Right_Detect>=RIGHT_LINE_DETECT){
    262                //rSpeed = RIGHT_MAX/2;
    263                //lSpeed = LEFT_MAX/2;
    264                ClearController(&rightController);
    265                ClearController(&leftController);
    266              }
    267              if(abs(rSpeed)<RIGHT_MIN) rSpeed = (rSpeed/abs(rSpeed))*RIGHT_MIN;
    268              if(abs(lSpeed)<LEFT_MIN) lSpeed = (lSpeed/abs(lSpeed))*LEFT_MIN;
    269              
    270              
    271              HEXtoBCD(LEFT_FORWARD_SPEED/10, 2,0);
    272              HEXtoBCD(RIGHT_FORWARD_SPEED/10, 2,6);*/
    273              Drive_Path(rSpeed,lSpeed,0);
   \                     ??LineFollow_6:
   \   00003E   0E43         MOV.W   #0x0, R14
   \   000040   0D4B         MOV.W   R11, R13
   \   000042   0C4A         MOV.W   R10, R12
   \   000044   ........     CALLA   #Drive_Path
    274            }
    275            
    276            if(stateCounter == 2){
   \                     ??LineFollow_4:
   \   000048   A293....     CMP.W   #0x2, &stateCounter
   \   00004C   1920         JNE     ??LineFollow_0
    277              if(ADC_Left_Detect<LEFT_LINE_DETECT && ADC_Right_Detect>=RIGHT_LINE_DETECT) // RCIRC
   \   00004E   B2900A00.... CMP.W   #0xa, &ADC_Left_Detect
   \   000054   082C         JC      ??LineFollow_7
   \   000056   B2900A00.... CMP.W   #0xa, &ADC_Right_Detect
   \   00005C   0428         JNC     ??LineFollow_7
    278                stateCounter = 3;
   \   00005E   B2400300.... MOV.W   #0x3, &stateCounter
   \   000064   0D3C         JMP     ??LineFollow_0
    279              else if(ADC_Left_Detect>=LEFT_LINE_DETECT && ADC_Right_Detect<RIGHT_LINE_DETECT) // LCIRC
   \                     ??LineFollow_7:
   \   000066   B2900A00.... CMP.W   #0xa, &ADC_Left_Detect
   \   00006C   0728         JNC     ??LineFollow_8
   \   00006E   B2900A00.... CMP.W   #0xa, &ADC_Right_Detect
   \   000074   032C         JC      ??LineFollow_8
    280                stateCounter = 4;
   \   000076   A242....     MOV.W   #0x4, &stateCounter
   \   00007A   023C         JMP     ??LineFollow_0
    281              else stateCounter = 1;
   \                     ??LineFollow_8:
   \   00007C   9243....     MOV.W   #0x1, &stateCounter
    282            }
    283            
    284            if(stateCounter == 3){
   \                     ??LineFollow_0:
   \   000080   B2900300.... CMP.W   #0x3, &stateCounter
   \   000086   1920         JNE     ??LineFollow_1
    285               if(ADC_Left_Detect<LEFT_LINE_DETECT)
   \   000088   B2900A00.... CMP.W   #0xa, &ADC_Left_Detect
   \   00008E   082C         JC      ??LineFollow_9
    286                 Drive_Path(RCIRC_RIGHT/4,-RCIRC_LEFT, 0);
   \   000090   0E43         MOV.W   #0x0, R14
   \   000092   3D4048F4     MOV.W   #0xf448, R13
   \   000096   3C408813     MOV.W   #0x1388, R12
   \   00009A   ........     CALLA   #Drive_Path
   \   00009E   0D3C         JMP     ??LineFollow_1
    287               else if (ADC_Left_Detect>=LEFT_LINE_DETECT && ADC_Right_Detect>=RIGHT_LINE_DETECT) stateCounter = 1;
   \                     ??LineFollow_9:
   \   0000A0   B2900A00.... CMP.W   #0xa, &ADC_Left_Detect
   \   0000A6   0728         JNC     ??LineFollow_10
   \   0000A8   B2900A00.... CMP.W   #0xa, &ADC_Right_Detect
   \   0000AE   0328         JNC     ??LineFollow_10
   \   0000B0   9243....     MOV.W   #0x1, &stateCounter
   \   0000B4   023C         JMP     ??LineFollow_1
    288               else 
    289                 stateCounter = 4;
   \                     ??LineFollow_10:
   \   0000B6   A242....     MOV.W   #0x4, &stateCounter
    290            }
    291            
    292            if(stateCounter == 4){
   \                     ??LineFollow_1:
   \   0000BA   A292....     CMP.W   #0x4, &stateCounter
   \   0000BE   1B20         JNE     ??LineFollow_11
    293               if(ADC_Right_Detect<RIGHT_LINE_DETECT)
   \   0000C0   B2900A00.... CMP.W   #0xa, &ADC_Right_Detect
   \   0000C6   082C         JC      ??LineFollow_12
    294                 Drive_Path(-LCIRC_RIGHT,LCIRC_LEFT/4, 0);
   \   0000C8   0E43         MOV.W   #0x0, R14
   \   0000CA   3D408813     MOV.W   #0x1388, R13
   \   0000CE   3C4048F4     MOV.W   #0xf448, R12
   \   0000D2   ........     CALLA   #Drive_Path
   \   0000D6   233C         JMP     ??LineFollow_2
    295               else if (ADC_Left_Detect>=LEFT_LINE_DETECT && ADC_Right_Detect>=RIGHT_LINE_DETECT) stateCounter = 1;
   \                     ??LineFollow_12:
   \   0000D8   B2900A00.... CMP.W   #0xa, &ADC_Left_Detect
   \   0000DE   0728         JNC     ??LineFollow_13
   \   0000E0   B2900A00.... CMP.W   #0xa, &ADC_Right_Detect
   \   0000E6   0328         JNC     ??LineFollow_13
   \   0000E8   9243....     MOV.W   #0x1, &stateCounter
   \   0000EC   183C         JMP     ??LineFollow_2
    296               else 
    297                 stateCounter = 3;
   \                     ??LineFollow_13:
   \   0000EE   B2400300.... MOV.W   #0x3, &stateCounter
   \   0000F4   143C         JMP     ??LineFollow_2
    298            }
    299           
    300            else if (stateCounter==7) {
   \                     ??LineFollow_11:
   \   0000F6   B2900700.... CMP.W   #0x7, &stateCounter
   \   0000FC   1020         JNE     ??LineFollow_2
    301              ShutoffMotors();
   \   0000FE   ........     CALLA   #ShutoffMotors
    302              stateCounter = 0 ;
   \   000102   8243....     MOV.W   #0x0, &stateCounter
    303              state = END;    
   \   000106   F2404500.... MOV.B   #0x45, &state
    304              stopwatch_seconds = 0;
   \   00010C   8243....     MOV.W   #0x0, &stopwatch_seconds
    305              cycle_count = 0;
   \   000110   8243....     MOV.W   #0x0, &cycle_count
    306              nextState = LINEFOLLOW;
   \   000114   F2404C00.... MOV.B   #0x4c, &nextState
    307              EmitterOff();
   \   00011A   ........     CALLA   #EmitterOff
    308            }
    309          }
   \                     ??LineFollow_2:
   \   00011E   1A17         POPM.W  #0x2, R11
   \   000120   1001         RETA
    310          
    311          
    312          // delays for a specified time and then switches state to global nextState
    313          // make sure nextState is set to desired vlaue before the end of delay

   \                                 In  segment CODE, align 2
    314          int delay(int seconds,int cycles){
   \                     delay:
   \   000000   0F4C         MOV.W   R12, R15
    315            if(stopwatch_seconds == 0 && cycle_count<=1) {
   \   000002   8293....     CMP.W   #0x0, &stopwatch_seconds
   \   000006   0220         JNE     ??delay_0
   \   000008   1E42....     MOV.W   &cycle_count, R14
    316              //strcpy(display_line[0], "WAITING...");
    317              //display_changed = 1;
    318            }
    319            if(stopwatch_seconds>=seconds && cycle_count >= cycles) {
   \                     ??delay_0:
   \   00000C   829F....     CMP.W   R15, &stopwatch_seconds
   \   000010   0928         JNC     ??delay_1
   \   000012   829D....     CMP.W   R13, &cycle_count
   \   000016   0628         JNC     ??delay_1
    320              stopwatch_seconds = 0;
   \   000018   8243....     MOV.W   #0x0, &stopwatch_seconds
    321              cycle_count = 0;
   \   00001C   8243....     MOV.W   #0x0, &cycle_count
    322              return 1;
   \   000020   1C43         MOV.W   #0x1, R12
   \   000022   1001         RETA
    323            }
    324            else return 0;
   \                     ??delay_1:
   \   000024   0C43         MOV.W   #0x0, R12
   \   000026   1001         RETA
    325          }
    326          
    327          
    328          

   \                                 In  segment CODE, align 2
    329          void StateMachine(void){
   \                     StateMachine:
    330            
    331            switch(state){
   \   000000   5E42....     MOV.B   &state, R14
   \   000004   7E804500     SUB.B   #0x45, R14
   \   000008   2824         JEQ     ??StateMachine_2
   \   00000A   7E800700     SUB.B   #0x7, R14
   \   00000E   2224         JEQ     ??StateMachine_3
   \   000010   7E800700     SUB.B   #0x7, R14
   \   000014   0924         JEQ     ??StateMachine_4
   \   000016   5E83         SUB.B   #0x1, R14
   \   000018   1A24         JEQ     ??StateMachine_5
   \   00001A   7E800300     SUB.B   #0x3, R14
   \   00001E   0924         JEQ     ??StateMachine_6
   \   000020   7E801C00     SUB.B   #0x1c, R14
   \   000024   1124         JEQ     ??StateMachine_7
   \   000026   1001         RETA
    332              case (START):
    333                //strcpy(display_line[0], "WAITING...");
    334                //display_changed = 1;
    335                stopwatch_seconds = 0;
   \                     ??StateMachine_4:
   \   000028   8243....     MOV.W   #0x0, &stopwatch_seconds
    336                cycle_count = 0;
   \   00002C   8243....     MOV.W   #0x0, &cycle_count
    337                break;
   \   000030   1001         RETA
    338              case (WAIT):
    339                if (delay(delayTime,0)) state = nextState;
   \                     ??StateMachine_6:
   \   000032   0D43         MOV.W   #0x0, R13
   \   000034   1C42....     MOV.W   &delayTime, R12
   \   000038   ........     CALLA   #delay
   \   00003C   0C93         CMP.W   #0x0, R12
   \   00003E   1524         JEQ     ??StateMachine_0
   \   000040   D242........ MOV.B   &nextState, &state
    340                break;
   \   000046   1001         RETA
    341              case (STRAIGHT):
    342                Straight();
   \                     ??StateMachine_7:
   \   000048   ........     CALLA   #Straight
    343                break;
   \   00004C   1001         RETA
    344              case (TURN):
    345                Turn();
   \                     ??StateMachine_5:
   \   00004E   ........     CALLA   #Turn
    346                break;
   \   000052   1001         RETA
    347              case (LINEFOLLOW):
    348                LineFollow();
   \                     ??StateMachine_3:
   \   000054   ........     CALLA   #LineFollow
    349                break;
   \   000058   1001         RETA
    350              case (END):
    351                strcpy(display_line[0], "    END   ");
   \                     ??StateMachine_2:
   \   00005A   3D40....     MOV.W   #`?<Constant "    END   ">`, R13
   \   00005E   3C40....     MOV.W   #display_line, R12
   \   000062   ........     CALLA   #strcpy
    352                display_changed = 1;
   \   000066   D243....     MOV.B   #0x1, &display_changed
    353                break;
    354              default: break;  
    355            }
    356          }
   \                     ??StateMachine_0:
   \   00006A   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for state>`:
   \   000000   53           DC8 83

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for nextState>`:
   \   000000   73           DC8 115

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for delayTime>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for rightSwitchable>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for leftSwitchable>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for enteringDirection>`:
   \   000000   4E           DC8 78

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for rightController>`:
   \   000000   000070410000 DC32 41700000H, 0H, 0H
   \            000000000000
   \   00000C   000000000000 DC16 0, 0, 0

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for leftController>`:
   \   000000   000070410000 DC32 41700000H, 0H, 0H
   \            000000000000
   \   00000C   000000000000 DC16 0, 0, 0

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "BLACK LINE">`:
   \   000000   424C41434B20 DC8 "BLACK LINE"
   \            4C494E4500  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " DETECTED ">`:
   \   000000   204445544543 DC8 " DETECTED "
   \            5445442000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    END   ">`:
   \   000000   20202020454E DC8 "    END   "
   \            4420202000  
    357          
    358          /*int polL = leftPIDOut>=0 ? 1:-1;
    359              int polR = rightPIDOut>=0 ? 1:-1;
    360              unsigned int leftOut = abs(leftPIDOut);
    361              unsigned int rightOut = abs(rightPIDOut);
    362              unsigned int rSpeed;
    363              unsigned int lSpeed;
    364              
    365              if (polL > 0) {
    366                rSpeed = RIGHT_FORWARD_SPEED + leftOut;
    367                if(rSpeed<RIGHT_FORWARD_SPEED) rSpeed = RIGHT_MAX;
    368              }
    369              if (polL < 0) {
    370                rSpeed = RIGHT_FORWARD_SPEED - leftOut;
    371                if(rSpeed>RIGHT_FORWARD_SPEED) rSpeed = RIGHT_MIN;
    372              }
    373              if (polR > 0) {
    374                lSpeed = LEFT_FORWARD_SPEED + rightOut;
    375                if(lSpeed<LEFT_FORWARD_SPEED) lSpeed = LEFT_MAX;
    376              }
    377              if (polR < 0) {
    378                lSpeed = LEFT_FORWARD_SPEED - rightOut;
    379                if(lSpeed>LEFT_FORWARD_SPEED) lSpeed = LEFT_MIN;
    380              }
    381              
    382              if(rSpeed>RIGHT_MAX)rSpeed = RIGHT_MAX;
    383              if(rSpeed<RIGHT_MIN)rSpeed = RIGHT_MIN;
    384              if(lSpeed>LEFT_MAX)lSpeed = LEFT_MAX;
    385              if(lSpeed<LEFT_MIN)lSpeed = LEFT_MIN;
    386                */

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     16   Drive_Path
       16   -> RunLeftMotor
       16   -> RunRightMotor
       16   -> ShutoffMotors
       16   -> Update_Ticks
      8   LineFollow
        8   -> Drive_Path
        8   -> EmitterOff
        8   -> EmitterOn
        8   -> ShutoffMotors
      8   LockMotors
        8   -> Drive_Path
      4   MotorSafety
        4   -> ShutoffMotors
      4   RunLeftMotor
        4   -> ShutoffLeft
      4   RunRightMotor
        4   -> ShutoffRight
      4   ShutoffLeft
      4   ShutoffMotors
        4   -> ShutoffLeft
        4   -> ShutoffRight
      4   ShutoffRight
      4   StateMachine
        4   -> LineFollow
        4   -> Straight
        4   -> Turn
        4   -> delay
        4   -> strcpy
      4   Straight
        4   -> Drive_Path
        4   -> EmitterOff
        4   -> EmitterOn
        4   -> LockMotors
        4   -> ShutoffMotors
        4   -> strcpy
      4   Turn
        4   -> Drive_Path
        4   -> EmitterOff
        4   -> EmitterOn
        4   -> ShutoffMotors
        4   -> strcpy
      4   Update_Ticks
      4   delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "    END   ">
      11  ?<Constant " DETECTED ">
      11  ?<Constant "BLACK LINE">
       2  ?<Initializer for delayTime>
       1  ?<Initializer for enteringDirection>
      18  ?<Initializer for leftController>
       2  ?<Initializer for leftSwitchable>
       1  ?<Initializer for nextState>
      18  ?<Initializer for rightController>
       2  ?<Initializer for rightSwitchable>
       1  ?<Initializer for state>
      88  Drive_Path
     290  LineFollow
      70  LockMotors
      64  MotorSafety
      98  RunLeftMotor
      96  RunRightMotor
      38  ShutoffLeft
      10  ShutoffMotors
      38  ShutoffRight
     108  StateMachine
     228  Straight
     150  Turn
      28  Update_Ticks
       2  _A_PAOUT_L
       2  _A_PCIN_L
       2  _A_TB1CCR1_L
       2  _A_TB1CCR2_L
       2  _A_TB1CCTL1_L
       2  _A_TB1CCTL2_L
       2  _A_TB1R_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
      40  delay
       2  delayTime
       1  enteringDirection
      18  leftController
       2  leftSwitchable
       1  nextState
      18  rightController
       2  rightSwitchable
       1  state
       2  stateCounter
       2  temp
       2  wheel_periods

 
 1 346 bytes in segment CODE
    22 bytes in segment DATA16_AN
    44 bytes in segment DATA16_C
    45 bytes in segment DATA16_I
    45 bytes in segment DATA16_ID
     6 bytes in segment DATA16_Z
 
 1 346 bytes of CODE  memory
    89 bytes of CONST memory
    51 bytes of DATA  memory (+ 22 bytes shared)

Errors: none
Warnings: none
