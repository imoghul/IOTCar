###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          14/Mar/2022  16:21:39
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\testECE306\Project 07\timers.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW1553.tmp
#        ("C:\Users\saad\Documents\testECE306\Project 07\timers.c" -lC
#        "C:\Users\saad\Documents\testECE306\Project 07\Debug\List" -o
#        "C:\Users\saad\Documents\testECE306\Project 07\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\testECE306\Project 07\Debug\List\timers.lst
#    Object file   =  
#        C:\Users\saad\Documents\testECE306\Project 07\Debug\Obj\timers.r43
#
###############################################################################

C:\Users\saad\Documents\testECE306\Project 07\timers.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADCCTL0_L
   \                     _A_ADCCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x380
   \   union <unnamed> _A_TB0CTL_L
   \                     _A_TB0CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x386
   \   union <unnamed> _A_TB0CCTL2_L
   \                     _A_TB0CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3a0
   \   union <unnamed> _A_TB0EX0_L
   \                     _A_TB0EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ae
   \   union <unnamed> _A_TB0IV_L
   \                     _A_TB0IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c0
   \   union <unnamed> _A_TB1CTL_L
   \                     _A_TB1CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c4
   \   union <unnamed> _A_TB1CCTL1_L
   \                     _A_TB1CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c6
   \   union <unnamed> _A_TB1CCTL2_L
   \                     _A_TB1CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3e0
   \   union <unnamed> _A_TB1EX0_L
   \                     _A_TB1EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ee
   \   union <unnamed> _A_TB1IV_L
   \                     _A_TB1IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x440
   \   union <unnamed> _A_TB3CTL_L
   \                     _A_TB3CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x444
   \   union <unnamed> _A_TB3CCTL1_L
   \                     _A_TB3CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x446
   \   union <unnamed> _A_TB3CCTL2_L
   \                     _A_TB3CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x448
   \   union <unnamed> _A_TB3CCTL3_L
   \                     _A_TB3CCTL3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x44a
   \   union <unnamed> _A_TB3CCTL4_L
   \                     _A_TB3CCTL4_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x452
   \   union <unnamed> _A_TB3CCR0_L
   \                     _A_TB3CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
      2          #include "timers.h"
      3          #include "ports.h"
      4          #include "macros.h"
      5          #include "wheels.h"
      6          #include "sm.h"
      7          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      8          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2
      9          extern volatile unsigned char update_display;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          volatile unsigned int timer0Counter;
   \                     timer0Counter:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          volatile unsigned int backliteCounter;
   \                     backliteCounter:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          unsigned int debounce_count1, debounce_count2;
   \                     debounce_count1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     debounce_count2:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          volatile unsigned int debouncing1, debouncing2;
   \                     debouncing1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     debouncing2:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          volatile unsigned int debounce_thresh1=10, debounce_thresh2=10;
   \                     debounce_thresh1:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for debounce_thresh1>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
   \                     debounce_thresh2:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for debounce_thresh2>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          volatile unsigned int checkAdc;
   \                     checkAdc:
   \   000000                DS8 2
     16          extern volatile char state;
     17          extern volatile unsigned int rightSwitchable, leftSwitchable;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          float timeElapsed;
   \                     timeElapsed:
   \   000000                DS8 4

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile unsigned int stopwatchUpdated;
   \                     stopwatchUpdated:
   \   000000                DS8 2

   \                                 In  segment CODE, align 2
     20          void Init_Timers(void){
   \                     Init_Timers:
     21            Init_Timer_B0();
   \   000000   ........     CALLA   #Init_Timer_B0
     22            Init_Timer_B1();
   \   000004   ........     CALLA   #Init_Timer_B1
     23            Init_Timer_B3();
   \   000008   ........     CALLA   #Init_Timer_B3
     24          }
   \   00000C   1001         RETA
     25          

   \                                 In  segment CODE, align 2
     26          void Init_Timer_B0(void) {
   \                     Init_Timer_B0:
     27            TB0CTL = TBSSEL__SMCLK; // SMCLK source
   \   000000   B24000028003 MOV.W   #0x200, &0x380
     28            TB0CTL |= TBCLR; // Resets TB0R, clock divider, count direction
   \   000006   A2D28003     BIS.W   #0x4, &0x380
     29            TB0CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D020008003 BIS.W   #0x20, &0x380
     30            TB0CTL |= ID__2; // Divide clock by 2
   \   000010   B2D040008003 BIS.W   #0x40, &0x380
     31            TB0EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000016   B2400700A003 MOV.W   #0x7, &0x3a0
     32            TB0CCR0 = TB0CCR0_INTERVAL; // CCR0
   \   00001C   B240D0079203 MOV.W   #0x7d0, &0x392
     33            TB0CCTL0 |= CCIE; // CCR0 enable interrupt
   \   000022   B2D010008203 BIS.W   #0x10, &0x382
     34            TB0CCR1 = TB0CCR1_INTERVAL; // CCR1
   \   000028   B24050C39403 MOV.W   #0xc350, &0x394
     35            //TB0CCTL1 |= CCIE; // CCR1 enable interrupt
     36            TB0CCR2 = TB0CCR2_INTERVAL; // CCR2
   \   00002E   B24050C39603 MOV.W   #0xc350, &0x396
     37            //TB0CCTL2 |= CCIE; // CCR2 enable interrupt
     38            TB0CTL &= ~TBIE; // Disable Overflow Interrupt
   \   000034   A2C38003     BIC.W   #0x2, &0x380
     39            TB0CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000038   92C38003     BIC.W   #0x1, &0x380
     40          }
   \   00003C   1001         RETA
   \   00003E                REQUIRE _A_TB0CTL_L
   \   00003E                REQUIRE _A_TB0EX0_L
   \   00003E                REQUIRE _A_TB0CCR0_L
   \   00003E                REQUIRE _A_TB0CCTL0_L
   \   00003E                REQUIRE _A_TB0CCR1_L
   \   00003E                REQUIRE _A_TB0CCR2_L
     41          

   \                                 In  segment CODE, align 2
     42          void Init_Timer_B1(void) {
   \                     Init_Timer_B1:
     43            TB1CTL = TBSSEL__SMCLK; // SMCLK source
   \   000000   B2400002C003 MOV.W   #0x200, &0x3c0
     44            TB1CTL |= TBCLR; // Resets TB0R, clock divider, count direction
   \   000006   A2D2C003     BIS.W   #0x4, &0x3c0
     45            TB1CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D02000C003 BIS.W   #0x20, &0x3c0
     46            TB1CTL |= ID__4; // Divide clock by 4
   \   000010   B2D08000C003 BIS.W   #0x80, &0x3c0
     47            TB1EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000016   B2400700E003 MOV.W   #0x7, &0x3e0
     48            //TB1CCR0 = TB0CCR0_INTERVAL; // CCR0
     49            //TB1CCTL0 |= CCIE; // CCR0 enable interrupt
     50            //TB1CCR1 = TB1CCR1_INTERVAL; // CCR1
     51            //TB1CCTL1 |= CCIE; // CCR1 enable interrupt
     52            //TB1CCR2 = TB1CCR2_INTERVAL; // CCR2
     53            //TB1CCTL2 |= CCIE; // CCR2 enable interrupt
     54            TB1CTL &= ~TBIE; // Disable Overflow Interrupt
   \   00001C   A2C3C003     BIC.W   #0x2, &0x3c0
     55            TB1CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000020   92C3C003     BIC.W   #0x1, &0x3c0
     56          }
   \   000024   1001         RETA
   \   000026                REQUIRE _A_TB1CTL_L
   \   000026                REQUIRE _A_TB1EX0_L
     57          

   \                                 In  segment CODE, align 2
     58          void Init_Timer_B3(void){
   \                     Init_Timer_B3:
     59            TB3CTL = TBSSEL__SMCLK;
   \   000000   B24000024004 MOV.W   #0x200, &0x440
     60            TB3CTL |= MC__UP;
   \   000006   B2D010004004 BIS.W   #0x10, &0x440
     61            TB3CTL |= TBCLR;
   \   00000C   A2D24004     BIS.W   #0x4, &0x440
     62            
     63            TB3CCR0 = WHEEL_PERIOD;
   \   000010   B240204E5204 MOV.W   #0x4e20, &0x452
     64            
     65            TB3CCTL1 = OUTMOD_7;
   \   000016   B240E0004404 MOV.W   #0xe0, &0x444
     66            RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   00001C   82435404     MOV.W   #0x0, &0x454
     67            
     68            TB3CCTL2 = OUTMOD_7;
   \   000020   B240E0004604 MOV.W   #0xe0, &0x446
     69            LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   000026   82435604     MOV.W   #0x0, &0x456
     70            
     71            TB3CCTL3 = OUTMOD_7;
   \   00002A   B240E0004804 MOV.W   #0xe0, &0x448
     72            RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000030   82435804     MOV.W   #0x0, &0x458
     73            
     74            TB3CCTL4 = OUTMOD_7;
   \   000034   B240E0004A04 MOV.W   #0xe0, &0x44a
     75            LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   00003A   82435A04     MOV.W   #0x0, &0x45a
     76          }
   \   00003E   1001         RETA
   \   000040                REQUIRE _A_TB3CTL_L
   \   000040                REQUIRE _A_TB3CCR0_L
   \   000040                REQUIRE _A_TB3CCTL1_L
   \   000040                REQUIRE _A_TB3CCR1_L
   \   000040                REQUIRE _A_TB3CCTL2_L
   \   000040                REQUIRE _A_TB3CCR2_L
   \   000040                REQUIRE _A_TB3CCTL3_L
   \   000040                REQUIRE _A_TB3CCR3_L
   \   000040                REQUIRE _A_TB3CCTL4_L
   \   000040                REQUIRE _A_TB3CCR4_L
     77          
     78          
     79          //===========================================================================
     80          // Function name: Timer0_B0_ISR
     81          //
     82          // Description: Increments Time_Sequence and update_display
     83          //
     84          // Passed : no variables passed
     85          // Locals: no variables declared
     86          // Returned: no values returned
     87          // Globals: no global values
     88          //
     89          // Author: Ibrahim Moghul
     90          // Date: Feb 2022
     91          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     92          //===========================================================================
     93          #pragma vector = TIMER0_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     94          __interrupt void Timer0_B0_ISR(void){
   \                     Timer0_B0_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
     95          //------------------------------------------------------------------------------
     96          // TimerB0 0 Interrupt handler
     97          //----------------------------------------------------------------------------
     98            if(++timer0Counter==((UPDATE_DISPLAY_TIMER_COUNT*CHECK_ADC_TIMER_COUNT*TIME_SEQUENCE_TIMER_COUNT)+1)) timer0Counter = 1;
   \   000002   1F42....     MOV.W   &timer0Counter, R15
   \   000006   1F53         ADD.W   #0x1, R15
   \   000008   824F....     MOV.W   R15, &timer0Counter
   \   00000C   3F90BD02     CMP.W   #0x2bd, R15
   \   000010   0220         JNE     ??Timer0_B0_ISR_0
   \   000012   9243....     MOV.W   #0x1, &timer0Counter
     99            if(timer0Counter%TIME_SEQUENCE_TIMER_COUNT==0)
   \                     ??Timer0_B0_ISR_0:
   \   000016   1F42....     MOV.W   &timer0Counter, R15
    100              if(Time_Sequence++ == TIME_SEQUENCE_MAX) Time_Sequence = 0;
   \   00001A   1E42....     MOV.W   &Time_Sequence, R14
   \   00001E   0D4E         MOV.W   R14, R13
   \   000020   1D53         ADD.W   #0x1, R13
   \   000022   824D....     MOV.W   R13, &Time_Sequence
   \   000026   3E90FA00     CMP.W   #0xfa, R14
   \   00002A   0220         JNE     ??Timer0_B0_ISR_1
   \   00002C   8243....     MOV.W   #0x0, &Time_Sequence
    101            if(timer0Counter%UPDATE_DISPLAY_TIMER_COUNT==0){
   \                     ??Timer0_B0_ISR_1:
   \   000030   1C42....     MOV.W   &timer0Counter, R12
   \   000034   3E403200     MOV.W   #0x32, R14
   \   000038   ........     CALLA   #?DivMod16u
   \   00003C   0E93         CMP.W   #0x0, R14
   \   00003E   1620         JNE     ??Timer0_B0_ISR_2
    102              if(state!=END){
   \   000040   F2904500.... CMP.B   #0x45, &state
   \   000046   1024         JEQ     ??Timer0_B0_ISR_3
    103                stopwatchUpdated = 1;
   \   000048   9243....     MOV.W   #0x1, &stopwatchUpdated
    104                timeElapsed+=.2;
   \   00004C   1C42....     MOV.W   &timeElapsed, R12
   \   000050   1D42....     MOV.W   &timeElapsed + 2, R13
   \   000054   3E40CDCC     MOV.W   #0xcccd, R14
   \   000058   3F404C3E     MOV.W   #0x3e4c, R15
   \   00005C   ........     CALLA   #_Add32f
   \   000060   824C....     MOV.W   R12, &timeElapsed
   \   000064   824D....     MOV.W   R13, &timeElapsed + 2
    105              }
    106              update_display=1;
   \                     ??Timer0_B0_ISR_3:
   \   000068   D243....     MOV.B   #0x1, &update_display
    107            }
    108            if(timer0Counter%CHECK_ADC_TIMER_COUNT==0){
   \                     ??Timer0_B0_ISR_2:
   \   00006C   1C42....     MOV.W   &timer0Counter, R12
   \   000070   3E400E00     MOV.W   #0xe, R14
   \   000074   ........     CALLA   #?DivMod16u
   \   000078   0E93         CMP.W   #0x0, R14
   \   00007A   0220         JNE     ??Timer0_B0_ISR_4
    109              ADCCTL0 |= ADCSC;
   \   00007C   92D30007     BIS.W   #0x1, &0x700
    110            }
    111            
    112            TB0CCR0 += TB0CCR0_INTERVAL; // Add Offset to TBCCR0
   \                     ??Timer0_B0_ISR_4:
   \   000080   B250D0079203 ADD.W   #0x7d0, &0x392
    113          //----------------------------------------------------------------------------
    114          }
   \   000086   3C17         POPM.W  #0x4, R15
   \   000088   0013         RETI
   \   00008A                REQUIRE _A_ADCCTL0_L
   \   00008A                REQUIRE _A_TB0CCR0_L
    115          
    116          
    117          //===========================================================================
    118          // Function name: TIMER0_B1_ISR
    119          //
    120          // Description: Timer 1 handles switch debounce, and Timer 2 handles 
    121          // LCD blinking
    122          //
    123          // Passed : no variables passed
    124          // Locals: no variables declared
    125          // Returned: no values returned
    126          // Globals: no global values
    127          //
    128          // Author: Ibrahim Moghul
    129          // Date: Feb 2022
    130          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    131          //===========================================================================
    132          #pragma vector=TIMER0_B1_VECTOR

   \                                 In  segment ISR_CODE, align 2
    133          __interrupt void TIMER0_B1_ISR(void){
   \                     TIMER0_B1_ISR:
   \   000000   0F12         PUSH.W  R15
    134            //----------------------------------------------------------------------------
    135            // TimerB0 1-2, Overflow Interrupt Vector (TBIV) handler
    136            //----------------------------------------------------------------------------
    137            switch(__even_in_range(TB0IV,14)){
   \   000002   1F42AE03     MOV.W   &0x3ae, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for TIMER0_B1_ISR>_0`:
   \   000008   323C         JMP     ??TIMER0_B1_ISR_1
   \   00000A   063C         JMP     ??TIMER0_B1_ISR_6
   \   00000C   1B3C         JMP     ??TIMER0_B1_ISR_7
   \   00000E   2F3C         JMP     ??TIMER0_B1_ISR_1
   \   000010   2E3C         JMP     ??TIMER0_B1_ISR_1
   \   000012   2D3C         JMP     ??TIMER0_B1_ISR_1
   \   000014   2C3C         JMP     ??TIMER0_B1_ISR_1
   \   000016   2B3C         JMP     ??TIMER0_B1_ISR_1
    138              case 0: break; // No interrupt
    139              case 2: // CCR1 not used
    140                if(debouncing1==TRUE) debounce_count1++;
   \                     ??TIMER0_B1_ISR_6:
   \   000018   9293....     CMP.W   #0x1, &debouncing1
   \   00001C   0220         JNE     ??TIMER0_B1_ISR_2
   \   00001E   9253....     ADD.W   #0x1, &debounce_count1
    141                if (debounce_count1 > debounce_thresh1){
   \                     ??TIMER0_B1_ISR_2:
   \   000022   9292........ CMP.W   &debounce_count1, &debounce_thresh1
   \   000028   092C         JC      ??TIMER0_B1_ISR_3
    142                  debounce_count1 = 0;
   \   00002A   8243....     MOV.W   #0x0, &debounce_count1
    143                  debouncing1 = FALSE;
   \   00002E   8243....     MOV.W   #0x0, &debouncing1
    144                  P4IE |= SW1;
   \   000032   E2D33B02     BIS.B   #0x2, &0x23b
    145                  TB0CCTL1 &= ~CCIE; 
   \   000036   B2C010008403 BIC.W   #0x10, &0x384
    146                }
    147                TB0CCR1 += TB0CCR1_INTERVAL; // Add Offset to TBCCR1
   \                     ??TIMER0_B1_ISR_3:
   \   00003C   B25050C39403 ADD.W   #0xc350, &0x394
    148                
    149                break;
   \   000042   153C         JMP     ??TIMER0_B1_ISR_1
    150              case 4: // CCR2 not used
    151                if(debouncing2==TRUE) debounce_count2++;
   \                     ??TIMER0_B1_ISR_7:
   \   000044   9293....     CMP.W   #0x1, &debouncing2
   \   000048   0220         JNE     ??TIMER0_B1_ISR_4
   \   00004A   9253....     ADD.W   #0x1, &debounce_count2
    152                if (debounce_count2 > debounce_thresh2){
   \                     ??TIMER0_B1_ISR_4:
   \   00004E   9292........ CMP.W   &debounce_count2, &debounce_thresh2
   \   000054   092C         JC      ??TIMER0_B1_ISR_5
    153                  debounce_count2 = 0;
   \   000056   8243....     MOV.W   #0x0, &debounce_count2
    154                  debouncing2 = FALSE;
   \   00005A   8243....     MOV.W   #0x0, &debouncing2
    155                  P2IE |= SW2;
   \   00005E   F2D21B02     BIS.B   #0x8, &0x21b
    156                  TB0CCTL2 &= ~CCIE;
   \   000062   B2C010008603 BIC.W   #0x10, &0x386
    157                }
    158                TB0CCR2 += TB0CCR2_INTERVAL; // Add Offset to TBCCR2
   \                     ??TIMER0_B1_ISR_5:
   \   000068   B25050C39603 ADD.W   #0xc350, &0x396
    159                
    160                break;
    161              case 14: // overflow
    162                
    163                break;
    164              default: break;
    165            }
    166            //----------------------------------------------------------------------------
    167          }
   \                     ??TIMER0_B1_ISR_1:
   \   00006E   3F41         POP.W   R15
   \   000070   0013         RETI
   \   000072                REQUIRE _A_PBIE_L
   \   000072                REQUIRE _A_TB0CCTL1_L
   \   000072                REQUIRE _A_TB0CCR1_L
   \   000072                REQUIRE _A_PAIE_L
   \   000072                REQUIRE _A_TB0CCTL2_L
   \   000072                REQUIRE _A_TB0CCR2_L
   \   000072                REQUIRE _A_TB0IV_L
    168          
    169          #pragma vector = TIMER1_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
    170          __interrupt void Timer1_B0_ISR(void){
   \                     Timer1_B0_ISR:
    171          //------------------------------------------------------------------------------
    172          // TimerB0 0 Interrupt handler
    173          //----------------------------------------------------------------------------
    174            
    175          //----------------------------------------------------------------------------
    176          }
   \   000000   0013         RETI
    177          
    178          #pragma vector=TIMER1_B1_VECTOR

   \                                 In  segment ISR_CODE, align 2
    179          __interrupt void TIMER1_B1_ISR(void){
   \                     TIMER1_B1_ISR:
   \   000000   0F12         PUSH.W  R15
    180            //----------------------------------------------------------------------------
    181            // TimerB0 1-2, Overflow Interrupt Vector (TBIV) handler
    182            //----------------------------------------------------------------------------
    183            switch(__even_in_range(TB1IV,14)){
   \   000002   1F42EE03     MOV.W   &0x3ee, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for TIMER1_B1_ISR>_0`:
   \   000008   123C         JMP     ??TIMER1_B1_ISR_1
   \   00000A   063C         JMP     ??TIMER1_B1_ISR_2
   \   00000C   0B3C         JMP     ??TIMER1_B1_ISR_3
   \   00000E   0F3C         JMP     ??TIMER1_B1_ISR_1
   \   000010   0E3C         JMP     ??TIMER1_B1_ISR_1
   \   000012   0D3C         JMP     ??TIMER1_B1_ISR_1
   \   000014   0C3C         JMP     ??TIMER1_B1_ISR_1
   \   000016   0B3C         JMP     ??TIMER1_B1_ISR_1
    184              case 0: break; // No interrupt
    185              case 2: // Right Motor
    186                rightSwitchable = 1;
   \                     ??TIMER1_B1_ISR_2:
   \   000018   9243....     MOV.W   #0x1, &rightSwitchable
    187                TB1CCTL1 &= ~CCIE; 
   \   00001C   B2C01000C403 BIC.W   #0x10, &0x3c4
    188                  
    189                break;
   \   000022   053C         JMP     ??TIMER1_B1_ISR_1
    190              case 4: // Left Motor
    191                
    192                leftSwitchable = 1;
   \                     ??TIMER1_B1_ISR_3:
   \   000024   9243....     MOV.W   #0x1, &leftSwitchable
    193                TB1CCTL2 &= ~CCIE; 
   \   000028   B2C01000C603 BIC.W   #0x10, &0x3c6
    194                
    195                break;
    196              case 14: // overflow
    197                
    198                break;
    199              default: break;
    200            }
    201            //----------------------------------------------------------------------------
    202          }
   \                     ??TIMER1_B1_ISR_1:
   \   00002E   3F41         POP.W   R15
   \   000030   0013         RETI
   \   000032                REQUIRE _A_TB1CCTL1_L
   \   000032                REQUIRE _A_TB1CCTL2_L
   \   000032                REQUIRE _A_TB1IV_L

   \                                 In  segment INTVEC, offset 0x50, root
   \                     `??TIMER1_B1_ISR::??INTVEC 80`:
   \   000050   ....         DC16    TIMER1_B1_ISR

   \                                 In  segment INTVEC, offset 0x52, root
   \                     `??Timer1_B0_ISR::??INTVEC 82`:
   \   000052   ....         DC16    Timer1_B0_ISR

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??TIMER0_B1_ISR::??INTVEC 84`:
   \   000054   ....         DC16    TIMER0_B1_ISR

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??Timer0_B0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    Timer0_B0_ISR

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for debounce_thresh1>`:
   \   000000   0A00         DC16 10

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for debounce_thresh2>`:
   \   000000   0A00         DC16 10

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_B0
      4   Init_Timer_B1
      4   Init_Timer_B3
      4   Init_Timers
        4   -> Init_Timer_B0
        4   -> Init_Timer_B1
        4   -> Init_Timer_B3
      6   TIMER0_B1_ISR
      6   TIMER1_B1_ISR
     12   Timer0_B0_ISR
       12 ?DivMod16u
       12 _Add32f
      4   Timer1_B0_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for debounce_thresh1>
       2  ?<Initializer for debounce_thresh2>
      62  Init_Timer_B0
      38  Init_Timer_B1
      64  Init_Timer_B3
      14  Init_Timers
     114  TIMER0_B1_ISR
       2  TIMER0_B1_ISR::??INTVEC 84
      50  TIMER1_B1_ISR
       2  TIMER1_B1_ISR::??INTVEC 80
       2  Time_Sequence
     138  Timer0_B0_ISR
       2  Timer0_B0_ISR::??INTVEC 86
       2  Timer1_B0_ISR
       2  Timer1_B0_ISR::??INTVEC 82
       2  _A_ADCCTL0_L
       2  _A_PAIE_L
       2  _A_PBIE_L
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CCTL1_L
       2  _A_TB0CCTL2_L
       2  _A_TB0CTL_L
       2  _A_TB0EX0_L
       2  _A_TB0IV_L
       2  _A_TB1CCTL1_L
       2  _A_TB1CCTL2_L
       2  _A_TB1CTL_L
       2  _A_TB1EX0_L
       2  _A_TB1IV_L
       2  _A_TB3CCR0_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
       2  _A_TB3CCTL1_L
       2  _A_TB3CCTL2_L
       2  _A_TB3CCTL3_L
       2  _A_TB3CCTL4_L
       2  _A_TB3CTL_L
       2  backliteCounter
       2  checkAdc
       2  debounce_count1
       2  debounce_count2
       2  debounce_thresh1
       2  debounce_thresh2
       2  debouncing1
       2  debouncing2
       2  stopwatchUpdated
       4  timeElapsed
       2  timer0Counter

 
 178 bytes in segment CODE
  54 bytes in segment DATA16_AN
   4 bytes in segment DATA16_I
   4 bytes in segment DATA16_ID
  22 bytes in segment DATA16_Z
   8 bytes in segment INTVEC
 304 bytes in segment ISR_CODE
 
 482 bytes of CODE  memory
   4 bytes of CONST memory (+  8 bytes shared)
  26 bytes of DATA  memory (+ 54 bytes shared)

Errors: none
Warnings: none
