###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          31/Mar/2022  15:26:01
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Homework 09\main.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWD281.tmp
#        ("C:\Users\saad\Documents\ece-306\Homework 09\main.c" -lC
#        "C:\Users\saad\Documents\ece-306\Homework 09\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Homework 09\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Homework 09\Debug\List\main.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Homework 09\Debug\Obj\main.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Homework 09\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include <string.h>
     15          #include "macros.h"
     16          #include "init.h"
     17          #include "led.h"
     18          #include "wheels.h"
     19          #include "ports.h"
     20          #include "switches.h"
     21          #include "timers.h"
     22          #include "adc.h"
     23          #include "detectors.h"
     24          #include "sm.h"
     25          #include "menu.h"
     26          #include "serial.h"
     27          // Function Prototypes
     28          void main(void);
     29          
     30          
     31          // Global Variables
     32          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     34          extern char display_line[4][11];
     35          extern char *display[4];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     37          extern volatile unsigned char display_changed;
     38          extern volatile unsigned char update_display;
     39          extern volatile unsigned int update_display_count;
     40          extern volatile unsigned int Time_Sequence;
     41          extern volatile char one_time;
     42          extern volatile unsigned int wheel_tick;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          unsigned int Last_Time_Sequence;
   \                     Last_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     47          volatile unsigned int cycle_count;
   \                     cycle_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          volatile unsigned int stopwatch_seconds;
   \                     stopwatch_seconds:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          volatile unsigned int time_change;
   \                     time_change:
   \   000000                DS8 2
     50          extern volatile unsigned int right_tick, left_tick;
     51          extern char adc_char[5];
     52          extern volatile unsigned int ADC_Left_Detect, ADC_Right_Detect;
     53          extern char movingDirection;
     54          extern char enteringDirection;
     55          extern float timeElapsed;
     56          extern char state;
     57          extern volatile unsigned int stopwatchUpdated;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     58          unsigned volatile UCA0_index,UCA1_index;
   \                     UCA0_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     UCA1_index:
   \   000000                DS8 2
     59          extern volatile char USB0_Char_Tx[];
     60          extern volatile unsigned int pb0_buffered;
     61          extern volatile unsigned int usb0_rx_wr,usb0_rx_rd;
     62          extern volatile unsigned int serialState;
     63          extern menu resistor,mainMenu;
     64          //===========================================================================
     65          // Function name: Main
     66          //
     67          // Description: This function contains the while loop that runs continuously
     68          // to act for the operating system. It also calls all the functions to
     69          // initialize the system.
     70          //
     71          // Passed : no variables passed
     72          // Locals: no variables declared
     73          // Returned: no values returned
     74          // Globals: char* display_1
     75          // char* display_2
     76          // slow_input_down
     77          // control_state[CNTL_STATE_INDEX]
     78          //
     79          // Author: Ibrahim Moghul
     80          // Date: Feb 2022
     81          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     82          //===========================================================================
     83          

   \                                 In  segment CODE, align 2
     84          void main(void) {
   \                     main:
     85              //------------------------------------------------------------------------------
     86              // Main Program
     87              // This is the main routine for the program. Execution of code starts here.
     88              // The operating system is Back Ground Fore Ground.
     89              //
     90              //------------------------------------------------------------------------------
     91              PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     92              // Disable the GPIO power-on default high-impedance mode to activate
     93              // previously configured port settings
     94          
     95              Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     96              Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     97              Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     98              Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     99              Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
    100              Init_REF();
   \   000018   ........     CALLA   #Init_REF
    101              Init_DAC();
   \   00001C   ........     CALLA   #Init_DAC
    102              Init_ADC();
   \   000020   ........     CALLA   #Init_ADC
    103              Init_Serial_UCA();
   \   000024   ........     CALLA   #Init_Serial_UCA
    104              EmitterOn();
   \   000028   ........     CALLA   #EmitterOn
    105              // Place the contents of what you want on the display, in between the quotes
    106              // Limited to 10 characters per line
    107              strcpy(display_line[0], "          ");
   \   00002C   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000030   3C40....     MOV.W   #display_line, R12
   \   000034   ........     CALLA   #strcpy
    108              strcpy(display_line[1], "          ");
   \   000038   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00003C   3C40....     MOV.W   #display_line + 11, R12
   \   000040   ........     CALLA   #strcpy
    109              strcpy(display_line[2], "          ");
   \   000044   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000048   3C40....     MOV.W   #display_line + 22, R12
   \   00004C   ........     CALLA   #strcpy
    110              strcpy(display_line[3], "          ");
   \   000050   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000054   3C40....     MOV.W   #display_line + 33, R12
   \   000058   ........     CALLA   #strcpy
    111              display_changed = TRUE;
   \   00005C   D243....     MOV.B   #0x1, &display_changed
    112          
    113              //------------------------------------------------------------------------------
    114              // Begining of the "While" Operating System
    115              //------------------------------------------------------------------------------
    116              while(ALWAYS) {                       // Can the Operating system run
    117                  Display_Process();                  // Update Display
   \                     ??main_0:
   \   000060   ........     CALLA   #Display_Process
    118                  //SerialProcess();
    119                  //DetectMovement();
    120                  //StateMachine();                     // Run wheels state machine
    121                  MenuProcess();
   \   000064   ........     CALLA   #MenuProcess
    122                  MotorSafety();
   \   000068   ........     CALLA   #MotorSafety
    123                  P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   00006C   D2E32202     XOR.B   #0x1, &0x222
    124                  /*if(movingDirection == MOVING_RIGHT) strcpy(display_line[1], "  RIGHT   ");
    125                  else if(movingDirection == MOVING_STRAIGHT) strcpy(display_line[1], " STRAIGHT ");
    126                  else if (movingDirection == MOVING_LEFT) strcpy(display_line[1], "   LEFT   ");
    127                  else if (movingDirection == NOT_MOVING) strcpy(display_line[1], "NOT MOVING");*/
    128          
    129                  /*if(stopwatchUpdated){
    130                    stopwatchUpdated = 0;
    131                    HEXtoBCD((int)timeElapsed,3,0);
    132                    display_line[3][4]='.';
    133                    display_line[3][5]=(int)(10*(timeElapsed-(int)timeElapsed))+0x30;
    134                    display_changed = 1;
    135                  }*/
    136                  
    137                  //strcpy(display_line[2], "   Baud   ");
    138                  
    139                  
    140                  /*if(UCA0BRW == 4 && UCA0MCTLW == 0x5551){
    141                    strcpy(display_line[2], "  115200  ");
    142                    display_changed=1;
    143                  }
    144                  else if(UCA0BRW == 1 && UCA0MCTLW == 0x4A11){
    145                    strcpy(display_line[2], "  460800  ");
    146                    display_changed=1;
    147                  }*/
    148                  
    149                  /*if(serialState==1){
    150                    strcpy(display_line[0], " TRANSMIT ");
    151                    display_changed=1;
    152                  }
    153                  else if(serialState==2) {
    154                    strcpy(display_line[0], " RECIEVED ");
    155                    display_changed=1;
    156                  }*/
    157                    
    158                  
    159                  if(cycle_count==0){
   \   000070   8293....     CMP.W   #0x0, &cycle_count
   \   000074   0220         JNE     ??main_1
    160                    display_changed = 1;
   \   000076   D243....     MOV.B   #0x1, &display_changed
    161                  }
    162          
    163                  if(Last_Time_Sequence != Time_Sequence) {
   \                     ??main_1:
   \   00007A   9292........ CMP.W   &Time_Sequence, &Last_Time_Sequence
   \   000080   EF27         JEQ     ??main_0
    164                      Last_Time_Sequence = Time_Sequence;
   \   000082   9242........ MOV.W   &Time_Sequence, &Last_Time_Sequence
    165                      cycle_count++;
   \   000088   9253....     ADD.W   #0x1, &cycle_count
    166                      time_change = 1;
   \   00008C   9243....     MOV.W   #0x1, &time_change
    167          
    168                      if(cycle_count == TIME_SEQUENCE_MAX) {
   \   000090   B290FA00.... CMP.W   #0xfa, &cycle_count
   \   000096   E423         JNE     ??main_0
    169                          cycle_count = 0;
   \   000098   8243....     MOV.W   #0x0, &cycle_count
    170                          stopwatch_seconds++;
   \   00009C   9253....     ADD.W   #0x1, &stopwatch_seconds
   \   0000A0   DF3F         JMP     ??main_0
   \   0000A2   0343         NOP
   \   0000A4                REQUIRE _A_PM5CTL0_L
   \   0000A4                REQUIRE _A_PBOUT_L
    171                      }
    172                  }
    173              }
    174          
    175              //------------------------------------------------------------------------------
    176          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  
    177          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> EmitterOn
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_DAC
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_REF
        4   -> Init_Serial_UCA
        4   -> Init_Timers
        4   -> MenuProcess
        4   -> MotorSafety
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       2  Last_Time_Sequence
       2  UCA0_index
       2  UCA1_index
       2  _A_PBOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       2  cycle_count
       1  display_mode
     164  main
       1  slow_input_down
       2  stopwatch_seconds
       2  test_value
       2  time_change

 
 164 bytes in segment CODE
   4 bytes in segment DATA16_AN
  11 bytes in segment DATA16_C
  18 bytes in segment DATA16_Z
 
 164 bytes of CODE  memory
  11 bytes of CONST memory
  18 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
