###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          15/Feb/2022  11:39:15
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 05\switches.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW1905.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 05\switches.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 05\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 05\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 05\Debug\List\switches.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 05\Debug\Obj\switches.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 05\switches.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21c
   \   union <unnamed> _A_PAIFG_L
   \                     _A_PAIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2
      2          #include "switches.h"
      3          #include "ports.h"
      4          #include "wheels.h"

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      5          volatile unsigned int sw1Okay, sw2Okay;
   \                     sw1Okay:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     sw2Okay:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      6          volatile unsigned int count_debounce_SW1, count_debounce_SW2;
   \                     count_debounce_SW1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     count_debounce_SW2:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      7          volatile unsigned int sw1_pos, sw2_pos;
   \                     sw1_pos:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     sw2_pos:
   \   000000                DS8 2
      8          extern volatile unsigned int cycle_count;
      9          extern volatile unsigned int stopwatch_seconds;
     10          extern volatile char state;
     11          
     12          //void SwitchesProcess(void){
     13          //  Switch1Process();
     14          //  Switch2Process();
     15          //}
     16          //void Switch1Process(void){
     17          //  if(sw1Okay && sw1_pos){
     18          //    if(!(P4IN & SW1)){
     19          //      sw1_pos = PRESSED;
     20          //      sw1Okay = NOT_OKAY;
     21          //      count_debounce_SW1 = DEBOUNCE_RESTART;
     22          //      if(state == START){
     23          //        stopwatch_seconds = 0;
     24          //        cycle_count = 0;
     25          //        state = WAIT;
     26          //      }
     27          //    }
     28          //  }  
     29          //  if(count_debounce_SW1 <= DEBOUNCE_TIME){
     30          //    count_debounce_SW1++;
     31          //  }
     32          //  else{
     33          //    sw1Okay = OKAY;
     34          //    if(P4IN & SW1){
     35          //      sw1_pos = RELEASED;
     36          //    }
     37          //  }
     38          //}
     39          //void Switch2Process(void){
     40          //  if(sw2Okay && sw2_pos){
     41          //    if(!(P2IN & SW2)){
     42          //      sw2_pos = PRESSED;
     43          //      sw2Okay = NOT_OKAY;
     44          //      count_debounce_SW2 = DEBOUNCE_RESTART;
     45          //      //stopwatch_seconds = 0;
     46          //      //cycle_count = 0;
     47          //      //state = WAIT;
     48          //    }
     49          //  }  
     50          //  if(count_debounce_SW2 <= DEBOUNCE_TIME){
     51          //    count_debounce_SW2++;
     52          //  }
     53          //  else{
     54          //    sw2Okay = OKAY;
     55          //    if(P2IN & SW2){
     56          //      sw2_pos = RELEASED;
     57          //    }
     58          //  }
     59          //}
     60          
     61          #pragma vector=PORT4_VECTOR

   \                                 In  segment ISR_CODE, align 2
     62          __interrupt void switchP4_interrupt(void){
   \                     switchP4_interrupt:
     63            if(P4IFG & SW1){
   \   000000   E2B33D02     BIT.B   #0x2, &0x23d
   \   000004   0D28         JNC     ??switchP4_interrupt_0
     64              P4IFG &= ~SW1;
   \   000006   E2C33D02     BIC.B   #0x2, &0x23d
     65              if(state == START){
   \   00000A   F2905300.... CMP.B   #0x53, &state
   \   000010   0720         JNE     ??switchP4_interrupt_0
     66                  stopwatch_seconds = 0;
   \   000012   8243....     MOV.W   #0x0, &stopwatch_seconds
     67                  cycle_count = 0;
   \   000016   8243....     MOV.W   #0x0, &cycle_count
     68                  state = WAIT;
   \   00001A   F2405700.... MOV.B   #0x57, &state
     69              }
     70            }
     71          }
   \                     ??switchP4_interrupt_0:
   \   000020   0013         RETI
   \   000022                REQUIRE _A_PBIFG_L
     72          
     73          #pragma vector=PORT2_VECTOR

   \                                 In  segment ISR_CODE, align 2
     74          __interrupt void switchP2_interrupt(void){
   \                     switchP2_interrupt:
     75            if(P2IFG & SW2){
   \   000000   F2B21D02     BIT.B   #0x8, &0x21d
   \   000004   0428         JNC     ??switchP2_interrupt_0
     76              P2IFG &= ~SW2;
   \   000006   F2C21D02     BIC.B   #0x8, &0x21d
     77              P1OUT |= RED_LED;
   \   00000A   D2D30202     BIS.B   #0x1, &0x202
     78            }
     79          }
   \                     ??switchP2_interrupt_0:
   \   00000E   0013         RETI
   \   000010                REQUIRE _A_PAIFG_L
   \   000010                REQUIRE _A_PAOUT_L

   \                                 In  segment INTVEC, offset 0x2c, root
   \                     `??switchP4_interrupt::??INTVEC 44`:
   \   00002C   ....         DC16    switchP4_interrupt

   \                                 In  segment INTVEC, offset 0x30, root
   \                     `??switchP2_interrupt::??INTVEC 48`:
   \   000030   ....         DC16    switchP2_interrupt
     80          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   switchP2_interrupt
      4   switchP4_interrupt


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  _A_PAIFG_L
       2  _A_PAOUT_L
       2  _A_PBIFG_L
       2  count_debounce_SW1
       2  count_debounce_SW2
       2  sw1Okay
       2  sw1_pos
       2  sw2Okay
       2  sw2_pos
      16  switchP2_interrupt
       2  switchP2_interrupt::??INTVEC 48
      34  switchP4_interrupt
       2  switchP4_interrupt::??INTVEC 44

 
  6 bytes in segment DATA16_AN
 12 bytes in segment DATA16_Z
  4 bytes in segment INTVEC
 50 bytes in segment ISR_CODE
 
 50 bytes of CODE  memory
  0 bytes of CONST memory (+ 4 bytes shared)
 12 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: none
