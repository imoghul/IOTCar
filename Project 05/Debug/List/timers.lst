###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          15/Feb/2022  11:20:45
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 05\timers.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW2B5C.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 05\timers.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 05\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 05\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 05\Debug\List\timers.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 05\Debug\Obj\timers.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 05\timers.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x380
   \   union <unnamed> _A_TB0CTL_L
   \                     _A_TB0CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3a0
   \   union <unnamed> _A_TB0EX0_L
   \                     _A_TB0EX0_L:
   \   000000                DS8 2
      2          #include "timers.h"
      3          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      4          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2
      5          extern volatile unsigned char update_display;
      6          

   \                                 In  segment CODE, align 2
      7          void Init_Timers(void){
   \                     Init_Timers:
      8            Init_Timer_B0();
   \   000000   ........     CALLA   #Init_Timer_B0
      9          }
   \   000004   1001         RETA
     10          

   \                                 In  segment CODE, align 2
     11          void Init_Timer_B0(void) {
   \                     Init_Timer_B0:
     12            TB0CTL = TBSSEL__SMCLK; // SMCLK source
   \   000000   B24000028003 MOV.W   #0x200, &0x380
     13            TB0CTL |= TBCLR; // Resets TB0R, clock divider, count direction
   \   000006   A2D28003     BIS.W   #0x4, &0x380
     14            TB0CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D020008003 BIS.W   #0x20, &0x380
     15            TB0CTL |= ID__2; // Divide clock by 2
   \   000010   B2D040008003 BIS.W   #0x40, &0x380
     16            TB0EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000016   B2400700A003 MOV.W   #0x7, &0x3a0
     17            TB0CCR0 = TB0CCR0_INTERVAL; // CCR0
   \   00001C   B240C4099203 MOV.W   #0x9c4, &0x392
     18            TB0CCTL0 |= CCIE; // CCR0 enable interrupt
   \   000022   B2D010008203 BIS.W   #0x10, &0x382
     19            // TB0CCR1 = TB0CCR1_INTERVAL; // CCR1
     20            // TB0CCTL1 |= CCIE; // CCR1 enable interrupt
     21            // TB0CCR2 = TB0CCR2_INTERVAL; // CCR2
     22            // TB0CCTL2 |= CCIE; // CCR2 enable interrupt
     23            TB0CTL &= ~TBIE; // Disable Overflow Interrupt
   \   000028   A2C38003     BIC.W   #0x2, &0x380
     24            TB0CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   00002C   92C38003     BIC.W   #0x1, &0x380
     25          }
   \   000030   1001         RETA
   \   000032                REQUIRE _A_TB0CTL_L
   \   000032                REQUIRE _A_TB0EX0_L
   \   000032                REQUIRE _A_TB0CCR0_L
   \   000032                REQUIRE _A_TB0CCTL0_L
     26          
     27          #pragma vector = TIMER0_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     28          __interrupt void Timer0_B0_ISR(void){
   \                     Timer0_B0_ISR:
     29          //------------------------------------------------------------------------------
     30          // TimerB0 0 Interrupt handler
     31          //----------------------------------------------------------------------------
     32          //...... Add What you need happen in the interrupt ......
     33          Time_Sequence++;
   \   000000   9253....     ADD.W   #0x1, &Time_Sequence
     34          update_display=1;
   \   000004   D243....     MOV.B   #0x1, &update_display
     35          TB0CCR0 += TB0CCR0_INTERVAL; // Add Offset to TBCCR0
   \   000008   B250C4099203 ADD.W   #0x9c4, &0x392
     36          //----------------------------------------------------------------------------
     37          }
   \   00000E   0013         RETI
   \   000010                REQUIRE _A_TB0CCR0_L

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??Timer0_B0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    Timer0_B0_ISR
     38          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_B0
      4   Init_Timers
        4   -> Init_Timer_B0
      4   Timer0_B0_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      50  Init_Timer_B0
       6  Init_Timers
       2  Time_Sequence
      16  Timer0_B0_ISR
       2  Timer0_B0_ISR::??INTVEC 86
       2  _A_TB0CCR0_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CTL_L
       2  _A_TB0EX0_L

 
 56 bytes in segment CODE
  8 bytes in segment DATA16_AN
  2 bytes in segment DATA16_Z
  2 bytes in segment INTVEC
 16 bytes in segment ISR_CODE
 
 72 bytes of CODE  memory
  0 bytes of CONST memory (+ 2 bytes shared)
  2 bytes of DATA  memory (+ 8 bytes shared)

Errors: none
Warnings: none
