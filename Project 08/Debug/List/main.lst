###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          28/Mar/2022  14:12:00
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 08\main.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWDBB3.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 08\main.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 08\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 08\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 08\Debug\List\main.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 08\Debug\Obj\main.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 08\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x506
   \   union <unnamed> _A_UCA0BRW_L
   \                     _A_UCA0BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x508
   \   union <unnamed> _A_UCA0MCTLW_L
   \                     _A_UCA0MCTLW_L:
   \   000000                DS8 2
     14          #include <string.h>
     15          #include "macros.h"
     16          #include "init.h"
     17          #include "led.h"
     18          #include "wheels.h"
     19          #include "ports.h"
     20          #include "switches.h"
     21          #include "timers.h"
     22          #include "adc.h"
     23          #include "detectors.h"
     24          #include "sm.h"
     25          #include "serial.h"
     26          // Function Prototypes
     27          void main(void);
     28          
     29          
     30          // Global Variables
     31          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     33          extern char display_line[4][11];
     34          extern char *display[4];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     36          extern volatile unsigned char display_changed;
     37          extern volatile unsigned char update_display;
     38          extern volatile unsigned int update_display_count;
     39          extern volatile unsigned int Time_Sequence;
     40          extern volatile char one_time;
     41          extern volatile unsigned int wheel_tick;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          unsigned int Last_Time_Sequence;
   \                     Last_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          volatile unsigned int cycle_count;
   \                     cycle_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     47          volatile unsigned int stopwatch_seconds;
   \                     stopwatch_seconds:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          volatile unsigned int time_change;
   \                     time_change:
   \   000000                DS8 2
     49          extern volatile unsigned int right_tick, left_tick;
     50          extern char adc_char[5];
     51          extern volatile unsigned int ADC_Left_Detect, ADC_Right_Detect;
     52          extern char movingDirection;
     53          extern char enteringDirection;
     54          extern float timeElapsed;
     55          extern char state;
     56          extern volatile unsigned int stopwatchUpdated;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     57          unsigned volatile UCA0_index,UCA1_index;
   \                     UCA0_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     UCA1_index:
   \   000000                DS8 2
     58          extern volatile char USB0_Char_Tx[];
     59          extern volatile unsigned int pb0_buffered;
     60          extern volatile unsigned int usb0_rx_wr,usb0_rx_rd;
     61          extern volatile unsigned int serialState;
     62          //===========================================================================
     63          // Function name: Main
     64          //
     65          // Description: This function contains the while loop that runs continuously
     66          // to act for the operating system. It also calls all the functions to
     67          // initialize the system.
     68          //
     69          // Passed : no variables passed
     70          // Locals: no variables declared
     71          // Returned: no values returned
     72          // Globals: char* display_1
     73          // char* display_2
     74          // slow_input_down
     75          // control_state[CNTL_STATE_INDEX]
     76          //
     77          // Author: Ibrahim Moghul
     78          // Date: Feb 2022
     79          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     80          //===========================================================================
     81          

   \                                 In  segment CODE, align 2
     82          void main(void) {
   \                     main:
     83              //------------------------------------------------------------------------------
     84              // Main Program
     85              // This is the main routine for the program. Execution of code starts here.
     86              // The operating system is Back Ground Fore Ground.
     87              //
     88              //------------------------------------------------------------------------------
     89              PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     90              // Disable the GPIO power-on default high-impedance mode to activate
     91              // previously configured port settings
     92          
     93              Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     94              Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     95              Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     96              Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     97              Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     98              Init_REF();
   \   000018   ........     CALLA   #Init_REF
     99              Init_DAC();
   \   00001C   ........     CALLA   #Init_DAC
    100              Init_ADC();
   \   000020   ........     CALLA   #Init_ADC
    101              Init_Serial_UCA();
   \   000024   ........     CALLA   #Init_Serial_UCA
    102              EmitterOn();
   \   000028   ........     CALLA   #EmitterOn
    103              // Place the contents of what you want on the display, in between the quotes
    104              // Limited to 10 characters per line
    105              strcpy(display_line[0], "WAITING...");
   \   00002C   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   000030   3C40....     MOV.W   #display_line, R12
   \   000034   ........     CALLA   #strcpy
    106              strcpy(display_line[1], "          ");
   \   000038   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00003C   3C40....     MOV.W   #display_line + 11, R12
   \   000040   ........     CALLA   #strcpy
    107              strcpy(display_line[2], "          ");
   \   000044   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000048   3C40....     MOV.W   #display_line + 22, R12
   \   00004C   ........     CALLA   #strcpy
    108              strcpy(display_line[3], "          ");
   \   000050   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000054   3C40....     MOV.W   #display_line + 33, R12
   \   000058   ........     CALLA   #strcpy
    109              display_changed = TRUE;
   \   00005C   D243....     MOV.B   #0x1, &display_changed
    110          
    111              //------------------------------------------------------------------------------
    112              // Begining of the "While" Operating System
    113              //------------------------------------------------------------------------------
    114              while(ALWAYS) {                       // Can the Operating system run
    115                  Display_Process();                  // Update Display
   \                     ??main_0:
   \   000060   ........     CALLA   #Display_Process
    116                  SerialProcess();
   \   000064   ........     CALLA   #SerialProcess
    117                  //DetectMovement();
    118                  //StateMachine();                     // Run wheels state machine
    119                  MotorSafety();
   \   000068   ........     CALLA   #MotorSafety
    120                  P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   00006C   D2E32202     XOR.B   #0x1, &0x222
    121                  /*if(movingDirection == MOVING_RIGHT) strcpy(display_line[1], "  RIGHT   ");
    122                  else if(movingDirection == MOVING_STRAIGHT) strcpy(display_line[1], " STRAIGHT ");
    123                  else if (movingDirection == MOVING_LEFT) strcpy(display_line[1], "   LEFT   ");
    124                  else if (movingDirection == NOT_MOVING) strcpy(display_line[1], "NOT MOVING");*/
    125          
    126                  /*if(stopwatchUpdated){
    127                    stopwatchUpdated = 0;
    128                    HEXtoBCD((int)timeElapsed,3,0);
    129                    display_line[3][4]='.';
    130                    display_line[3][5]=(int)(10*(timeElapsed-(int)timeElapsed))+0x30;
    131                    display_changed = 1;
    132                  }*/
    133                  
    134                  //strcpy(display_line[2], "   Baud   ");
    135                  
    136                  
    137                  if(UCA0BRW == 4 && UCA0MCTLW == 0x5551){
   \   000070   A2920605     CMP.W   #0x4, &0x506
   \   000074   0D20         JNE     ??main_2
   \   000076   B29051550805 CMP.W   #0x5551, &0x508
   \   00007C   0920         JNE     ??main_2
    138                    strcpy(display_line[2], "  115200  ");
   \   00007E   3D40....     MOV.W   #`?<Constant "  115200  ">`, R13
   \   000082   3C40....     MOV.W   #display_line + 22, R12
   \   000086   ........     CALLA   #strcpy
    139                    display_changed=1;
   \   00008A   D243....     MOV.B   #0x1, &display_changed
   \   00008E   0F3C         JMP     ??main_1
    140                  }
    141                  else if(UCA0BRW == 1 && UCA0MCTLW == 0x4A11){
   \                     ??main_2:
   \   000090   92930605     CMP.W   #0x1, &0x506
   \   000094   0C20         JNE     ??main_1
   \   000096   B290114A0805 CMP.W   #0x4a11, &0x508
   \   00009C   0820         JNE     ??main_1
    142                    strcpy(display_line[2], "  460800  ");
   \   00009E   3D40....     MOV.W   #`?<Constant "  460800  ">`, R13
   \   0000A2   3C40....     MOV.W   #display_line + 22, R12
   \   0000A6   ........     CALLA   #strcpy
    143                    display_changed=1;
   \   0000AA   D243....     MOV.B   #0x1, &display_changed
    144                  }
    145                  
    146                  /*if(serialState==1){
    147                    strcpy(display_line[0], " TRANSMIT ");
    148                    display_changed=1;
    149                  }
    150                  else if(serialState==2) {
    151                    strcpy(display_line[0], " RECIEVED ");
    152                    display_changed=1;
    153                  }*/
    154                    
    155                  
    156                  if(cycle_count==0){
   \                     ??main_1:
   \   0000AE   8293....     CMP.W   #0x0, &cycle_count
   \   0000B2   0220         JNE     ??main_3
    157                    display_changed = 1;
   \   0000B4   D243....     MOV.B   #0x1, &display_changed
    158                  }
    159          
    160                  if(Last_Time_Sequence != Time_Sequence) {
   \                     ??main_3:
   \   0000B8   9292........ CMP.W   &Time_Sequence, &Last_Time_Sequence
   \   0000BE   D027         JEQ     ??main_0
    161                      Last_Time_Sequence = Time_Sequence;
   \   0000C0   9242........ MOV.W   &Time_Sequence, &Last_Time_Sequence
    162                      cycle_count++;
   \   0000C6   9253....     ADD.W   #0x1, &cycle_count
    163                      time_change = 1;
   \   0000CA   9243....     MOV.W   #0x1, &time_change
    164          
    165                      if(cycle_count == TIME_SEQUENCE_MAX) {
   \   0000CE   B290FA00.... CMP.W   #0xfa, &cycle_count
   \   0000D4   C523         JNE     ??main_0
    166                          cycle_count = 0;
   \   0000D6   8243....     MOV.W   #0x0, &cycle_count
    167                          stopwatch_seconds++;
   \   0000DA   9253....     ADD.W   #0x1, &stopwatch_seconds
   \   0000DE   C03F         JMP     ??main_0
   \   0000E0   0343         NOP
   \   0000E2                REQUIRE _A_PM5CTL0_L
   \   0000E2                REQUIRE _A_PBOUT_L
   \   0000E2                REQUIRE _A_UCA0BRW_L
   \   0000E2                REQUIRE _A_UCA0MCTLW_L
    168                      }
    169                  }
    170              }
    171          
    172              //------------------------------------------------------------------------------
    173          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WAITING...">`:
   \   000000   57414954494E DC8 "WAITING..."
   \            472E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  115200  ">`:
   \   000000   202031313532 DC8 "  115200  "
   \            3030202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  460800  ">`:
   \   000000   202034363038 DC8 "  460800  "
   \            3030202000  
    174          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> EmitterOn
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_DAC
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_REF
        4   -> Init_Serial_UCA
        4   -> Init_Timers
        4   -> MotorSafety
        4   -> SerialProcess
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "  115200  ">
      11  ?<Constant "  460800  ">
      11  ?<Constant "WAITING...">
       2  Last_Time_Sequence
       2  UCA0_index
       2  UCA1_index
       2  _A_PBOUT_L
       2  _A_PM5CTL0_L
       2  _A_UCA0BRW_L
       2  _A_UCA0MCTLW_L
       1  change
       1  chosen_direction
       2  cycle_count
       1  display_mode
     226  main
       1  slow_input_down
       2  stopwatch_seconds
       2  test_value
       2  time_change

 
 226 bytes in segment CODE
   8 bytes in segment DATA16_AN
  44 bytes in segment DATA16_C
  18 bytes in segment DATA16_Z
 
 226 bytes of CODE  memory
  44 bytes of CONST memory
  18 bytes of DATA  memory (+ 8 bytes shared)

Errors: none
Warnings: none
