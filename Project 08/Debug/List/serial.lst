###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          26/Mar/2022  12:10:42
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 08\serial.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWBF54.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 08\serial.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 08\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 08\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 08\Debug\List\serial.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 08\Debug\Obj\serial.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 08\serial.c
      1          #include "serial.h"
      2          #include <string.h>
      3          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x500
   \   union <unnamed> _A_UCA0CTLW0_L
   \                     _A_UCA0CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x506
   \   union <unnamed> _A_UCA0BRW_L
   \                     _A_UCA0BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x508
   \   union <unnamed> _A_UCA0MCTLW_L
   \                     _A_UCA0MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x50c
   \   union <unnamed> _A_UCA0RXBUF_L
   \                     _A_UCA0RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x50e
   \   union <unnamed> _A_UCA0TXBUF_L
   \                     _A_UCA0TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x51a
   \   union <unnamed> _A_UCA0IE_L
   \                     _A_UCA0IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x51c
   \   union <unnamed> _A_UCA0IFG_L
   \                     _A_UCA0IFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x51e
   \   union <unnamed> _A_UCA0IV_L
   \                     _A_UCA0IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x580
   \   union <unnamed> _A_UCA1CTLW0_L
   \                     _A_UCA1CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x586
   \   union <unnamed> _A_UCA1BRW_L
   \                     _A_UCA1BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x588
   \   union <unnamed> _A_UCA1MCTLW_L
   \                     _A_UCA1MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x58c
   \   union <unnamed> _A_UCA1RXBUF_L
   \                     _A_UCA1RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x58e
   \   union <unnamed> _A_UCA1TXBUF_L
   \                     _A_UCA1TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x59a
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x59e
   \   union <unnamed> _A_UCA1IV_L
   \                     _A_UCA1IV_L:
   \   000000                DS8 2
      4          
      5          // global variables

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      6          volatile unsigned int usb0_rx_wr,usb1_rx_wr;
   \                     usb0_rx_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     usb1_rx_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      7          unsigned int usb0_rx_rd,usb1_rx_rd;
   \                     usb0_rx_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     usb1_rx_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      8          volatile char USB0_Char_Rx_Ring[SMALL_RING_SIZE],USB0_Char_Rx_Process[LARGE_RING_SIZE];
   \                     USB0_Char_Rx_Ring:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     USB0_Char_Rx_Process:
   \   000000                DS8 25

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      9          volatile char USB1_Char_Rx_Ring[SMALL_RING_SIZE],USB1_Char_Rx_Process[LARGE_RING_SIZE];
   \                     USB1_Char_Rx_Ring:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     USB1_Char_Rx_Process:
   \   000000                DS8 25

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          volatile char USB0_Char_Tx[LARGE_RING_SIZE],USB1_Char_Tx[LARGE_RING_SIZE];
   \                     USB0_Char_Tx:
   \   000000                DS8 25

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     USB1_Char_Tx:
   \   000000                DS8 25

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          unsigned volatile int pb0_index,pb1_index;
   \                     pb0_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     pb1_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          unsigned volatile int tx0_index,tx1_index;
   \                     tx0_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     tx1_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          unsigned volatile int pb0_buffered,pb1_buffered;
   \                     pb0_buffered:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     pb1_buffered:
   \   000000                DS8 2
     14          extern volatile unsigned char display_changed;
     15          extern char display_line[4][11];
     16          
     17          //----------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     18          void Init_Serial_UCA(void) {
   \                     Init_Serial_UCA:
     19              int i;
     20          
     21              for(i = 0; i < SMALL_RING_SIZE; i++) {
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA_0:
   \   000002   3F901000     CMP.W   #0x10, R15
   \   000006   0634         JGE     ??Init_Serial_UCA_2
     22                  USB0_Char_Rx_Ring[i] = 0x00;
   \   000008   CF43....     MOV.B   #0x0, USB0_Char_Rx_Ring(R15)
     23                  USB1_Char_Rx_Ring[i] = 0x00;
   \   00000C   CF43....     MOV.B   #0x0, USB1_Char_Rx_Ring(R15)
     24              }
   \   000010   1F53         ADD.W   #0x1, R15
   \   000012   F73F         JMP     ??Init_Serial_UCA_0
     25          
     26              usb0_rx_wr = BEGINNING;
   \                     ??Init_Serial_UCA_2:
   \   000014   8243....     MOV.W   #0x0, &usb0_rx_wr
     27              usb0_rx_rd = BEGINNING;
   \   000018   8243....     MOV.W   #0x0, &usb0_rx_rd
     28              usb1_rx_wr = BEGINNING;
   \   00001C   8243....     MOV.W   #0x0, &usb1_rx_wr
     29              usb1_rx_rd = BEGINNING;
   \   000020   8243....     MOV.W   #0x0, &usb1_rx_rd
     30          
     31              for(i = 0; i < LARGE_RING_SIZE; i++) {
   \   000024   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA_1:
   \   000026   3F901900     CMP.W   #0x19, R15
   \   00002A   0634         JGE     ??Init_Serial_UCA_3
     32                  USB0_Char_Tx[i] = 0x00;
   \   00002C   CF43....     MOV.B   #0x0, USB0_Char_Tx(R15)
     33                  USB1_Char_Tx[i] = 0x00;
   \   000030   CF43....     MOV.B   #0x0, USB1_Char_Tx(R15)
     34              }
   \   000034   1F53         ADD.W   #0x1, R15
   \   000036   F73F         JMP     ??Init_Serial_UCA_1
     35          
     36              //usb0_tx_ring_wr = BEGINNING;
     37              //usb0_tx_ring_rd = BEGINNING;
     38              //usb1_tx_ring_wr = BEGINNING;
     39              //usb1_tx_ring_rd = BEGINNING;
     40              
     41              // Configure UART 0
     42              UCA0CTLW0 = 0;
   \                     ??Init_Serial_UCA_3:
   \   000038   82430005     MOV.W   #0x0, &0x500
     43              UCA0CTLW0 |= UCSWRST;
   \   00003C   92D30005     BIS.W   #0x1, &0x500
     44              UCA0CTLW0 |= UCSSEL__SMCLK;
   \   000040   B2D080000005 BIS.W   #0x80, &0x500
     45              UCA0BRW = 4;
   \   000046   A2420605     MOV.W   #0x4, &0x506
     46              UCA0MCTLW = 0x5551;
   \   00004A   B24051550805 MOV.W   #0x5551, &0x508
     47              UCA0CTLW0 &= ~UCSWRST;
   \   000050   92C30005     BIC.W   #0x1, &0x500
     48              UCA0IE |= UCRXIE;
   \   000054   92D31A05     BIS.W   #0x1, &0x51a
     49              // Configure UART 1
     50              UCA1CTLW0 = 0;
   \   000058   82438005     MOV.W   #0x0, &0x580
     51              UCA1CTLW0 |= UCSWRST;
   \   00005C   92D38005     BIS.W   #0x1, &0x580
     52              UCA1CTLW0 |= UCSSEL__SMCLK;
   \   000060   B2D080008005 BIS.W   #0x80, &0x580
     53              UCA1BRW = 4;
   \   000066   A2428605     MOV.W   #0x4, &0x586
     54              UCA1MCTLW = 0x5551;
   \   00006A   B24051558805 MOV.W   #0x5551, &0x588
     55              UCA1CTLW0 &= ~UCSWRST;
   \   000070   92C38005     BIC.W   #0x1, &0x580
     56              UCA1IE |= UCRXIE;
   \   000074   92D39A05     BIS.W   #0x1, &0x59a
     57          }
   \   000078   1001         RETA
   \   00007A                REQUIRE _A_UCA0CTLW0_L
   \   00007A                REQUIRE _A_UCA0BRW_L
   \   00007A                REQUIRE _A_UCA0MCTLW_L
   \   00007A                REQUIRE _A_UCA0IE_L
   \   00007A                REQUIRE _A_UCA1CTLW0_L
   \   00007A                REQUIRE _A_UCA1BRW_L
   \   00007A                REQUIRE _A_UCA1MCTLW_L
   \   00007A                REQUIRE _A_UCA1IE_L
     58          //------------------------------------------------------------------------------
     59          #pragma vector=EUSCI_A0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     60          __interrupt void eUSCI_A0_ISR(void) {
   \                     eUSCI_A0_ISR:
   \   000000   5F15         PUSHM.W #0x6, R15
     61              unsigned int temp;
     62          
     63              switch(__even_in_range(UCA0IV, 0x08)) {
   \   000002   1F421E05     MOV.W   &0x51e, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for eUSCI_A0_ISR>_0`:
   \   000008   2E3C         JMP     ??eUSCI_A0_ISR_2
   \   00000A   033C         JMP     ??eUSCI_A0_ISR_3
   \   00000C   143C         JMP     ??eUSCI_A0_ISR_4
   \   00000E   2B3C         JMP     ??eUSCI_A0_ISR_2
   \   000010   2A3C         JMP     ??eUSCI_A0_ISR_2
     64                  case 0:
     65                      break;
     66          
     67                  case 2: // RXIFG
     68                      temp = usb0_rx_wr++;
   \                     ??eUSCI_A0_ISR_3:
   \   000012   1F42....     MOV.W   &usb0_rx_wr, R15
   \   000016   0E4F         MOV.W   R15, R14
   \   000018   1E53         ADD.W   #0x1, R14
   \   00001A   824E....     MOV.W   R14, &usb0_rx_wr
   \   00001E   0A4F         MOV.W   R15, R10
     69                      USB0_Char_Rx_Ring[temp] = UCA0RXBUF;
   \   000020   1E420C05     MOV.W   &0x50c, R14
   \   000024   CA4E....     MOV.B   R14, USB0_Char_Rx_Ring(R10)
     70                      
     71                      if (usb0_rx_wr >= (sizeof(USB0_Char_Rx_Ring))) {
   \   000028   B2901000.... CMP.W   #0x10, &usb0_rx_wr
   \   00002E   1B28         JNC     ??eUSCI_A0_ISR_2
     72                          usb0_rx_wr = BEGINNING;
   \   000030   8243....     MOV.W   #0x0, &usb0_rx_wr
     73                      }
     74          
     75                      break;
   \   000034   183C         JMP     ??eUSCI_A0_ISR_2
     76          
     77                  case 4: // TXIFG
     78                    UCA0TXBUF = USB0_Char_Tx[tx0_index];
   \                     ??eUSCI_A0_ISR_4:
   \   000036   1F42....     MOV.W   &tx0_index, R15
   \   00003A   5F4F....     MOV.B   USB0_Char_Tx(R15), R15
   \   00003E   4F4F         MOV.B   R15, R15
   \   000040   824F0E05     MOV.W   R15, &0x50e
     79                    USB0_Char_Tx[tx0_index++] = 0;
   \   000044   1F42....     MOV.W   &tx0_index, R15
   \   000048   0E4F         MOV.W   R15, R14
   \   00004A   1E53         ADD.W   #0x1, R14
   \   00004C   824E....     MOV.W   R14, &tx0_index
   \   000050   CF43....     MOV.B   #0x0, USB0_Char_Tx(R15)
     80                    if(USB0_Char_Tx[tx0_index] == 0) {
   \   000054   1F42....     MOV.W   &tx0_index, R15
   \   000058   CF93....     CMP.B   #0x0, USB0_Char_Tx(R15)
   \   00005C   0420         JNE     ??eUSCI_A0_ISR_2
     81                      UCA0IE &= ~UCTXIE;
   \   00005E   A2C31A05     BIC.W   #0x2, &0x51a
     82                      clearProcessBuff_0();
   \   000062   ........     CALLA   #clearProcessBuff_0
     83                    }
     84                    break;
     85          
     86                  default:
     87                      break;
     88              }
     89          }
   \                     ??eUSCI_A0_ISR_2:
   \   000066   5A17         POPM.W  #0x6, R15
   \   000068   0013         RETI
   \   00006A                REQUIRE _A_UCA0RXBUF_L
   \   00006A                REQUIRE _A_UCA0TXBUF_L
   \   00006A                REQUIRE _A_UCA0IE_L
   \   00006A                REQUIRE _A_UCA0IV_L
     90          
     91          #pragma vector=EUSCI_A1_VECTOR

   \                                 In  segment ISR_CODE, align 2
     92          __interrupt void eUSCI_A1_ISR(void) {
   \                     eUSCI_A1_ISR:
   \   000000   5F15         PUSHM.W #0x6, R15
     93              unsigned int temp;
     94          
     95              switch(__even_in_range(UCA1IV, 0x08)) {
   \   000002   1F429E05     MOV.W   &0x59e, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for eUSCI_A1_ISR>_0`:
   \   000008   2E3C         JMP     ??eUSCI_A1_ISR_2
   \   00000A   033C         JMP     ??eUSCI_A1_ISR_3
   \   00000C   143C         JMP     ??eUSCI_A1_ISR_4
   \   00000E   2B3C         JMP     ??eUSCI_A1_ISR_2
   \   000010   2A3C         JMP     ??eUSCI_A1_ISR_2
     96                  case 0:
     97                      break;
     98          
     99                  case 2: // RXIFG
    100                      temp = usb1_rx_wr++;
   \                     ??eUSCI_A1_ISR_3:
   \   000012   1F42....     MOV.W   &usb1_rx_wr, R15
   \   000016   0E4F         MOV.W   R15, R14
   \   000018   1E53         ADD.W   #0x1, R14
   \   00001A   824E....     MOV.W   R14, &usb1_rx_wr
   \   00001E   0A4F         MOV.W   R15, R10
    101                      USB1_Char_Rx_Ring[temp] = UCA1RXBUF;
   \   000020   1E428C05     MOV.W   &0x58c, R14
   \   000024   CA4E....     MOV.B   R14, USB1_Char_Rx_Ring(R10)
    102                      
    103                      if (usb1_rx_wr >= (sizeof(USB1_Char_Rx_Ring))) {
   \   000028   B2901000.... CMP.W   #0x10, &usb1_rx_wr
   \   00002E   1B28         JNC     ??eUSCI_A1_ISR_2
    104                          usb1_rx_wr = BEGINNING;
   \   000030   8243....     MOV.W   #0x0, &usb1_rx_wr
    105                      }
    106          
    107                      break;
   \   000034   183C         JMP     ??eUSCI_A1_ISR_2
    108          
    109                  case 4: // TXIFG
    110                    UCA1TXBUF = USB1_Char_Tx[tx1_index];
   \                     ??eUSCI_A1_ISR_4:
   \   000036   1F42....     MOV.W   &tx1_index, R15
   \   00003A   5F4F....     MOV.B   USB1_Char_Tx(R15), R15
   \   00003E   4F4F         MOV.B   R15, R15
   \   000040   824F8E05     MOV.W   R15, &0x58e
    111                    USB1_Char_Tx[tx1_index++] = 0;
   \   000044   1F42....     MOV.W   &tx1_index, R15
   \   000048   0E4F         MOV.W   R15, R14
   \   00004A   1E53         ADD.W   #0x1, R14
   \   00004C   824E....     MOV.W   R14, &tx1_index
   \   000050   CF43....     MOV.B   #0x0, USB1_Char_Tx(R15)
    112                    if(USB1_Char_Tx[tx1_index] == 0) {
   \   000054   1F42....     MOV.W   &tx1_index, R15
   \   000058   CF93....     CMP.B   #0x0, USB1_Char_Tx(R15)
   \   00005C   0420         JNE     ??eUSCI_A1_ISR_2
    113                      UCA1IE &= ~UCTXIE;
   \   00005E   A2C39A05     BIC.W   #0x2, &0x59a
    114                      clearProcessBuff_1();
   \   000062   ........     CALLA   #clearProcessBuff_1
    115                    }
    116                    break;
    117          
    118                  default:
    119                      break;
    120              }
    121          }
   \                     ??eUSCI_A1_ISR_2:
   \   000066   5A17         POPM.W  #0x6, R15
   \   000068   0013         RETI
   \   00006A                REQUIRE _A_UCA1RXBUF_L
   \   00006A                REQUIRE _A_UCA1TXBUF_L
   \   00006A                REQUIRE _A_UCA1IE_L
   \   00006A                REQUIRE _A_UCA1IV_L
    122          

   \                                 In  segment CODE, align 2
    123          void clearProcessBuff(volatile char* pb,volatile unsigned int* pb_index,volatile unsigned int* pb_buffered){
   \                     clearProcessBuff:
   \   000000   0A12         PUSH.W  R10
    124            for(int i = 0;i<LARGE_RING_SIZE;++i)pb[i]=0;
   \   000002   0A43         MOV.W   #0x0, R10
   \                     ??clearProcessBuff_0:
   \   000004   3A901900     CMP.W   #0x19, R10
   \   000008   0634         JGE     ??clearProcessBuff_1
   \   00000A   0F4C         MOV.W   R12, R15
   \   00000C   0F5A         ADD.W   R10, R15
   \   00000E   CF430000     MOV.B   #0x0, 0(R15)
   \   000012   1A53         ADD.W   #0x1, R10
   \   000014   F73F         JMP     ??clearProcessBuff_0
    125            *pb_index=0;
   \                     ??clearProcessBuff_1:
   \   000016   8D430000     MOV.W   #0x0, 0(R13)
    126            *pb_buffered=0;
   \   00001A   8E430000     MOV.W   #0x0, 0(R14)
    127          }
   \   00001E   3A41         POP.W   R10
   \   000020   1001         RETA

   \                                 In  segment CODE, align 2
    128          void clearProcessBuff_0(void){
   \                     clearProcessBuff_0:
    129            clearProcessBuff(USB0_Char_Rx_Process,&pb0_index,&pb0_buffered);
   \   000000   3E40....     MOV.W   #pb0_buffered, R14
   \   000004   3D40....     MOV.W   #pb0_index, R13
   \   000008   3C40....     MOV.W   #USB0_Char_Rx_Process, R12
   \   00000C   ........     CALLA   #clearProcessBuff
    130          }
   \   000010   1001         RETA

   \                                 In  segment CODE, align 2
    131          void clearProcessBuff_1(void){
   \                     clearProcessBuff_1:
    132            clearProcessBuff(USB1_Char_Rx_Process,&pb1_index,&pb1_buffered);
   \   000000   3E40....     MOV.W   #pb1_buffered, R14
   \   000004   3D40....     MOV.W   #pb1_index, R13
   \   000008   3C40....     MOV.W   #USB1_Char_Rx_Process, R12
   \   00000C   ........     CALLA   #clearProcessBuff
    133          }
   \   000010   1001         RETA
    134          

   \                                 In  segment CODE, align 2
    135          void out_character(char character) {
   \                     out_character:
   \                     ??out_character_0:
    136              //------------------------------------------------------------------------------
    137              // The while loop will stall as long as the Flag is not set [port is busy]
    138              while (!(UCA0IFG & UCTXIFG)); // USCI_A0 TX buffer ready?
   \   000000   A2B31C05     BIT.W   #0x2, &0x51c
   \   000004   FD2B         JNC     ??out_character_0
    139          
    140              UCA0TXBUF = character;
   \   000006   4C4C         MOV.B   R12, R12
   \   000008   824C0E05     MOV.W   R12, &0x50e
    141              //------------------------------------------------------------------------------
    142          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_UCA0IFG_L
   \   00000E                REQUIRE _A_UCA0TXBUF_L
    143          

   \                                 In  segment CODE, align 2
    144          void USCI_A0_transmit(void){
   \                     USCI_A0_transmit:
    145            tx0_index=0;
   \   000000   8243....     MOV.W   #0x0, &tx0_index
    146            UCA0IE |= UCTXIE;
   \   000004   A2D31A05     BIS.W   #0x2, &0x51a
    147          }
   \   000008   1001         RETA
   \   00000A                REQUIRE _A_UCA0IE_L

   \                                 In  segment CODE, align 2
    148          void USCI_A1_transmit(void){
   \                     USCI_A1_transmit:
    149            tx1_index=0;
   \   000000   8243....     MOV.W   #0x0, &tx1_index
    150            UCA1IE |= UCTXIE;
   \   000004   A2D39A05     BIS.W   #0x2, &0x59a
    151          }
   \   000008   1001         RETA
   \   00000A                REQUIRE _A_UCA1IE_L
    152          

   \                                 In  segment CODE, align 2
    153          void loadRingtoPB(volatile unsigned int* rx_wr,unsigned int* rx_rd,volatile char* Rx_Process,volatile char* Rx_Ring,volatile unsigned int* pb_index,volatile unsigned int* pb_buffered){
   \                     loadRingtoPB:
   \   000000   5B15         PUSHM.W #0x6, R11
   \   000002   1B411000     MOV.W   0x10(SP), R11
   \   000006   18411200     MOV.W   0x12(SP), R8
    154            if(*rx_wr != *rx_rd){
   \   00000A   AC9D0000     CMP.W   @R13, 0(R12)
   \   00000E   1C24         JEQ     ??loadRingtoPB_0
    155              Rx_Process[pb0_index] = Rx_Ring[*rx_rd];
                     ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is undefined
          in this statement
   \   000010   1942....     MOV.W   &pb0_index, R9
   \   000014   064F         MOV.W   R15, R6
   \   000016   265D         ADD.W   @R13, R6
   \   000018   0A4E         MOV.W   R14, R10
   \   00001A   0A59         ADD.W   R9, R10
   \   00001C   EA460000     MOV.B   @R6, 0(R10)
    156              if((*rx_rd)++ >= SMALL_RING_SIZE-1) *rx_rd = BEGINNING;
   \   000020   2A4D         MOV.W   @R13, R10
   \   000022   094A         MOV.W   R10, R9
   \   000024   1953         ADD.W   #0x1, R9
   \   000026   8D490000     MOV.W   R9, 0(R13)
   \   00002A   3A900F00     CMP.W   #0xf, R10
   \   00002E   0228         JNC     ??loadRingtoPB_1
   \   000030   8D430000     MOV.W   #0x0, 0(R13)
    157              if((*pb_index)++ >= LARGE_RING_SIZE-1) *pb_index=BEGINNING;
   \                     ??loadRingtoPB_1:
   \   000034   2A4B         MOV.W   @R11, R10
   \   000036   094A         MOV.W   R10, R9
   \   000038   1953         ADD.W   #0x1, R9
   \   00003A   8B490000     MOV.W   R9, 0(R11)
   \   00003E   3A901800     CMP.W   #0x18, R10
   \   000042   0228         JNC     ??loadRingtoPB_0
   \   000044   8B430000     MOV.W   #0x0, 0(R11)
    158            }
    159            if(*pb_index>=2 && Rx_Process[(*pb_index)-1]=='\n' && Rx_Process[(*pb_index)-2]=='\r') {
   \                     ??loadRingtoPB_0:
   \   000048   AB930000     CMP.W   #0x2, 0(R11)
   \   00004C   1228         JNC     ??loadRingtoPB_2
   \   00004E   2A4B         MOV.W   @R11, R10
   \   000050   094E         MOV.W   R14, R9
   \   000052   095A         ADD.W   R10, R9
   \   000054   F9900A00FFFF CMP.B   #0xa, 0xffff(R9)
   \   00005A   0B20         JNE     ??loadRingtoPB_2
   \   00005C   2A4B         MOV.W   @R11, R10
   \   00005E   094E         MOV.W   R14, R9
   \   000060   095A         ADD.W   R10, R9
   \   000062   F9900D00FEFF CMP.B   #0xd, 0xfffe(R9)
   \   000068   0420         JNE     ??loadRingtoPB_2
    160              *pb_buffered = 1;
   \   00006A   98430000     MOV.W   #0x1, 0(R8)
    161              *pb_index = BEGINNING;
   \   00006E   8B430000     MOV.W   #0x0, 0(R11)
    162            }
    163          }
   \                     ??loadRingtoPB_2:
   \   000072   5617         POPM.W  #0x6, R11
   \   000074   1001         RETA
    164          

   \                                 In  segment CODE, align 2
    165          void loadRingtoPB_0(void){
   \                     loadRingtoPB_0:
    166            loadRingtoPB(&usb0_rx_wr,&usb0_rx_rd,USB0_Char_Rx_Process,USB0_Char_Rx_Ring,&pb0_index,&pb0_buffered);
   \   000000   3012....     PUSH.W  #pb0_buffered
   \   000004   3012....     PUSH.W  #pb0_index
   \   000008   3F40....     MOV.W   #USB0_Char_Rx_Ring, R15
   \   00000C   3E40....     MOV.W   #USB0_Char_Rx_Process, R14
   \   000010   3D40....     MOV.W   #usb0_rx_rd, R13
   \   000014   3C40....     MOV.W   #usb0_rx_wr, R12
   \   000018   ........     CALLA   #loadRingtoPB
    167          }
   \   00001C   A1000400     ADDA    #0x4, SP
   \   000020   1001         RETA

   \                                 In  segment CODE, align 2
    168          void loadRingtoPB_1(void){
   \                     loadRingtoPB_1:
    169            loadRingtoPB(&usb1_rx_wr,&usb1_rx_rd,USB1_Char_Rx_Process,USB1_Char_Rx_Ring,&pb1_index,&pb1_buffered);
   \   000000   3012....     PUSH.W  #pb1_buffered
   \   000004   3012....     PUSH.W  #pb1_index
   \   000008   3F40....     MOV.W   #USB1_Char_Rx_Ring, R15
   \   00000C   3E40....     MOV.W   #USB1_Char_Rx_Process, R14
   \   000010   3D40....     MOV.W   #usb1_rx_rd, R13
   \   000014   3C40....     MOV.W   #usb1_rx_wr, R12
   \   000018   ........     CALLA   #loadRingtoPB
    170          }
   \   00001C   A1000400     ADDA    #0x4, SP
   \   000020   1001         RETA
    171          

   \                                 In  segment CODE, align 2
    172          void copyPBtoTx_0(void){
   \                     copyPBtoTx_0:
    173            if(!pb0_buffered)return;
   \   000000   8293....     CMP.W   #0x0, &pb0_buffered
   \   000004   2124         JEQ     ??copyPBtoTx_0_3
    174            for(int i = 0;i<sizeof(USB0_Char_Rx_Process);++i) USB0_Char_Tx[i] = USB0_Char_Rx_Process[i];
   \   000006   0F43         MOV.W   #0x0, R15
   \                     ??copyPBtoTx_0_0:
   \   000008   3F901900     CMP.W   #0x19, R15
   \   00000C   052C         JC      ??copyPBtoTx_0_4
   \   00000E   DF4F........ MOV.B   USB0_Char_Rx_Process(R15), USB0_Char_Tx(R15)
   \   000014   1F53         ADD.W   #0x1, R15
   \   000016   F83F         JMP     ??copyPBtoTx_0_0
    175            strcpy(display_line[3],(char*)USB0_Char_Tx);
   \                     ??copyPBtoTx_0_4:
   \   000018   3D40....     MOV.W   #USB0_Char_Tx, R13
   \   00001C   3C40....     MOV.W   #display_line + 33, R12
   \   000020   ........     CALLA   #strcpy
    176            for(int i = 0;i<10;++i)
   \   000024   0F43         MOV.W   #0x0, R15
   \                     ??copyPBtoTx_0_1:
   \   000026   3F900A00     CMP.W   #0xa, R15
   \   00002A   0C34         JGE     ??copyPBtoTx_0_5
    177              if(display_line[3][i] == '\r' || display_line[3][i]=='\n') display_line[3][i]=0;
   \   00002C   FF900D00.... CMP.B   #0xd, display_line + 33(R15)
   \   000032   0424         JEQ     ??copyPBtoTx_0_6
   \   000034   FF900A00.... CMP.B   #0xa, display_line + 33(R15)
   \   00003A   0220         JNE     ??copyPBtoTx_0_7
   \                     ??copyPBtoTx_0_6:
   \   00003C   CF43....     MOV.B   #0x0, display_line + 33(R15)
   \                     ??copyPBtoTx_0_7:
   \   000040   1F53         ADD.W   #0x1, R15
   \   000042   F13F         JMP     ??copyPBtoTx_0_1
    178            clearProcessBuff_0();
   \                     ??copyPBtoTx_0_5:
   \   000044   ........     CALLA   #clearProcessBuff_0
    179          }
   \                     ??copyPBtoTx_0_3:
   \   000048   1001         RETA
    180          
    181          

   \                                 In  segment CODE, align 2
    182          void SerialProcess(void){
   \                     SerialProcess:
    183            loadRingtoPB_0();
   \   000000   ........     CALLA   #loadRingtoPB_0
    184            loadRingtoPB_1();
   \   000004   ........     CALLA   #loadRingtoPB_1
    185            copyPBtoTx_0();
   \   000008   ........     CALLA   #copyPBtoTx_0
    186          }
   \   00000C   1001         RETA

   \                                 In  segment INTVEC, offset 0x40, root
   \                     `??eUSCI_A1_ISR::??INTVEC 64`:
   \   000040   ....         DC16    eUSCI_A1_ISR

   \                                 In  segment INTVEC, offset 0x42, root
   \                     `??eUSCI_A0_ISR::??INTVEC 66`:
   \   000042   ....         DC16    eUSCI_A0_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Serial_UCA
      4   SerialProcess
        4   -> copyPBtoTx_0
        4   -> loadRingtoPB_0
        4   -> loadRingtoPB_1
      4   USCI_A0_transmit
      4   USCI_A1_transmit
      6   clearProcessBuff
      4   clearProcessBuff_0
        4   -> clearProcessBuff
      4   clearProcessBuff_1
        4   -> clearProcessBuff
      4   copyPBtoTx_0
        4   -> clearProcessBuff_0
        4   -> strcpy
     16   eUSCI_A0_ISR
       16   -> clearProcessBuff_0
     16   eUSCI_A1_ISR
       16   -> clearProcessBuff_1
     16   loadRingtoPB
      8   loadRingtoPB_0
        8   -> loadRingtoPB
      8   loadRingtoPB_1
        8   -> loadRingtoPB
      4   out_character


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     122  Init_Serial_UCA
      14  SerialProcess
      25  USB0_Char_Rx_Process
      16  USB0_Char_Rx_Ring
      25  USB0_Char_Tx
      25  USB1_Char_Rx_Process
      16  USB1_Char_Rx_Ring
      25  USB1_Char_Tx
      10  USCI_A0_transmit
      10  USCI_A1_transmit
       2  _A_UCA0BRW_L
       2  _A_UCA0CTLW0_L
       2  _A_UCA0IE_L
       2  _A_UCA0IFG_L
       2  _A_UCA0IV_L
       2  _A_UCA0MCTLW_L
       2  _A_UCA0RXBUF_L
       2  _A_UCA0TXBUF_L
       2  _A_UCA1BRW_L
       2  _A_UCA1CTLW0_L
       2  _A_UCA1IE_L
       2  _A_UCA1IV_L
       2  _A_UCA1MCTLW_L
       2  _A_UCA1RXBUF_L
       2  _A_UCA1TXBUF_L
      34  clearProcessBuff
      18  clearProcessBuff_0
      18  clearProcessBuff_1
      74  copyPBtoTx_0
     106  eUSCI_A0_ISR
       2  eUSCI_A0_ISR::??INTVEC 66
     106  eUSCI_A1_ISR
       2  eUSCI_A1_ISR::??INTVEC 64
     118  loadRingtoPB
      34  loadRingtoPB_0
      34  loadRingtoPB_1
      14  out_character
       2  pb0_buffered
       2  pb0_index
       2  pb1_buffered
       2  pb1_index
       2  tx0_index
       2  tx1_index
       2  usb0_rx_rd
       2  usb0_rx_wr
       2  usb1_rx_rd
       2  usb1_rx_wr

 
 500 bytes in segment CODE
  30 bytes in segment DATA16_AN
 152 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 212 bytes in segment ISR_CODE
 
 712 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
 152 bytes of DATA  memory (+ 30 bytes shared)

Errors: none
Warnings: 1
