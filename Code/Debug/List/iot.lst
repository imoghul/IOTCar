###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          25/Apr/2022  16:18:10
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece306test\Project 10\iot.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW433E.tmp
#        ("C:\Users\saad\Documents\ece306test\Project 10\iot.c" -lC
#        "C:\Users\saad\Documents\ece306test\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\ece306test\Project 10\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece306test\Project 10\Debug\List\iot.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece306test\Project 10\Debug\Obj\iot.r43
#
###############################################################################

C:\Users\saad\Documents\ece306test\Project 10\iot.c
      1          #include "iot.h"
      2          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x51a
   \   union <unnamed> _A_UCA0IE_L
   \                     _A_UCA0IE_L:
   \   000000                DS8 2
      3          #include "utils.h"
      4          #include "menu.h"
      5          #include <string.h>
      6          #include "wheels.h"
      7          #include "utils.h"
      8          #include "serial.h"
      9          #include "ports.h"
     10          #include "sm.h"
     11          

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     12          char iot_setup_state = BOOT_UP;
   \                     iot_setup_state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for iot_setup_state>`
     13          extern volatile char USB0_Char_Tx[];
     14          extern unsigned volatile int pb0_buffered;
     15          extern volatile char USB0_Char_Rx_Process[];
     16          extern volatile char receievedFromPC;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          char SSID[SSID_LEN + 1];
   \                     SSID:
   \   000000                DS8 11

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          char IP[IP_LEN + 1];
   \                     IP:
   \   000000                DS8 14
     19          extern volatile unsigned char display_changed;
     20          extern char display_line[4][11];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          char dotFound;
   \                     dotFound:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          int midIndex;
   \                     midIndex:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          command CommandBuffer[COMMAND_BUFFER_LEN];
   \                     CommandBuffer:
   \   000000                DS8 20

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          char cb_index;
   \                     cb_index:
   \   000000                DS8 1
     25          extern volatile int stateCounter;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          char commandsReceieved;
   \                     commandsReceieved:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          char currentStation;
   \                     currentStation:
   \   000000                DS8 1
     28          extern int commandDisplayCounter;
     29          extern volatile unsigned int cycle_count;
     30          extern volatile unsigned int stopwatch_milliseconds;
     31          extern volatile unsigned int stopwatch_seconds;
     32          
     33          extern volatile char state;
     34          extern volatile int stateCounter, driveStateCounter;
     35          extern volatile char nextState;
     36          
     37          extern int speedRight, speedLeft;
     38          extern unsigned int driveTime;
     39          
     40          extern volatile char pingFlag;
     41          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          command emptyCommand = {0, 0};
   \                     emptyCommand:
   \   000000                DS8 4

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          command currCommand;
   \                     currCommand:
   \   000000                DS8 4
     44          
     45          

   \                                 In  segment CODE, align 2
     46          int Init_IOT(void) {
   \                     Init_IOT:
     47              int isTransmitting = UCA0IE & UCTXIE;
   \   000000   1E421A05     MOV.W   &0x51a, R14
   \   000004   6EF3         AND.B   #0x2, R14
     48          
     49              switch(iot_setup_state) {
   \   000006   5F42....     MOV.B   &iot_setup_state, R15
   \   00000A   7F804200     SUB.B   #0x42, R15
   \   00000E   1524         JEQ     ??Init_IOT_5
   \   000010   7F800700     SUB.B   #0x7, R15
   \   000014   4024         JEQ     ??Init_IOT_6
   \   000016   6F82         SUB.B   #0x4, R15
   \   000018   1424         JEQ     ??Init_IOT_7
   \   00001A   5F83         SUB.B   #0x1, R15
   \   00001C   3224         JEQ     ??Init_IOT_8
   \   00001E   7F800500     SUB.B   #0x5, R15
   \   000022   2124         JEQ     ??Init_IOT_9
   \   000024   7F801600     SUB.B   #0x16, R15
   \   000028   3B24         JEQ     ??Init_IOT_10
   \   00002A   6F82         SUB.B   #0x4, R15
   \   00002C   1124         JEQ     ??Init_IOT_11
   \   00002E   5F83         SUB.B   #0x1, R15
   \   000030   2D24         JEQ     ??Init_IOT_12
   \   000032   7F800500     SUB.B   #0x5, R15
   \   000036   1C24         JEQ     ??Init_IOT_13
   \   000038   3A3C         JMP     ??Init_IOT_3
     50                  case (BOOT_UP):
     51                      waitForReady();
   \                     ??Init_IOT_5:
   \   00003A   ........     CALLA   #waitForReady
     52                      break;
     53          
     54                  case CIPMUX_Tx:
     55                      SendIOTCommand(ALLOW_MULTIPLE_CONNECTIONS, CIPMUX_Rx);
     56                      break;
     57          
     58                  case CIPMUX_Rx:
     59                      if(isTransmitting) break; // wait for the Tx to completely transmit
     60          
     61                      if(pb0_buffered) { // wait for pb to finish buffering
     62                          iot_setup_state = CIPSERVER_Tx;
     63                          clearProcessBuff_0();
     64                      }
     65          
     66                      break;
     67          
     68                  case CIPSERVER_Tx:
     69                      SendIOTCommand(START_SERVER, CIPSERVER_Rx);
     70                      break;
     71          
     72                  case CIPSERVER_Rx:
     73                      if(isTransmitting) break;
     74          
     75                      if(pb0_buffered) {
     76                          iot_setup_state = GET_SSID_Tx;
     77                          clearProcessBuff_0();
     78                      }
     79          
     80                      break;
     81          
     82                  case GET_SSID_Tx:
     83                      SendIOTCommand(SSID_COMMAND, GET_SSID_Rx);
     84                      break;
     85          
     86                  case GET_SSID_Rx:
     87                      if(isTransmitting) break;
     88          
     89                      getSSID();
     90          
     91                      break;
     92          
     93                  case GET_IP_Tx:
     94                      SendIOTCommand(IP_COMMAND, GET_IP_Rx);
     95                      break;
     96          
     97                  case GET_IP_Rx:
     98                      if(isTransmitting) break;
     99          
    100                      getIP();
    101                      displayNetworkInfo();
    102          
    103                      break;
    104          
    105                  default:
    106                      if(pingFlag) {
    107                          pingFlag = 0;
    108                          SendIOTCommand(PING_COMMAND, IOT_SETUP_FINISHED);
    109                      }
    110          
    111                      return 1;
    112                      break;
    113              }
    114          
    115              return 0;
   \                     ??Init_IOT_0:
   \   00003E   0C43         MOV.W   #0x0, R12
   \   000040   1001         RETA
   \                     ??Init_IOT_7:
   \   000042   7D406D00     MOV.B   #0x6d, R13
   \   000046   3C40....     MOV.W   #`?<Constant "AT+CIPMUX=1\\r\\n">`, R12
   \                     ??Init_IOT_2:
   \   00004A   ........     CALLA   #SendIOTCommand
   \   00004E   F73F         JMP     ??Init_IOT_0
   \                     ??Init_IOT_11:
   \   000050   4E93         CMP.B   #0x0, R14
   \   000052   F523         JNE     ??Init_IOT_0
   \   000054   8293....     CMP.W   #0x0, &pb0_buffered
   \   000058   F227         JEQ     ??Init_IOT_0
   \   00005A   F2405300.... MOV.B   #0x53, &iot_setup_state
   \                     ??Init_IOT_4:
   \   000060   ........     CALLA   #clearProcessBuff_0
   \   000064   EC3F         JMP     ??Init_IOT_0
   \                     ??Init_IOT_9:
   \   000066   7D407300     MOV.B   #0x73, R13
   \   00006A   3C40....     MOV.W   #`?<Constant "AT+CIPSERVER=1,4764\\r\\n">`, R12
   \   00006E   ED3F         JMP     ??Init_IOT_2
   \                     ??Init_IOT_13:
   \   000070   4E93         CMP.B   #0x0, R14
   \   000072   E523         JNE     ??Init_IOT_0
   \   000074   8293....     CMP.W   #0x0, &pb0_buffered
   \   000078   E227         JEQ     ??Init_IOT_0
   \   00007A   F2404E00.... MOV.B   #0x4e, &iot_setup_state
   \   000080   EF3F         JMP     ??Init_IOT_4
   \                     ??Init_IOT_8:
   \   000082   7D406E00     MOV.B   #0x6e, R13
   \   000086   3C40....     MOV.W   #`?<Constant "AT+CWJAP?\\r\\n">`, R12
   \   00008A   DF3F         JMP     ??Init_IOT_2
   \                     ??Init_IOT_12:
   \   00008C   4E93         CMP.B   #0x0, R14
   \   00008E   D723         JNE     ??Init_IOT_0
   \   000090   ........     CALLA   #getSSID
   \   000094   D43F         JMP     ??Init_IOT_0
   \                     ??Init_IOT_6:
   \   000096   7D406900     MOV.B   #0x69, R13
   \   00009A   3C40....     MOV.W   #`?<Constant "AT+CIFSR\\r\\n">`, R12
   \   00009E   D53F         JMP     ??Init_IOT_2
   \                     ??Init_IOT_10:
   \   0000A0   4E93         CMP.B   #0x0, R14
   \   0000A2   CD23         JNE     ??Init_IOT_0
   \   0000A4   ........     CALLA   #getIP
   \   0000A8   ........     CALLA   #displayNetworkInfo
   \   0000AC   C83F         JMP     ??Init_IOT_0
   \                     ??Init_IOT_3:
   \   0000AE   C293....     CMP.B   #0x0, &pingFlag
   \   0000B2   0824         JEQ     ??Init_IOT_14
   \   0000B4   C243....     MOV.B   #0x0, &pingFlag
   \   0000B8   7D404600     MOV.B   #0x46, R13
   \   0000BC   3C40....     MOV.W   #`?<Constant "AT+PING=\\"www.google.c...">`, R12
   \   0000C0   ........     CALLA   #SendIOTCommand
   \                     ??Init_IOT_14:
   \   0000C4   1C43         MOV.W   #0x1, R12
   \   0000C6   1001         RETA
   \   0000C8                REQUIRE _A_UCA0IE_L
    116          }
    117          
    118          

   \                                 In  segment CODE, align 2
    119          void waitForReady(void) {
   \                     waitForReady:
    120              if(pb0_buffered) {
   \   000000   8293....     CMP.W   #0x0, &pb0_buffered
   \   000004   0D24         JEQ     ??waitForReady_0
    121                  if(strcmp((char*)USB0_Char_Rx_Process, BOOT_RESPONSE)==0) iot_setup_state = CIPMUX_Tx;
   \   000006   3D40....     MOV.W   #`?<Constant "WIFI GOT IP\\r\\n">`, R13
   \   00000A   3C40....     MOV.W   #USB0_Char_Rx_Process, R12
   \   00000E   ........     CALLA   #strcmp
   \   000012   0C93         CMP.W   #0x0, R12
   \   000014   0320         JNE     ??waitForReady_1
   \   000016   F2404D00.... MOV.B   #0x4d, &iot_setup_state
    122          
    123                  clearProcessBuff_0();
   \                     ??waitForReady_1:
   \   00001C   ........     CALLA   #clearProcessBuff_0
    124              }
    125          }
   \                     ??waitForReady_0:
   \   000020   1001         RETA
    126          

   \                                 In  segment CODE, align 2
    127          void SendIOTCommand(char* command, char nextState) {
   \                     SendIOTCommand:
   \   000000   0A12         PUSH.W  R10
   \   000002   4A4D         MOV.B   R13, R10
    128              strcpy((char*)USB0_Char_Tx, command);
   \   000004   0D4C         MOV.W   R12, R13
   \   000006   3C40....     MOV.W   #USB0_Char_Tx, R12
   \   00000A   ........     CALLA   #strcpy
    129              USCI_A0_transmit();
   \   00000E   ........     CALLA   #USCI_A0_transmit
    130              iot_setup_state = nextState;
   \   000012   C24A....     MOV.B   R10, &iot_setup_state
    131          }
   \   000016   3A41         POP.W   R10
   \   000018   1001         RETA
    132          

   \                                 In  segment CODE, align 2
    133          void getSSID(void) {
   \                     getSSID:
    134              if(pb0_buffered) {
   \   000000   8293....     CMP.W   #0x0, &pb0_buffered
   \   000004   1F24         JEQ     ??getSSID_2
    135                  if(subStringPos((char*)USB0_Char_Rx_Process, SSID_RESPONSE)) {
   \   000006   3D40....     MOV.W   #`?<Constant "+CWJAP:">`, R13
   \   00000A   ........     CALLA   #?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   00000E   0C93         CMP.W   #0x0, R12
   \   000010   1324         JEQ     ??getSSID_3
    136                      int i;
    137          
    138                      for(i = 0; i <= SSID_LEN && USB0_Char_Rx_Process[i + SSID_RESPONSE_LEN + 1] != '\"'; ++i) SSID[i] = USB0_Char_Rx_Process[i + SSID_RESPONSE_LEN + 1];
   \   000012   0F43         MOV.W   #0x0, R15
   \                     ??getSSID_0:
   \   000014   FF902200.... CMP.B   #0x22, LWRD(USB0_Char_Rx_Process + 8)(R15)
   \   00001A   0724         JEQ     ??getSSID_4
   \   00001C   DF4F........ MOV.B   LWRD(USB0_Char_Rx_Process + 8)(R15), SSID(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   3F900B00     CMP.W   #0xb, R15
   \   000028   F53B         JL      ??getSSID_0
    139          
    140                      SSID[i + SSID_RESPONSE_LEN + 2] = 0; // set the end of the SSID to null
   \                     ??getSSID_4:
   \   00002A   CF43....     MOV.B   #0x0, SSID + 9(R15)
    141                      SSID[SSID_LEN] = 0; //  set end of the array to null
   \   00002E   C243....     MOV.B   #0x0, &SSID + 10
    142          
    143                      iot_setup_state = GET_IP_Tx;
   \   000032   7E404900     MOV.B   #0x49, R14
   \   000036   023C         JMP     ??getSSID_1
    144                  } else iot_setup_state = GET_SSID_Tx;
   \                     ??getSSID_3:
   \   000038   7E404E00     MOV.B   #0x4e, R14
   \                     ??getSSID_1:
   \   00003C   C24E....     MOV.B   R14, &iot_setup_state
    145          
    146                  clearProcessBuff_0();
   \   000040   ........     CALLA   #clearProcessBuff_0
    147              }
    148          }
   \                     ??getSSID_2:
   \   000044   1001         RETA

   \                                 In  segment CODE, align 2
   \                     ?Subroutine1:
   \   000000   3C40....     MOV.W   #USB0_Char_Rx_Process, R12
   \   000004   ........     BRA     #subStringPos
    149          

   \                                 In  segment CODE, align 2
    150          void getIP(void) {
   \                     getIP:
    151              if(pb0_buffered) {
   \   000000   8293....     CMP.W   #0x0, &pb0_buffered
   \   000004   3124         JEQ     ??getIP_2
    152                  if(subStringPos((char*)USB0_Char_Rx_Process, IP_RESPONSE)) {
   \   000006   3D40....     MOV.W   #`?<Constant "+CIFSR:STAIP,">`, R13
   \   00000A   ........     CALLA   #?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   00000E   5E42....     MOV.B   &dotFound, R14
   \   000012   1F42....     MOV.W   &midIndex, R15
   \   000016   0C93         CMP.W   #0x0, R12
   \   000018   1D24         JEQ     ??getIP_3
    153                      int i;
    154          
    155                      for(i = 0; i <= IP_LEN && USB0_Char_Rx_Process[i + IP_RESPONSE_LEN + 1] != '"'; ++i) {
   \   00001A   0D43         MOV.W   #0x0, R13
   \                     ??getIP_0:
   \   00001C   FD902200.... CMP.B   #0x22, LWRD(USB0_Char_Rx_Process + 14)(R13)
   \   000022   0F24         JEQ     ??getIP_4
    156                          IP[i] = USB0_Char_Rx_Process[i + IP_RESPONSE_LEN + 1];
   \   000024   5C4D....     MOV.B   LWRD(USB0_Char_Rx_Process + 14)(R13), R12
   \   000028   CD4C....     MOV.B   R12, IP(R13)
    157          
    158                          if(IP[i] == '.') {
   \   00002C   7C902E00     CMP.B   #0x2e, R12
   \   000030   0420         JNE     ??getIP_5
    159                              if(++dotFound == 2) midIndex = i;
   \   000032   5E53         ADD.B   #0x1, R14
   \   000034   6E93         CMP.B   #0x2, R14
   \   000036   0120         JNE     ??getIP_5
   \   000038   0F4D         MOV.W   R13, R15
    160                          }
    161                      }
   \                     ??getIP_5:
   \   00003A   1D53         ADD.W   #0x1, R13
   \   00003C   3D900E00     CMP.W   #0xe, R13
   \   000040   ED3B         JL      ??getIP_0
    162          
    163                      IP[i + IP_RESPONSE_LEN + 2] = 0;
   \                     ??getIP_4:
   \   000042   CD43....     MOV.B   #0x0, LWRD(IP + 15)(R13)
    164                      IP[IP_LEN] = 0;
   \   000046   C243....     MOV.B   #0x0, &IP + 13
    165                      IP[midIndex] = 0;
   \   00004A   CF43....     MOV.B   #0x0, IP(R15)
    166          
    167                      iot_setup_state = IOT_SETUP_FINISHED;
   \   00004E   7D404600     MOV.B   #0x46, R13
   \   000052   023C         JMP     ??getIP_1
    168                  } else iot_setup_state = GET_IP_Tx;
   \                     ??getIP_3:
   \   000054   7D404900     MOV.B   #0x49, R13
   \                     ??getIP_1:
   \   000058   824F....     MOV.W   R15, &midIndex
   \   00005C   C24E....     MOV.B   R14, &dotFound
   \   000060   C24D....     MOV.B   R13, &iot_setup_state
    169          
    170                  clearProcessBuff_0();
   \   000064   ........     CALLA   #clearProcessBuff_0
    171              }
    172          }
   \                     ??getIP_2:
   \   000068   1001         RETA
    173          

   \                                 In  segment CODE, align 2
    174          void displayNetworkInfo(void) {
   \                     displayNetworkInfo:
    175              centerStringToDisplay(0, SSID);
   \   000000   3D40....     MOV.W   #SSID, R13
   \   000004   0C43         MOV.W   #0x0, R12
   \   000006   ........     CALLA   #centerStringToDisplay
    176              displayIP(1);
   \   00000A   1C43         MOV.W   #0x1, R12
   \   00000C   ........     CALLA   #displayIP
    177              display_changed = 1;
   \   000010   D243....     MOV.B   #0x1, &display_changed
    178          }
   \   000014   1001         RETA
    179          

   \                                 In  segment CODE, align 2
    180          void displayIP(int pos) {
   \                     displayIP:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   0A4C         MOV.W   R12, R10
    181              strcpy(display_line[pos],"          ");
   \   000004   0B4C         MOV.W   R12, R11
   \   000006                RPT     #0xa
   \   000006   49180B5C     ADDX.W  R12, R11
   \   00000A   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00000E   0C4B         MOV.W   R11, R12
   \   000010   3C50....     ADD.W   #display_line, R12
   \   000014   ........     CALLA   #strcpy
    182              strcpy(display_line[pos+1],"          ");
   \   000018   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00001C   3B50....     ADD.W   #display_line + 11, R11
   \   000020   0C4B         MOV.W   R11, R12
   \   000022   ........     CALLA   #strcpy
    183              centerStringToDisplay(pos, IP);
   \   000026   3D40....     MOV.W   #IP, R13
   \   00002A   0C4A         MOV.W   R10, R12
   \   00002C   ........     CALLA   #centerStringToDisplay
    184              centerStringToDisplay(pos + 1, IP + midIndex + 1);
   \   000030   3D40....     MOV.W   #IP + 1, R13
   \   000034   1D52....     ADD.W   &midIndex, R13
   \   000038   1A53         ADD.W   #0x1, R10
   \   00003A   0C4A         MOV.W   R10, R12
   \   00003C   ........     CALLA   #centerStringToDisplay
    185          }
   \   000040   1A17         POPM.W  #0x2, R11
   \   000042   1001         RETA
    186          
    187          

   \                                 In  segment CODE, align 2
    188          void IOTBufferCommands(void) {
   \                     IOTBufferCommands:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   B1000400     SUBA    #0x4, SP
    189              if(pb0_buffered) {
   \   000006   8293....     CMP.W   #0x0, &pb0_buffered
   \   00000A   3B24         JEQ     ??IOTBufferCommands_3
    190                  if(subStringPos((char*)USB0_Char_Rx_Process, DISCONNECTED_RESPONSE))
   \   00000C   3D40....     MOV.W   #`?<Constant "DISCONNECT">`, R13
   \   000010   ........     CALLA   #?Subroutine1
   \                     ??CrossCallReturnLabel_1:
   \   000014   0C93         CMP.W   #0x0, R12
   \   000016   0324         JEQ     ??IOTBufferCommands_4
    191                      iot_setup_state = CIPSERVER_Tx;
   \   000018   F2405300.... MOV.B   #0x53, &iot_setup_state
    192          
    193                  char * pos = subStringPos((char*)USB0_Char_Rx_Process, CARET_SECURITY_CODE);
   \                     ??IOTBufferCommands_4:
   \   00001E   3D40....     MOV.W   #`?<Constant "^9A73">`, R13
   \   000022   ........     CALLA   #?Subroutine1
   \                     ??CrossCallReturnLabel_0:
   \   000026   0A4C         MOV.W   R12, R10
   \   000028   173C         JMP     ??IOTBufferCommands_2
    194          
    195                  while(pos) {
    196                      pos += CARET_SECURITY_CODE_LEN; // now should be on where the command actually is
    197                      char comm = *pos;
    198                      pos++;
    199                      char * end_caret = charInString(pos, '^');
    200                      char * end_null = charInString(pos, '\r');
    201                      char * end = end_caret ? end_caret : end_null;
   \                     ??IOTBufferCommands_0:
   \   00002A   0B4C         MOV.W   R12, R11
    202                      int time = stoi(pos, end - pos);
   \                     ??IOTBufferCommands_1:
   \   00002C   0B8A         SUB.W   R10, R11
   \   00002E   0D4B         MOV.W   R11, R13
   \   000030   0C4A         MOV.W   R10, R12
   \   000032   ........     CALLA   #stoi
    203                      command c = {
    204                          .comm = comm,
    205                          .duration = time
    206                      };
   \   000036   C1480000     MOV.B   R8, 0(SP)
   \   00003A   814C0200     MOV.W   R12, 0x2(SP)
    207                      pushCB(c);
   \   00003E   0C12         PUSH.W  R12
   \   000040   11120400     PUSH.W  0x4(SP)
   \   000044   ........     CALLA   #pushCB
    208                      pos = subStringPos(pos, CARET_SECURITY_CODE);
   \   000048   3D40....     MOV.W   #`?<Constant "^9A73">`, R13
   \   00004C   0C4A         MOV.W   R10, R12
   \   00004E   ........     CALLA   #subStringPos
   \   000052   0A4C         MOV.W   R12, R10
   \   000054   A1000400     ADDA    #0x4, SP
   \                     ??IOTBufferCommands_2:
   \   000058   0A93         CMP.W   #0x0, R10
   \   00005A   1124         JEQ     ??IOTBufferCommands_5
   \   00005C   3A500500     ADD.W   #0x5, R10
   \   000060   784A         MOV.B   @R10+, R8
   \   000062   7D405E00     MOV.B   #0x5e, R13
   \   000066   0C4A         MOV.W   R10, R12
   \   000068   ........     CALLA   #charInString
   \   00006C   0B4C         MOV.W   R12, R11
   \   00006E   7D400D00     MOV.B   #0xd, R13
   \   000072   0C4A         MOV.W   R10, R12
   \   000074   ........     CALLA   #charInString
   \   000078   0B93         CMP.W   #0x0, R11
   \   00007A   D727         JEQ     ??IOTBufferCommands_0
   \   00007C   D73F         JMP     ??IOTBufferCommands_1
    209                  }
    210          
    211                  clearProcessBuff_0();
   \                     ??IOTBufferCommands_5:
   \   00007E   ........     CALLA   #clearProcessBuff_0
    212              }
    213          
    214          }
   \                     ??IOTBufferCommands_3:
   \   000082   A1000400     ADDA    #0x4, SP
   \   000086   3817         POPM.W  #0x4, R11
   \   000088   1001         RETA
    215          

   \                                 In  segment CODE, align 2, keep-with-next
    216          command popCB(void) {
   \                     popCB:
   \   000000   B1000400     SUBA    #0x4, SP
    217              command ret = CommandBuffer[0];
   \   000004   9142....0000 MOV.W   &CommandBuffer, 0(SP)
   \   00000A   9142....0200 MOV.W   &CommandBuffer + 2, 0x2(SP)
    218          
    219              for(int i = 0; i < COMMAND_BUFFER_LEN - 1; ++i) CommandBuffer[i] = CommandBuffer[i + 1];
   \   000010   0F43         MOV.W   #0x0, R15
   \                     ??popCB_0:
   \   000012   0E4F         MOV.W   R15, R14
   \   000014   5E06         RLAM.W  #0x2, R14
   \   000016   9E4E........ MOV.W   CommandBuffer + 4(R14), CommandBuffer(R14)
   \   00001C   9E4E........ MOV.W   CommandBuffer + 6(R14), CommandBuffer + 2(R14)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   2F92         CMP.W   #0x4, R15
   \   000026   F53B         JL      ??popCB_0
    220          
    221              CommandBuffer[COMMAND_BUFFER_LEN - 1] = emptyCommand;
   \   000028   9242........ MOV.W   &emptyCommand, &CommandBuffer + 16
   \   00002E   9242........ MOV.W   &emptyCommand + 2, &CommandBuffer + 18
   \   000034   AC410000     MOV.W   @SP, 0(R12)
   \   000038   9C4102000200 MOV.W   0x2(SP), 0x2(R12)
   \   00003E                REQUIRE ?Subroutine0
   \   00003E                // Fall through to label ?Subroutine0
    222              return ret;
    223          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   000000   A1000400     ADDA    #0x4, SP
   \   000004   1001         RETA

   \                                 In  segment CODE, align 2
    224          void pushCB(command c) {
   \                     pushCB:
    225              int i;
    226          
    227              for(i = 0; i < COMMAND_BUFFER_LEN; ++i)
   \   000000   0F43         MOV.W   #0x0, R15
    228                  if(CommandBuffer[i].comm == 0 && CommandBuffer[i].duration == 0) break;
   \                     ??pushCB_0:
   \   000002   0E4F         MOV.W   R15, R14
   \   000004   5E06         RLAM.W  #0x2, R14
   \   000006   CE93....     CMP.B   #0x0, CommandBuffer(R14)
   \   00000A   0320         JNE     ??pushCB_3
   \   00000C   8E93....     CMP.W   #0x0, CommandBuffer + 2(R14)
   \   000010   0424         JEQ     ??pushCB_4
   \                     ??pushCB_3:
   \   000012   1F53         ADD.W   #0x1, R15
   \   000014   3F900500     CMP.W   #0x5, R15
   \   000018   F43B         JL      ??pushCB_0
    229          
    230              if(i == COMMAND_BUFFER_LEN) {
   \                     ??pushCB_4:
   \   00001A   3F900500     CMP.W   #0x5, R15
   \   00001E   0724         JEQ     ??pushCB_2
    231                  return;
    232              }
    233          
    234              CommandBuffer[i] = c;
   \   000020   5F06         RLAM.W  #0x2, R15
   \   000022   9F410400.... MOV.W   0x4(SP), CommandBuffer(R15)
   \   000028   9F410600.... MOV.W   0x6(SP), CommandBuffer + 2(R15)
    235          }
   \                     ??pushCB_2:
   \   00002E   1001         RETA
    236          

   \                                 In  segment CODE, align 2
    237          void ProcessCommands(void) {
   \                     ProcessCommands:
   \   000000   B1000400     SUBA    #0x4, SP
    238              //if(currCommand.comm == 0 && currCommand.duration == 0)return;
    239              //commandsReceieved = 1;
    240              if (CommandBuffer[0].comm == STOP_COMMAND) {
   \   000004   F2907300.... CMP.B   #0x73, &CommandBuffer
   \   00000A   0620         JNE     ??ProcessCommands_5
    241                  currCommand = popCB();
   \   00000C   0C41         MOV.W   SP, R12
   \   00000E   ........     CALLA   #?Subroutine3
    242                  state = START;
   \                     ??CrossCallReturnLabel_5:
   \   000012   ........     CALLA   #?Subroutine2
    243                  stopwatch_milliseconds = 0;
    244                  stateCounter = 0 ;
    245                  driveStateCounter = 0;
    246                  ShutoffMotors();
    247                  return;
   \                     ??CrossCallReturnLabel_4:
   \   000016   6C3C         JMP     ??ProcessCommands_0
    248              }
    249          
    250              if (CommandBuffer[0].comm == EXIT_COMMAND) {
   \                     ??ProcessCommands_5:
   \   000018   F2906500.... CMP.B   #0x65, &CommandBuffer
   \   00001E   0220         JNE     ??ProcessCommands_6
    251                  state = START;
   \   000020   ........     CALLA   #?Subroutine2
    252                  stopwatch_milliseconds = 0;
    253                  stateCounter = 0 ;
    254                  driveStateCounter = 0;
    255                  ShutoffMotors();
    256              }
    257          
    258              if(state == START) {
   \                     ??ProcessCommands_6:
   \   000024   F2905300.... CMP.B   #0x53, &state
   \   00002A   6220         JNE     ??ProcessCommands_0
    259                  currCommand = popCB();
   \   00002C   0C41         MOV.W   SP, R12
   \   00002E   ........     CALLA   #?Subroutine3
    260          
    261                  if(currCommand.comm == 0 && currCommand.duration == 0)return;
   \                     ??CrossCallReturnLabel_6:
   \   000032   C293....     CMP.B   #0x0, &currCommand
   \   000036   0320         JNE     ??ProcessCommands_1
   \   000038   8293....     CMP.W   #0x0, &currCommand + 2
   \   00003C   5924         JEQ     ??ProcessCommands_0
    262          
    263                  commandsReceieved = 1;
   \                     ??ProcessCommands_1:
   \   00003E   D243....     MOV.B   #0x1, &commandsReceieved
    264                  stopwatch_seconds = 0;
   \   000042   8243....     MOV.W   #0x0, &stopwatch_seconds
    265                  cycle_count = 0;
   \   000046   8243....     MOV.W   #0x0, &cycle_count
    266          
    267                  //driveTime = (int)(currCommand.duration * (currCommand.comm == RIGHT_COMMAND || currCommand.comm == LEFT_COMMAND ? TURN_CONSTANT : 1));
    268          
    269                  switch(currCommand.comm) {
   \   00004A   7E404400     MOV.B   #0x44, R14
   \   00004E   5F42....     MOV.B   &currCommand, R15
   \   000052   7F806200     SUB.B   #0x62, R15
   \   000056   1724         JEQ     ??ProcessCommands_7
   \   000058   6F83         SUB.B   #0x2, R15
   \   00005A   3A24         JEQ     ??ProcessCommands_8
   \   00005C   5F83         SUB.B   #0x1, R15
   \   00005E   3F24         JEQ     ??ProcessCommands_9
   \   000060   5F83         SUB.B   #0x1, R15
   \   000062   0A24         JEQ     ??ProcessCommands_10
   \   000064   7F800600     SUB.B   #0x6, R15
   \   000068   2124         JEQ     ??ProcessCommands_11
   \   00006A   7F800300     SUB.B   #0x3, R15
   \   00006E   2C24         JEQ     ??ProcessCommands_12
   \   000070   7F800300     SUB.B   #0x3, R15
   \   000074   1424         JEQ     ??ProcessCommands_13
   \   000076   3C3C         JMP     ??ProcessCommands_0
    270                      case (FORWARD_COMMAND):
    271                          speedRight = STRAIGHT_RIGHT;
   \                     ??ProcessCommands_10:
   \   000078   B2405046.... MOV.W   #0x4650, &speedRight
    272                          speedLeft = STRAIGHT_LEFT;
   \   00007E   B240204E.... MOV.W   #0x4e20, &speedLeft
    273                          state = DRIVE;
   \   000084   063C         JMP     ??ProcessCommands_2
    274                          driveTime = currCommand.duration;
    275                          break;
    276          
    277                      case (REVERSE_COMMAND):
    278                          speedRight = -STRAIGHT_RIGHT;
   \                     ??ProcessCommands_7:
   \   000086   B240B0B9.... MOV.W   #0xb9b0, &speedRight
    279                          speedLeft = -STRAIGHT_LEFT;
   \   00008C   B240E0B1.... MOV.W   #0xb1e0, &speedLeft
    280                          state = DRIVE;
   \                     ??ProcessCommands_2:
   \   000092   C24E....     MOV.B   R14, &state
    281                          driveTime = currCommand.duration;
   \   000096   9242........ MOV.W   &currCommand + 2, &driveTime
    282                          break;
   \   00009C   293C         JMP     ??ProcessCommands_0
    283          
    284                      case (RIGHT_COMMAND):
    285                          speedRight = STRAIGHT_RIGHT>>1;
   \                     ??ProcessCommands_13:
   \   00009E   B2402823.... MOV.W   #0x2328, &speedRight
    286                          speedLeft = -(STRAIGHT_LEFT>>1);
   \   0000A4   B240F0D8.... MOV.W   #0xd8f0, &speedLeft
    287                          state = DRIVE;
   \   0000AA   063C         JMP     ??ProcessCommands_3
    288                          driveTime = currCommand.duration << TURN_CONSTANT;
    289                          break;
    290          
    291                      case (LEFT_COMMAND):
    292                          speedRight = -(STRAIGHT_RIGHT>>1);
   \                     ??ProcessCommands_11:
   \   0000AC   B240D8DC.... MOV.W   #0xdcd8, &speedRight
    293                          speedLeft = STRAIGHT_LEFT>>1;
   \   0000B2   B2401027.... MOV.W   #0x2710, &speedLeft
    294                          state = DRIVE;
   \                     ??ProcessCommands_3:
   \   0000B8   C24E....     MOV.B   R14, &state
    295                          driveTime = currCommand.duration << TURN_CONSTANT;
   \   0000BC   1F42....     MOV.W   &currCommand + 2, R15
   \   0000C0   5F0A         RLAM.W  #0x3, R15
   \   0000C2   824F....     MOV.W   R15, &driveTime
    296                          break;
   \   0000C6   143C         JMP     ??ProcessCommands_0
    297          
    298                      case (LINEFOLLOW_COMMAND):
    299                          state = STRAIGHT;
   \                     ??ProcessCommands_12:
   \   0000C8   F2407300.... MOV.B   #0x73, &state
    300                          speedRight = currCommand.duration;
   \   0000CE   0D3C         JMP     ??ProcessCommands_4
    301                          break;
    302                          
    303                      case (DISPLAY_NUMBER_COMMAND):
    304                        commandDisplayCounter = DISPLAY_ARRIVAL_STATE;
   \                     ??ProcessCommands_8:
   \   0000D0   B240F401.... MOV.W   #0x1f4, &commandDisplayCounter
    305                          currentStation = currCommand.duration;
   \   0000D6   D242........ MOV.B   &currCommand + 2, &currentStation
    306                          break;
   \   0000DC   093C         JMP     ??ProcessCommands_0
    307          
    308                      case (EXIT_COMMAND):
    309                          state = WAIT;
   \                     ??ProcessCommands_9:
   \   0000DE   F2405700.... MOV.B   #0x57, &state
    310                          nextState = EXIT;
   \   0000E4   F2406500.... MOV.B   #0x65, &nextState
    311                          speedRight = currCommand.duration;
   \                     ??ProcessCommands_4:
   \   0000EA   9242........ MOV.W   &currCommand + 2, &speedRight
    312                          break;
    313                  }
    314              }
    315          
    316          }
   \                     ??ProcessCommands_0:
   \   0000F0   ....         JMP     ?Subroutine0
   \   0000F2   0343         NOP

   \                                 In  segment CODE, align 2
   \                     ?Subroutine3:
   \   000000   ........     CALLA   #popCB
   \   000004   92410400.... MOV.W   0x4(SP), &currCommand
   \   00000A   92410600.... MOV.W   0x6(SP), &currCommand + 2
   \   000010   1001         RETA

   \                                 In  segment CODE, align 2
   \                     ?Subroutine2:
   \   000000   F2405300.... MOV.B   #0x53, &state
   \   000006   8243....     MOV.W   #0x0, &stopwatch_milliseconds
   \   00000A   8243....     MOV.W   #0x0, &stateCounter
   \   00000E   8243....     MOV.W   #0x0, &driveStateCounter
   \   000012   ........     BRA     #ShutoffMotors

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for iot_setup_state>`:
   \   000000   42           DC8 66

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B434950 DC8 "AT+CIPMUX=1\015\012"
   \            4D55583D310D
   \            0A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIPSERVER=1,4764\\r\\n">`:
   \   000000   41542B434950 DC8 "AT+CIPSERVER=1,4764\015\012"
   \            534552564552
   \            3D312C343736
   \            340D0A00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CWJAP?\\r\\n">`:
   \   000000   41542B43574A DC8 "AT+CWJAP?\015\012"
   \            41503F0D0A00

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIFSR\\r\\n">`:
   \   000000   41542B434946 DC8 "AT+CIFSR\015\012"
   \            53520D0A00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+PING=\\"www.google.c...">`:
   \   000000   41542B50494E DC8 "AT+PING=\"www.google.com\"\015\012"
   \            473D22777777
   \            2E676F6F676C
   \            652E636F6D22
   \            0D0A00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WIFI GOT IP\\r\\n">`:
   \   000000   574946492047 DC8 "WIFI GOT IP\015\012"
   \            4F542049500D
   \            0A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "+CWJAP:">`:
   \   000000   2B43574A4150 DC8 "+CWJAP:"
   \            3A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "+CIFSR:STAIP,">`:
   \   000000   2B4349465352 DC8 "+CIFSR:STAIP,"
   \            3A5354414950
   \            2C00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "DISCONNECT">`:
   \   000000   444953434F4E DC8 "DISCONNECT"
   \            4E45435400  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "^9A73">`:
   \   000000   5E3941373300 DC8 "^9A73"

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     20   IOTBufferCommands
       16   -> charInString
       16   -> clearProcessBuff_0
       20   -> pushCB
       16   -> stoi
       16   -> subStringPos
       20   -> subStringPos
      4   Init_IOT
        4   -> SendIOTCommand
        4   -> clearProcessBuff_0
        4   -> displayNetworkInfo
        4   -> getIP
        4   -> getSSID
        4   -> waitForReady
      8   ProcessCommands
        8   -> ShutoffMotors
       12   -> popCB
      6   SendIOTCommand
        6   -> USCI_A0_transmit
        6   -> strcpy
      8   displayIP
        8   -> centerStringToDisplay
        8   -> strcpy
      4   displayNetworkInfo
        4   -> centerStringToDisplay
        4   -> displayIP
      4   getIP
        4   -> clearProcessBuff_0
        4   -> subStringPos
      4   getSSID
        4   -> clearProcessBuff_0
        4   -> subStringPos
      8   popCB
      4   pushCB
      4   waitForReady
        4   -> clearProcessBuff_0
        4   -> strcmp


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      14  ?<Constant "+CIFSR:STAIP,">
       8  ?<Constant "+CWJAP:">
      11  ?<Constant "AT+CIFSR\r\n">
      14  ?<Constant "AT+CIPMUX=1\r\n">
      22  ?<Constant "AT+CIPSERVER=1,4764\r\n">
      12  ?<Constant "AT+CWJAP?\r\n">
      27  ?<Constant "AT+PING=\"www.google.c...">
      11  ?<Constant "DISCONNECT">
      14  ?<Constant "WIFI GOT IP\r\n">
       6  ?<Constant "^9A73">
       1  ?<Initializer for iot_setup_state>
       6  ?Subroutine0
       8  ?Subroutine1
      22  ?Subroutine2
      18  ?Subroutine3
      20  CommandBuffer
     138  IOTBufferCommands
      14  IP
     200  Init_IOT
     244  ProcessCommands
      11  SSID
      26  SendIOTCommand
       2  _A_UCA0IE_L
       1  cb_index
       1  commandsReceieved
       4  currCommand
       1  currentStation
      68  displayIP
      22  displayNetworkInfo
       1  dotFound
       4  emptyCommand
     106  getIP
      70  getSSID
       1  iot_setup_state
       2  midIndex
      62  popCB
      48  pushCB
      34  waitForReady

 
 1 072 bytes in segment CODE
     2 bytes in segment DATA16_AN
   150 bytes in segment DATA16_C
     1 byte  in segment DATA16_I
     1 byte  in segment DATA16_ID
    59 bytes in segment DATA16_Z
 
 1 072 bytes of CODE  memory
   151 bytes of CONST memory
    60 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
