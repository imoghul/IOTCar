###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          20/Apr/2022  16:24:14
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 10\utils.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW532.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 10\utils.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 10\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 10\Debug\List\utils.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 10\Debug\Obj\utils.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 10\utils.c
      1          #include <string.h>
      2          #include "utils.h"
      3          #include "macros.h"
      4          extern volatile unsigned char display_changed;
      5          extern char display_line[4][11];
      6          

   \                                 In  segment CODE, align 2
      7          void centerStringToDisplay(unsigned int line, char * s) {
   \                     centerStringToDisplay:
   \   000000   5B15         PUSHM.W #0x6, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
      8              int len = strlen(s);
   \   000006   0C4D         MOV.W   R13, R12
   \   000008   ........     CALLA   #strlen
   \   00000C   084C         MOV.W   R12, R8
      9              int pos = ((10 - len) >> 1);
   \   00000E   39400A00     MOV.W   #0xa, R9
   \   000012   098C         SUB.W   R12, R9
   \   000014   5901         RRAM.W  #0x1, R9
     10              strcpy(display_line[line] + pos, s);
   \   000016   064A         MOV.W   R10, R6
   \   000018                RPT     #0xa
   \   000018   4918065A     ADDX.W  R10, R6
   \   00001C   0D4B         MOV.W   R11, R13
   \   00001E   0C46         MOV.W   R6, R12
   \   000020   0C59         ADD.W   R9, R12
   \   000022   3C50....     ADD.W   #display_line, R12
   \   000026   ........     CALLA   #strcpy
     11              display_line[line][pos + len] = ' ';
   \   00002A   0958         ADD.W   R8, R9
   \   00002C   0956         ADD.W   R6, R9
   \   00002E   F9402000.... MOV.B   #0x20, display_line(R9)
     12              display_line[line][10] = 0;
   \   000034   C643....     MOV.B   #0x0, display_line + 10(R6)
     13          }
   \   000038   5617         POPM.W  #0x6, R11
   \   00003A   1001         RETA
     14          

   \                                 In  segment CODE, align 2
     15          char* subStringPos(const char* str, char * subString) {
   \                     subStringPos:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
     16          
     17              int i = 0;
   \   000006   0843         MOV.W   #0x0, R8
     18              int d = 0;
     19          
     20              int lenSub = strlen(subString);
   \   000008   0C4D         MOV.W   R13, R12
   \   00000A   ........     CALLA   #strlen
   \   00000E   094C         MOV.W   R12, R9
     21              int len = strlen(str) - lenSub;
   \   000010   0C4A         MOV.W   R10, R12
   \   000012   ........     CALLA   #strlen
   \   000016   0C89         SUB.W   R9, R12
     22          
     23              for (i = 0; i < len; i++) {
   \   000018   093C         JMP     ??subStringPos_1
     24                  int exists = 1;
     25          
     26                  for (d = 0; d < lenSub; d++) {
     27                      if (str[i + d] != subString[d]) {
   \                     ??subStringPos_0:
   \   00001A   0D4A         MOV.W   R10, R13
   \   00001C   0D58         ADD.W   R8, R13
   \   00001E   0D5E         ADD.W   R14, R13
   \   000020   0F4B         MOV.W   R11, R15
   \   000022   0F5E         ADD.W   R14, R15
   \   000024   ED9F0000     CMP.B   @R15, 0(R13)
   \   000028   0524         JEQ     ??subStringPos_4
     28                          exists = 0;
     29                          break;
     30                      }
     31                  }
   \   00002A   1853         ADD.W   #0x1, R8
   \                     ??subStringPos_1:
   \   00002C   089C         CMP.W   R12, R8
   \   00002E   0834         JGE     ??subStringPos_5
   \   000030   0E43         MOV.W   #0x0, R14
   \   000032   013C         JMP     ??subStringPos_2
   \                     ??subStringPos_4:
   \   000034   1E53         ADD.W   #0x1, R14
   \                     ??subStringPos_2:
   \   000036   0E99         CMP.W   R9, R14
   \   000038   F03B         JL      ??subStringPos_0
     32          
     33                  if (exists) {
     34                    return (char*)(str + i);
   \   00003A   0A58         ADD.W   R8, R10
   \   00003C   0C4A         MOV.W   R10, R12
   \   00003E   013C         JMP     ??subStringPos_3
     35                  }
     36              }
     37          
     38              return 0;
   \                     ??subStringPos_5:
   \   000040   0C43         MOV.W   #0x0, R12
   \                     ??subStringPos_3:
   \   000042   3817         POPM.W  #0x4, R11
   \   000044   1001         RETA
     39          }
     40          

   \                                 In  segment CODE, align 2
     41          int stoi(char* str, int len) {
   \                     stoi:
   \   000000   0A12         PUSH.W  R10
     42              int num = 0;
   \   000002   0E43         MOV.W   #0x0, R14
     43          
     44              for(int i = 0; i < len/* && str[i] >= '0' && str[i] <= '9'*/; ++i)
   \   000004   0A43         MOV.W   #0x0, R10
   \   000006   093C         JMP     ??stoi_1
     45                  num = num * 10 + (int)(str[i] - '0');
   \                     ??stoi_0:
   \   000008   0F4C         MOV.W   R12, R15
   \   00000A   0F5A         ADD.W   R10, R15
   \   00000C   6F4F         MOV.B   @R15, R15
   \   00000E                RPT     #0xa
   \   00000E   49180F5E     ADDX.W  R14, R15
   \   000012   0E4F         MOV.W   R15, R14
   \   000014   3E50D0FF     ADD.W   #0xffd0, R14
   \   000018   1A53         ADD.W   #0x1, R10
   \                     ??stoi_1:
   \   00001A   0A9D         CMP.W   R13, R10
   \   00001C   F53B         JL      ??stoi_0
     46          
     47              return num;
   \   00001E   0C4E         MOV.W   R14, R12
   \   000020   3A41         POP.W   R10
   \   000022   1001         RETA
     48          }
     49          

   \                                 In  segment CODE, align 2
     50          char* charInString(const char* str, char c) {
   \                     charInString:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   4A4D         MOV.B   R13, R10
     51              for(int i = 0; i < strlen(str) + 1; i++)
   \   000006   0843         MOV.W   #0x0, R8
   \   000008   013C         JMP     ??charInString_1
   \                     ??charInString_0:
   \   00000A   1853         ADD.W   #0x1, R8
   \                     ??charInString_1:
   \   00000C   0C4B         MOV.W   R11, R12
   \   00000E   ........     CALLA   #strlen
   \   000012   1C53         ADD.W   #0x1, R12
   \   000014   089C         CMP.W   R12, R8
   \   000016   052C         JC      ??charInString_3
     52                  if(str[i] == c) return (char*)(str + i);
   \   000018   0C4B         MOV.W   R11, R12
   \   00001A   0C58         ADD.W   R8, R12
   \   00001C   6A9C         CMP.B   @R12, R10
   \   00001E   F523         JNE     ??charInString_0
   \   000020   013C         JMP     ??charInString_2
     53          
     54              return 0;
   \                     ??charInString_3:
   \   000022   0C43         MOV.W   #0x0, R12
   \                     ??charInString_2:
   \   000024   3817         POPM.W  #0x4, R11
   \   000026   1001         RETA
     55          }
     56          

   \                                 In  segment CODE, align 2
     57          unsigned int absVal(int n) {
   \                     absVal:
   \   000000   B1000400     SUBA    #0x4, SP
     58              const int ret[2] = {n, -n};
   \   000004   814C0000     MOV.W   R12, 0(SP)
   \   000008   0F4C         MOV.W   R12, R15
   \   00000A   3FE3         XOR.W   #0xffff, R15
   \   00000C   1F53         ADD.W   #0x1, R15
   \   00000E   814F0200     MOV.W   R15, 0x2(SP)
     59              return (unsigned int)(ret [n < 0]);
   \   000012   0C93         CMP.W   #0x0, R12
   \   000014   0238         JL      ??absVal_1
   \   000016   0F43         MOV.W   #0x0, R15
   \   000018   013C         JMP     ??absVal_0
   \                     ??absVal_1:
   \   00001A   2F43         MOV.W   #0x2, R15
   \                     ??absVal_0:
   \   00001C   0F51         ADD.W   SP, R15
   \   00001E   2C4F         MOV.W   @R15, R12
   \   000020   A1000400     ADDA    #0x4, SP
   \   000024   1001         RETA
     60          }
     61          

   \                                 In  segment CODE, align 2
     62          void HEXtoBCD(int hex_value, int line, int start) {
   \                     HEXtoBCD:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   B1000600     SUBA    #0x6, SP
     63          
     64              int value = 0;
   \   000006   0F43         MOV.W   #0x0, R15
     65          
     66              int i;
     67              int bases[] = {1000, 100, 10};
   \   000008   3B40....     MOV.W   #`?<Constant {1000, 100, 10}>`, R11
   \   00000C   B14B0000     MOV.W   @R11+, 0(SP)
   \   000010   B14B0200     MOV.W   @R11+, 0x2(SP)
   \   000014   B14B0400     MOV.W   @R11+, 0x4(SP)
     68          
     69              for(i = 0; i < 3; i++) {
   \   000018   0B43         MOV.W   #0x0, R11
     70                  int base = bases[i];
   \                     ??HEXtoBCD_1:
   \   00001A   0A4B         MOV.W   R11, R10
   \   00001C   0A5A         RLA.W   R10
   \   00001E   0A51         ADD.W   SP, R10
   \   000020   2A4A         MOV.W   @R10, R10
   \   000022   023C         JMP     ??HEXtoBCD_2
     71          
     72                  while(hex_value > (base - 1)) {
     73                      hex_value -= base;
   \                     ??HEXtoBCD_0:
   \   000024   0C8A         SUB.W   R10, R12
     74                      value += 1;
   \   000026   1F53         ADD.W   #0x1, R15
     75                  }
   \                     ??HEXtoBCD_2:
   \   000028   084A         MOV.W   R10, R8
   \   00002A   3853         ADD.W   #0xffff, R8
   \   00002C   089C         CMP.W   R12, R8
   \   00002E   FA3B         JL      ??HEXtoBCD_0
     76          
     77                  display_line[line][start + i] = value + '0';
   \   000030   484F         MOV.B   R15, R8
   \   000032   78503000     ADD.B   #0x30, R8
   \   000036   094D         MOV.W   R13, R9
   \   000038                RPT     #0xa
   \   000038   4918095D     ADDX.W  R13, R9
   \   00003C   095E         ADD.W   R14, R9
   \   00003E   095B         ADD.W   R11, R9
   \   000040   C948....     MOV.B   R8, display_line(R9)
     78          
     79              }
   \   000044   1B53         ADD.W   #0x1, R11
   \   000046   3B900300     CMP.W   #0x3, R11
   \   00004A   E73B         JL      ??HEXtoBCD_1
     80          
     81              display_line[line][start + 3] = hex_value + '0';
   \   00004C   7C503000     ADD.B   #0x30, R12
   \   000050   0F4D         MOV.W   R13, R15
   \   000052                RPT     #0xa
   \   000052   49180F5D     ADDX.W  R13, R15
   \   000056   0E5F         ADD.W   R15, R14
   \   000058   CE4C....     MOV.B   R12, display_line + 3(R14)
     82          
     83              /*while(hex_value > 999) {
     84                  hex_value -= 1000;
     85                  value += 1;
     86              }
     87          
     88              display_line[line][start] = 0x30 + value;
     89              value = 0;
     90          
     91              while(hex_value > 99) {
     92                  hex_value -= 100;
     93                  value += 1;
     94              }
     95          
     96              display_line[line][start + 1] = 0x30 + value;
     97              value = 0;
     98          
     99              while(hex_value > 9) {
    100                  hex_value -= 10;
    101                  value += 1;
    102              }
    103          
    104              display_line[line][start + 2] = 0x30 + value;
    105              display_line[line][start + 3] = 0x30 + hex_value;*/
    106          
    107          }
   \   00005C   A1000600     ADDA    #0x6, SP
   \   000060   3817         POPM.W  #0x4, R11
   \   000062   1001         RETA
    108          
    109          

   \                                 In  segment CODE, align 2
    110          int additionSafe(int val, int max, int min, int increment) {
   \                     additionSafe:
   \   000000   1B15         PUSHM.W #0x2, R11
    111              long res = val + increment;
   \   000002   0C5F         ADD.W   R15, R12
   \   000004   0A4C         MOV.W   R12, R10
   \   000006   22B2         BIT.W   #0x4, SR
   \   000008   0B7B         SUBC.W  R11, R11
   \   00000A   3BE3         XOR.W   #0xffff, R11
    112          
    113              if(res > (long)max) res = (long)max;
   \   00000C   0C4D         MOV.W   R13, R12
   \   00000E   0D5D         RLA.W   R13
   \   000010   0D7D         SUBC.W  R13, R13
   \   000012   3DE3         XOR.W   #0xffff, R13
   \   000014   0D9B         CMP.W   R11, R13
   \   000016   0338         JL      ??additionSafe_0
   \   000018   0420         JNE     ??additionSafe_1
   \   00001A   0C9A         CMP.W   R10, R12
   \   00001C   022C         JC      ??additionSafe_1
   \                     ??additionSafe_0:
   \   00001E   0A4C         MOV.W   R12, R10
   \   000020   0B4D         MOV.W   R13, R11
    114          
    115              if(res < (long)min) res = (long)min;
   \                     ??additionSafe_1:
   \   000022   0F4E         MOV.W   R14, R15
   \   000024   0F5F         RLA.W   R15
   \   000026   0F7F         SUBC.W  R15, R15
   \   000028   3FE3         XOR.W   #0xffff, R15
   \   00002A   0B9F         CMP.W   R15, R11
   \   00002C   0338         JL      ??additionSafe_2
   \   00002E   0320         JNE     ??additionSafe_3
   \   000030   0A9E         CMP.W   R14, R10
   \   000032   012C         JC      ??additionSafe_3
   \                     ??additionSafe_2:
   \   000034   0A4E         MOV.W   R14, R10
    116          
    117              return (int)res;
   \                     ??additionSafe_3:
   \   000036   0C4A         MOV.W   R10, R12
   \   000038   1A17         POPM.W  #0x2, R11
   \   00003A   1001         RETA
    118          }
    119          

   \                                 In  segment CODE, align 2
    120          int multSafe(int a, int b) {
   \                     multSafe:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
    121              if(a == 0 || b == 0) return 0;
   \   000006   0C93         CMP.W   #0x0, R12
   \   000008   0224         JEQ     ??multSafe_2
   \   00000A   0D93         CMP.W   #0x0, R13
   \   00000C   0220         JNE     ??multSafe_3
   \                     ??multSafe_2:
   \   00000E   0C43         MOV.W   #0x0, R12
   \   000010   1E3C         JMP     ??multSafe_0
    122          
    123              int res = a * b;
   \                     ??multSafe_3:
   \   000012   0212         PUSH.W  SR
   \   000014   32C2         DINT
   \   000016   0343         NOP
   \   000018   824C....     MOV.W   R12, &__iar_HWMUL              // MPY
   \   00001C   824D....     MOV.W   R13, &__iar_HWMUL + 8          // OP2
   \   000020   1842....     MOV.W   &__iar_HWMUL + 10, R8          // RESLO
   \   000024   0343         NOP
   \   000026   3241         POP.W   SR
    124          
    125              if(a == res / b)return res;
   \   000028   0C48         MOV.W   R8, R12
   \   00002A   0E4D         MOV.W   R13, R14
   \   00002C   ........     CALLA   #?DivMod16s
   \   000030   0A9C         CMP.W   R12, R10
   \   000032   0220         JNE     ??multSafe_4
   \   000034   0C48         MOV.W   R8, R12
   \   000036   0B3C         JMP     ??multSafe_0
    126          
    127              return (INT_MAX) * (a < 0 ? -1 : 1) * (b < 0 ? -1 : 1);
   \                     ??multSafe_4:
   \   000038   0A93         CMP.W   #0x0, R10
   \   00003A   0338         JL      ??multSafe_5
   \   00003C   3C40FF7F     MOV.W   #0x7fff, R12
   \   000040   023C         JMP     ??multSafe_1
   \                     ??multSafe_5:
   \   000042   3C400180     MOV.W   #0x8001, R12
   \                     ??multSafe_1:
   \   000046   0B93         CMP.W   #0x0, R11
   \   000048   0234         JGE     ??multSafe_0
   \   00004A   3CE3         XOR.W   #0xffff, R12
   \   00004C   1C53         ADD.W   #0x1, R12
   \                     ??multSafe_0:
   \   00004E   3817         POPM.W  #0x4, R11
   \   000050   1001         RETA
    128          }

   \                                 In  segment DATA16_C, align 2, align-sorted
   \                     `?<Constant {1000, 100, 10}>`:
   \   000000   E80364000A00 DC16 1000, 100, 10

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     18   HEXtoBCD
      8   absVal
      8   additionSafe
     16   centerStringToDisplay
       16   -> strcpy
       16   -> strlen
     12   charInString
       12   -> strlen
     14   multSafe
       12 ?DivMod16s
      6   stoi
     12   subStringPos
       12   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Constant {1000, 100, 10}>
     100  HEXtoBCD
      38  absVal
      60  additionSafe
      60  centerStringToDisplay
      40  charInString
      82  multSafe
      36  stoi
      70  subStringPos

 
 486 bytes in segment CODE
   6 bytes in segment DATA16_C
 
 486 bytes of CODE  memory
   6 bytes of CONST memory

Errors: none
Warnings: none
