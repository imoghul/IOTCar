###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          20/Apr/2022  11:01:40
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\anotherone\Project 10\serial.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWB81A.tmp
#        ("C:\Users\saad\Documents\anotherone\Project 10\serial.c" -lC
#        "C:\Users\saad\Documents\anotherone\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\anotherone\Project 10\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\anotherone\Project 10\Debug\List\serial.lst
#    Object file   =  
#        C:\Users\saad\Documents\anotherone\Project 10\Debug\Obj\serial.r43
#
###############################################################################

C:\Users\saad\Documents\anotherone\Project 10\serial.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Serial Routine - Serial Processes
      4          //
      5          //
      6          //  Ibrahim Moghul
      7          //  Mar 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          #include "serial.h"
     11          #include "macros.h"
     12          #include <string.h>
     13          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x500
   \   union <unnamed> _A_UCA0CTLW0_L
   \                     _A_UCA0CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x506
   \   union <unnamed> _A_UCA0BRW_L
   \                     _A_UCA0BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x508
   \   union <unnamed> _A_UCA0MCTLW_L
   \                     _A_UCA0MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x50c
   \   union <unnamed> _A_UCA0RXBUF_L
   \                     _A_UCA0RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x50e
   \   union <unnamed> _A_UCA0TXBUF_L
   \                     _A_UCA0TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x51a
   \   union <unnamed> _A_UCA0IE_L
   \                     _A_UCA0IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x51e
   \   union <unnamed> _A_UCA0IV_L
   \                     _A_UCA0IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x580
   \   union <unnamed> _A_UCA1CTLW0_L
   \                     _A_UCA1CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x586
   \   union <unnamed> _A_UCA1BRW_L
   \                     _A_UCA1BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x588
   \   union <unnamed> _A_UCA1MCTLW_L
   \                     _A_UCA1MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x58c
   \   union <unnamed> _A_UCA1RXBUF_L
   \                     _A_UCA1RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x58e
   \   union <unnamed> _A_UCA1TXBUF_L
   \                     _A_UCA1TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x59a
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x59e
   \   union <unnamed> _A_UCA1IV_L
   \                     _A_UCA1IV_L:
   \   000000                DS8 2
     14          
     15          // global variables

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          volatile unsigned int usb0_rx_wr, usb1_rx_wr;
   \                     usb0_rx_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     usb1_rx_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          unsigned int usb0_rx_rd, usb1_rx_rd;
   \                     usb0_rx_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     usb1_rx_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile char USB0_Char_Rx_Ring[SMALL_RING_SIZE], USB0_Char_Rx_Process[LARGE_RING_SIZE];
   \                     USB0_Char_Rx_Ring:
   \   000000                DS8 32

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     USB0_Char_Rx_Process:
   \   000000                DS8 150

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile char USB1_Char_Rx_Ring[SMALL_RING_SIZE], USB1_Char_Rx_Process[LARGE_RING_SIZE];
   \                     USB1_Char_Rx_Ring:
   \   000000                DS8 32

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     USB1_Char_Rx_Process:
   \   000000                DS8 150

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          volatile char USB0_Char_Tx[LARGE_RING_SIZE], USB1_Char_Tx[LARGE_RING_SIZE];
   \                     USB0_Char_Tx:
   \   000000                DS8 150

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     USB1_Char_Tx:
   \   000000                DS8 150

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          unsigned volatile int pb0_index, pb1_index;
   \                     pb0_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     pb1_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          unsigned volatile int tx0_index, tx1_index;
   \                     tx0_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     tx1_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          unsigned volatile int pb0_buffered, pb1_buffered;
   \                     pb0_buffered:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     pb1_buffered:
   \   000000                DS8 2
     24          extern volatile unsigned char display_changed;
     25          extern char display_line[4][11];

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          unsigned volatile int serialState;
   \                     serialState:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          volatile char receievedFromPC = OFF;
   \                     receievedFromPC:
   \   000000                DS8 1
     28          
     29          //----------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     30          void Init_Serial_UCA(void) {
   \                     Init_Serial_UCA:
     31              int i;
     32          
     33              for(i = 0; i < SMALL_RING_SIZE; i++) {
   \   000000   0F43         MOV.W   #0x0, R15
     34                  USB0_Char_Rx_Ring[i] = 0x00;
   \                     ??Init_Serial_UCA_0:
   \   000002   CF43....     MOV.B   #0x0, USB0_Char_Rx_Ring(R15)
     35                  USB1_Char_Rx_Ring[i] = 0x00;
   \   000006   CF43....     MOV.B   #0x0, USB1_Char_Rx_Ring(R15)
     36              }
   \   00000A   1F53         ADD.W   #0x1, R15
   \   00000C   3F902000     CMP.W   #0x20, R15
   \   000010   F83B         JL      ??Init_Serial_UCA_0
     37          
     38              usb0_rx_wr = BEGINNING;
   \   000012   8243....     MOV.W   #0x0, &usb0_rx_wr
     39              usb0_rx_rd = BEGINNING;
   \   000016   8243....     MOV.W   #0x0, &usb0_rx_rd
     40              usb1_rx_wr = BEGINNING;
   \   00001A   8243....     MOV.W   #0x0, &usb1_rx_wr
     41              usb1_rx_rd = BEGINNING;
   \   00001E   8243....     MOV.W   #0x0, &usb1_rx_rd
     42          
     43              for(i = 0; i < LARGE_RING_SIZE; i++) {
   \   000022   0F43         MOV.W   #0x0, R15
     44                  USB0_Char_Tx[i] = 0x00;
   \                     ??Init_Serial_UCA_1:
   \   000024   CF43....     MOV.B   #0x0, USB0_Char_Tx(R15)
     45                  USB1_Char_Tx[i] = 0x00;
   \   000028   CF43....     MOV.B   #0x0, USB1_Char_Tx(R15)
     46              }
   \   00002C   1F53         ADD.W   #0x1, R15
   \   00002E   3F909600     CMP.W   #0x96, R15
   \   000032   F83B         JL      ??Init_Serial_UCA_1
     47          
     48              // Configure UART 0
     49              UCA0CTLW0 = 0;
   \   000034   82430005     MOV.W   #0x0, &0x500
     50              UCA0CTLW0 |= UCSWRST;
   \   000038   92D30005     BIS.W   #0x1, &0x500
     51              UCA0CTLW0 |= UCSSEL__SMCLK;
   \   00003C   B2D080000005 BIS.W   #0x80, &0x500
     52              UCA0BRW = 4;
   \   000042   A2420605     MOV.W   #0x4, &0x506
     53              UCA0MCTLW = 0x5551;
   \   000046   B24051550805 MOV.W   #0x5551, &0x508
     54              UCA0CTLW0 &= ~UCSWRST;
   \   00004C   92C30005     BIC.W   #0x1, &0x500
     55              UCA0IE |= UCRXIE;
   \   000050   92D31A05     BIS.W   #0x1, &0x51a
     56              // Configure UART 1
     57              UCA1CTLW0 = 0;
   \   000054   82438005     MOV.W   #0x0, &0x580
     58              UCA1CTLW0 |= UCSWRST;
   \   000058   92D38005     BIS.W   #0x1, &0x580
     59              UCA1CTLW0 |= UCSSEL__SMCLK;
   \   00005C   B2D080008005 BIS.W   #0x80, &0x580
     60              UCA1BRW = 4;
   \   000062   A2428605     MOV.W   #0x4, &0x586
     61              UCA1MCTLW = 0x5551;
   \   000066   B24051558805 MOV.W   #0x5551, &0x588
     62              UCA1CTLW0 &= ~UCSWRST;
   \   00006C   92C38005     BIC.W   #0x1, &0x580
     63              UCA1IE |= UCRXIE;
   \   000070   92D39A05     BIS.W   #0x1, &0x59a
     64          }
   \   000074   1001         RETA
   \   000076                REQUIRE _A_UCA0CTLW0_L
   \   000076                REQUIRE _A_UCA0BRW_L
   \   000076                REQUIRE _A_UCA0MCTLW_L
   \   000076                REQUIRE _A_UCA0IE_L
   \   000076                REQUIRE _A_UCA1CTLW0_L
   \   000076                REQUIRE _A_UCA1BRW_L
   \   000076                REQUIRE _A_UCA1MCTLW_L
   \   000076                REQUIRE _A_UCA1IE_L
     65          //------------------------------------------------------------------------------
     66          #pragma vector=EUSCI_A0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     67          __interrupt void eUSCI_A0_ISR(void) {
   \                     eUSCI_A0_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
     68              unsigned int temp;
     69          
     70              switch(__even_in_range(UCA0IV, 0x08)) {
   \   000002   1F421E05     MOV.W   &0x51e, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for eUSCI_A0_ISR>_0`:
   \   000008   313C         JMP     ??eUSCI_A0_ISR_0
   \   00000A   033C         JMP     ??eUSCI_A0_ISR_2
   \   00000C   1A3C         JMP     ??eUSCI_A0_ISR_3
   \   00000E   2E3C         JMP     ??eUSCI_A0_ISR_0
   \   000010   2D3C         JMP     ??eUSCI_A0_ISR_0
     71                  case 0:
     72                      break;
     73          
     74                  case 2: // RXIFG
     75                      temp = usb0_rx_wr++;
   \                     ??eUSCI_A0_ISR_2:
   \   000012   1F42....     MOV.W   &usb0_rx_wr, R15
   \   000016   0E4F         MOV.W   R15, R14
   \   000018   1E53         ADD.W   #0x1, R14
   \   00001A   824E....     MOV.W   R14, &usb0_rx_wr
     76                      USB0_Char_Rx_Ring[temp] = UCA0RXBUF;
   \   00001E   1E420C05     MOV.W   &0x50c, R14
   \   000022   CF4E....     MOV.B   R14, USB0_Char_Rx_Ring(R15)
     77          
     78                      if (usb0_rx_wr >= (SMALL_RING_SIZE)) {
   \   000026   B2902000.... CMP.W   #0x20, &usb0_rx_wr
   \   00002C   0228         JNC     ??eUSCI_A0_ISR_1
     79                          usb0_rx_wr = BEGINNING;
   \   00002E   8243....     MOV.W   #0x0, &usb0_rx_wr
     80                      }
     81          
     82                      if(receievedFromPC) UCA1TXBUF = USB0_Char_Rx_Ring[temp];
   \                     ??eUSCI_A0_ISR_1:
   \   000032   C293....     CMP.B   #0x0, &receievedFromPC
   \   000036   1A24         JEQ     ??eUSCI_A0_ISR_0
   \   000038   5F4F....     MOV.B   USB0_Char_Rx_Ring(R15), R15
   \   00003C   824F8E05     MOV.W   R15, &0x58e
   \   000040   153C         JMP     ??eUSCI_A0_ISR_0
     83          
     84                      break;
     85          
     86                  case 4: // TXIFG
     87                      //if(receievedFromPC==OFF) {
     88                      //  UCA0IE &= ~UCTXIE;
     89                      //  return;
     90                      //}
     91                      UCA0TXBUF = USB0_Char_Tx[tx0_index];
   \                     ??eUSCI_A0_ISR_3:
   \   000042   1F42....     MOV.W   &tx0_index, R15
   \   000046   5F4F....     MOV.B   USB0_Char_Tx(R15), R15
   \   00004A   824F0E05     MOV.W   R15, &0x50e
     92                      USB0_Char_Tx[tx0_index++] = 0;
   \   00004E   1F42....     MOV.W   &tx0_index, R15
   \   000052   0E4F         MOV.W   R15, R14
   \   000054   1E53         ADD.W   #0x1, R14
   \   000056   824E....     MOV.W   R14, &tx0_index
   \   00005A   CF43....     MOV.B   #0x0, USB0_Char_Tx(R15)
     93          
     94                      if(USB0_Char_Tx[tx0_index] == 0) {
   \   00005E   1F42....     MOV.W   &tx0_index, R15
   \   000062   CF93....     CMP.B   #0x0, USB0_Char_Tx(R15)
   \   000066   0220         JNE     ??eUSCI_A0_ISR_0
     95                          UCA0IE &= ~UCTXIE;
   \   000068   A2C31A05     BIC.W   #0x2, &0x51a
     96                      }
     97          
     98                      break;
     99          
    100                  default:
    101                      break;
    102              }
    103          }
   \                     ??eUSCI_A0_ISR_0:
   \   00006C   1E17         POPM.W  #0x2, R15
   \   00006E   0013         RETI
   \   000070                REQUIRE _A_UCA0RXBUF_L
   \   000070                REQUIRE _A_UCA1TXBUF_L
   \   000070                REQUIRE _A_UCA0TXBUF_L
   \   000070                REQUIRE _A_UCA0IE_L
   \   000070                REQUIRE _A_UCA0IV_L
    104          
    105          #pragma vector=EUSCI_A1_VECTOR

   \                                 In  segment ISR_CODE, align 2
    106          __interrupt void eUSCI_A1_ISR(void) {
   \                     eUSCI_A1_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
    107              unsigned int temp;
    108          
    109              switch(__even_in_range(UCA1IV, 0x08)) {
   \   000002   1F429E05     MOV.W   &0x59e, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for eUSCI_A1_ISR>_0`:
   \   000008   393C         JMP     ??eUSCI_A1_ISR_0
   \   00000A   033C         JMP     ??eUSCI_A1_ISR_5
   \   00000C   1F3C         JMP     ??eUSCI_A1_ISR_6
   \   00000E   363C         JMP     ??eUSCI_A1_ISR_0
   \   000010   353C         JMP     ??eUSCI_A1_ISR_0
    110                  case 0:
    111                      break;
    112          
    113                  case 2: // RXIFG
    114                      if (!receievedFromPC)// && recieved=='\n')
   \                     ??eUSCI_A1_ISR_5:
   \   000012   C293....     CMP.B   #0x0, &receievedFromPC
   \   000016   0220         JNE     ??eUSCI_A1_ISR_3
    115                          receievedFromPC = ON;
   \   000018   D243....     MOV.B   #0x1, &receievedFromPC
    116          
    117                      temp = usb1_rx_wr++;
   \                     ??eUSCI_A1_ISR_3:
   \   00001C   1F42....     MOV.W   &usb1_rx_wr, R15
   \   000020   0E4F         MOV.W   R15, R14
   \   000022   1E53         ADD.W   #0x1, R14
   \   000024   824E....     MOV.W   R14, &usb1_rx_wr
    118                      USB1_Char_Rx_Ring[temp] = UCA1RXBUF;
   \   000028   1E428C05     MOV.W   &0x58c, R14
   \   00002C   CF4E....     MOV.B   R14, USB1_Char_Rx_Ring(R15)
    119          
    120                      if(receievedFromPC)UCA0TXBUF = USB1_Char_Rx_Ring[temp];
   \   000030   C293....     CMP.B   #0x0, &receievedFromPC
   \   000034   0424         JEQ     ??eUSCI_A1_ISR_4
   \   000036   5F4F....     MOV.B   USB1_Char_Rx_Ring(R15), R15
   \   00003A   824F0E05     MOV.W   R15, &0x50e
    121          
    122                      if (usb1_rx_wr >= (SMALL_RING_SIZE)) {
   \                     ??eUSCI_A1_ISR_4:
   \   00003E   B2902000.... CMP.W   #0x20, &usb1_rx_wr
   \   000044   1B28         JNC     ??eUSCI_A1_ISR_0
    123                          usb1_rx_wr = BEGINNING;
   \   000046   8243....     MOV.W   #0x0, &usb1_rx_wr
   \   00004A   183C         JMP     ??eUSCI_A1_ISR_0
    124                      }
    125          
    126                      break;
    127          
    128                  case 4: // TXIFG
    129                      if(receievedFromPC == OFF) {
   \                     ??eUSCI_A1_ISR_6:
   \   00004C   C293....     CMP.B   #0x0, &receievedFromPC
   \   000050   1324         JEQ     ??eUSCI_A1_ISR_2
    130                          UCA1IE &= ~UCTXIE;
    131                          return;
    132                      }
    133          
    134                      UCA1TXBUF = USB1_Char_Tx[tx1_index];
   \   000052   1F42....     MOV.W   &tx1_index, R15
   \   000056   5F4F....     MOV.B   USB1_Char_Tx(R15), R15
   \   00005A   824F8E05     MOV.W   R15, &0x58e
    135                      USB1_Char_Tx[tx1_index++] = 0;
   \   00005E   1F42....     MOV.W   &tx1_index, R15
   \   000062   0E4F         MOV.W   R15, R14
   \   000064   1E53         ADD.W   #0x1, R14
   \   000066   824E....     MOV.W   R14, &tx1_index
   \   00006A   CF43....     MOV.B   #0x0, USB1_Char_Tx(R15)
    136          
    137                      if(USB1_Char_Tx[tx1_index] == 0) {
   \   00006E   1F42....     MOV.W   &tx1_index, R15
   \   000072   CF93....     CMP.B   #0x0, USB1_Char_Tx(R15)
   \   000076   0220         JNE     ??eUSCI_A1_ISR_0
    138                          UCA1IE &= ~UCTXIE;
   \                     ??eUSCI_A1_ISR_2:
   \   000078   A2C39A05     BIC.W   #0x2, &0x59a
    139                      }
    140          
    141                      break;
    142          
    143                  default:
    144                      break;
    145              }
    146          }
   \                     ??eUSCI_A1_ISR_0:
   \   00007C   1E17         POPM.W  #0x2, R15
   \   00007E   0013         RETI
   \   000080                REQUIRE _A_UCA1RXBUF_L
   \   000080                REQUIRE _A_UCA0TXBUF_L
   \   000080                REQUIRE _A_UCA1IE_L
   \   000080                REQUIRE _A_UCA1TXBUF_L
   \   000080                REQUIRE _A_UCA1IV_L
    147          

   \                                 In  segment CODE, align 2
    148          void clearProcessBuff(volatile char* pb, volatile unsigned int* pb_index, volatile unsigned int* pb_buffered) {
   \                     clearProcessBuff:
   \   000000   0A12         PUSH.W  R10
    149              for(int i = 0; i < LARGE_RING_SIZE; ++i)pb[i] = 0;
   \   000002   0A43         MOV.W   #0x0, R10
   \                     ??clearProcessBuff_0:
   \   000004   0F4C         MOV.W   R12, R15
   \   000006   0F5A         ADD.W   R10, R15
   \   000008   CF430000     MOV.B   #0x0, 0(R15)
   \   00000C   1A53         ADD.W   #0x1, R10
   \   00000E   3A909600     CMP.W   #0x96, R10
   \   000012   F83B         JL      ??clearProcessBuff_0
    150          
    151              *pb_index = 0;
   \   000014   8D430000     MOV.W   #0x0, 0(R13)
    152              *pb_buffered = 0;
   \   000018   8E430000     MOV.W   #0x0, 0(R14)
    153          }
   \   00001C   3A41         POP.W   R10
   \   00001E   1001         RETA

   \                                 In  segment CODE, align 2
    154          void clearProcessBuff_0(void) {
   \                     clearProcessBuff_0:
    155              clearProcessBuff(USB0_Char_Rx_Process, &pb0_index, &pb0_buffered);
   \   000000   3E40....     MOV.W   #pb0_buffered, R14
   \   000004   3D40....     MOV.W   #pb0_index, R13
   \   000008   3C40....     MOV.W   #USB0_Char_Rx_Process, R12
   \   00000C   ........     BRA     #clearProcessBuff
    156          }

   \                                 In  segment CODE, align 2
    157          void clearProcessBuff_1(void) {
   \                     clearProcessBuff_1:
    158              clearProcessBuff(USB1_Char_Rx_Process, &pb1_index, &pb1_buffered);
   \   000000   3E40....     MOV.W   #pb1_buffered, R14
   \   000004   3D40....     MOV.W   #pb1_index, R13
   \   000008   3C40....     MOV.W   #USB1_Char_Rx_Process, R12
   \   00000C   ........     BRA     #clearProcessBuff
    159          }
    160          
    161          /*void out_character(char character) {
    162              //------------------------------------------------------------------------------
    163              // The while loop will stall as long as the Flag is not set [port is busy]
    164              while (!(UCA0IFG & UCTXIFG)); // USCI_A0 TX buffer ready?
    165          
    166              UCA0TXBUF = character;
    167              //------------------------------------------------------------------------------
    168          }*/
    169          

   \                                 In  segment CODE, align 2
    170          void USCI_A0_transmit(void) {
   \                     USCI_A0_transmit:
    171              tx0_index = 0;
   \   000000   8243....     MOV.W   #0x0, &tx0_index
    172              UCA0IE |= UCTXIE;
   \   000004   A2D31A05     BIS.W   #0x2, &0x51a
    173          }
   \   000008   1001         RETA
   \   00000A                REQUIRE _A_UCA0IE_L
    174          

   \                                 In  segment CODE, align 2
    175          void USCI_A1_transmit(void) {
   \                     USCI_A1_transmit:
    176              tx1_index = 0;
   \   000000   8243....     MOV.W   #0x0, &tx1_index
    177              UCA1IE |= UCTXIE;
   \   000004   A2D39A05     BIS.W   #0x2, &0x59a
    178          }
   \   000008   1001         RETA
   \   00000A                REQUIRE _A_UCA1IE_L
    179          

   \                                 In  segment CODE, align 2
    180          void loadRingtoPB(volatile unsigned int* rx_wr, unsigned int* rx_rd, volatile char* Rx_Process, volatile char* Rx_Ring, volatile unsigned int* pb_index, volatile unsigned int* pb_buffered) {
   \                     loadRingtoPB:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   1A410E00     MOV.W   0xe(SP), R10
    181              if(*pb_buffered) return;
   \   000006   284A         MOV.W   @R10, R8
   \   000008   0893         CMP.W   #0x0, R8
   \   00000A   2F20         JNE     ??loadRingtoPB_0
   \   00000C   1B410C00     MOV.W   0xc(SP), R11
    182              if(*rx_wr != *rx_rd) {
   \   000010   AC9D0000     CMP.W   @R13, 0(R12)
   \   000014   1724         JEQ     ??loadRingtoPB_2
    183                  Rx_Process[pb0_index] = Rx_Ring[*rx_rd];
                         ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is undefined
          in this statement
   \   000016   1C42....     MOV.W   &pb0_index, R12
   \   00001A   2F5D         ADD.W   @R13, R15
   \   00001C   0C5E         ADD.W   R14, R12
   \   00001E   EC4F0000     MOV.B   @R15, 0(R12)
    184          
    185                  if(++(*rx_rd) > SMALL_RING_SIZE - 1) *rx_rd = BEGINNING;
   \   000022   2F4D         MOV.W   @R13, R15
   \   000024   1F53         ADD.W   #0x1, R15
   \   000026   3F902000     CMP.W   #0x20, R15
   \   00002A   0128         JNC     ??loadRingtoPB_3
   \   00002C   0F43         MOV.W   #0x0, R15
   \                     ??loadRingtoPB_3:
   \   00002E   8D4F0000     MOV.W   R15, 0(R13)
    186          
    187                  if(++(*pb_index) > LARGE_RING_SIZE - 1) *pb_index = BEGINNING;
   \   000032   2F4B         MOV.W   @R11, R15
   \   000034   1F53         ADD.W   #0x1, R15
   \   000036   8B4F0000     MOV.W   R15, 0(R11)
   \   00003A   3F909600     CMP.W   #0x96, R15
   \   00003E   0228         JNC     ??loadRingtoPB_2
   \   000040   8B430000     MOV.W   #0x0, 0(R11)
    188              }
    189          
    190              if(*pb_index >= 2 && Rx_Process[(*pb_index) - 1] == '\n' && Rx_Process[(*pb_index) - 2] == '\r') {
   \                     ??loadRingtoPB_2:
   \   000044   284B         MOV.W   @R11, R8
   \   000046   2893         CMP.W   #0x2, R8
   \   000048   1028         JNC     ??loadRingtoPB_0
   \   00004A   2D4B         MOV.W   @R11, R13
   \   00004C   0D5E         ADD.W   R14, R13
   \   00004E   FD900A00FFFF CMP.B   #0xa, 0xffff(R13)
   \   000054   0A20         JNE     ??loadRingtoPB_0
   \   000056   2F4B         MOV.W   @R11, R15
   \   000058   0E5F         ADD.W   R15, R14
   \   00005A   FE900D00FEFF CMP.B   #0xd, 0xfffe(R14)
   \   000060   0420         JNE     ??loadRingtoPB_0
    191                  *pb_buffered = 1;
   \   000062   9A430000     MOV.W   #0x1, 0(R10)
    192                  *pb_index = BEGINNING;
   \   000066   8B430000     MOV.W   #0x0, 0(R11)
    193              }
    194          }
   \                     ??loadRingtoPB_0:
   \   00006A   3817         POPM.W  #0x4, R11
   \   00006C   1001         RETA
    195          

   \                                 In  segment CODE, align 2, keep-with-next
    196          void loadRingtoPB_0(void) {
   \                     loadRingtoPB_0:
    197              loadRingtoPB(&usb0_rx_wr, &usb0_rx_rd, USB0_Char_Rx_Process, USB0_Char_Rx_Ring, &pb0_index, &pb0_buffered);
   \   000000   3012....     PUSH.W  #pb0_buffered
   \   000004   3012....     PUSH.W  #pb0_index
   \   000008   3F40....     MOV.W   #USB0_Char_Rx_Ring, R15
   \   00000C   3E40....     MOV.W   #USB0_Char_Rx_Process, R14
   \   000010   3D40....     MOV.W   #usb0_rx_rd, R13
   \   000014   3C40....     MOV.W   #usb0_rx_wr, R12
   \   000018                REQUIRE ?Subroutine0
   \   000018                // Fall through to label ?Subroutine0
    198          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   000000   ........     CALLA   #loadRingtoPB
   \   000004   A1000400     ADDA    #0x4, SP
   \   000008   1001         RETA

   \                                 In  segment CODE, align 2
    199          void loadRingtoPB_1(void) {
   \                     loadRingtoPB_1:
    200              loadRingtoPB(&usb1_rx_wr, &usb1_rx_rd, USB1_Char_Rx_Process, USB1_Char_Rx_Ring, &pb1_index, &pb1_buffered);
   \   000000   3012....     PUSH.W  #pb1_buffered
   \   000004   3012....     PUSH.W  #pb1_index
   \   000008   3F40....     MOV.W   #USB1_Char_Rx_Ring, R15
   \   00000C   3E40....     MOV.W   #USB1_Char_Rx_Process, R14
   \   000010   3D40....     MOV.W   #usb1_rx_rd, R13
   \   000014   3C40....     MOV.W   #usb1_rx_wr, R12
   \   000018   ....         JMP     ?Subroutine0
   \   00001A   0343         NOP
    201          }
    202          
    203          

   \                                 In  segment CODE, align 2
    204          void SerialProcess(void) {
   \                     SerialProcess:
    205              /*if(!pb0_buffered)*/loadRingtoPB_0();
   \   000000   ........     CALLA   #loadRingtoPB_0
    206          
    207              /*if(!pb1_buffered)*/loadRingtoPB_1();
   \   000004   ........     BRA     #loadRingtoPB_1
    208          
    209          }

   \                                 In  segment INTVEC, offset 0x40, root
   \                     `??eUSCI_A1_ISR::??INTVEC 64`:
   \   000040   ....         DC16    eUSCI_A1_ISR

   \                                 In  segment INTVEC, offset 0x42, root
   \                     `??eUSCI_A0_ISR::??INTVEC 66`:
   \   000042   ....         DC16    eUSCI_A0_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Serial_UCA
      4   SerialProcess
        4   -> loadRingtoPB_0
        0   -> loadRingtoPB_1
      4   USCI_A0_transmit
      4   USCI_A1_transmit
      6   clearProcessBuff
      4   clearProcessBuff_0
        0   -> clearProcessBuff
      4   clearProcessBuff_1
        0   -> clearProcessBuff
      8   eUSCI_A0_ISR
      8   eUSCI_A1_ISR
     12   loadRingtoPB
      8   loadRingtoPB_0
        8   -> loadRingtoPB
      8   loadRingtoPB_1
        8   -> loadRingtoPB


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?Subroutine0
     118  Init_Serial_UCA
       8  SerialProcess
     150  USB0_Char_Rx_Process
      32  USB0_Char_Rx_Ring
     150  USB0_Char_Tx
     150  USB1_Char_Rx_Process
      32  USB1_Char_Rx_Ring
     150  USB1_Char_Tx
      10  USCI_A0_transmit
      10  USCI_A1_transmit
       2  _A_UCA0BRW_L
       2  _A_UCA0CTLW0_L
       2  _A_UCA0IE_L
       2  _A_UCA0IV_L
       2  _A_UCA0MCTLW_L
       2  _A_UCA0RXBUF_L
       2  _A_UCA0TXBUF_L
       2  _A_UCA1BRW_L
       2  _A_UCA1CTLW0_L
       2  _A_UCA1IE_L
       2  _A_UCA1IV_L
       2  _A_UCA1MCTLW_L
       2  _A_UCA1RXBUF_L
       2  _A_UCA1TXBUF_L
      32  clearProcessBuff
      16  clearProcessBuff_0
      16  clearProcessBuff_1
     112  eUSCI_A0_ISR
       2  eUSCI_A0_ISR::??INTVEC 66
     128  eUSCI_A1_ISR
       2  eUSCI_A1_ISR::??INTVEC 64
     110  loadRingtoPB
      24  loadRingtoPB_0
      28  loadRingtoPB_1
       2  pb0_buffered
       2  pb0_index
       2  pb1_buffered
       2  pb1_index
       1  receievedFromPC
       2  serialState
       2  tx0_index
       2  tx1_index
       2  usb0_rx_rd
       2  usb0_rx_wr
       2  usb1_rx_rd
       2  usb1_rx_wr

 
 382 bytes in segment CODE
  28 bytes in segment DATA16_AN
 687 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 240 bytes in segment ISR_CODE
 
 622 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
 687 bytes of DATA  memory (+ 28 bytes shared)

Errors: none
Warnings: 1
