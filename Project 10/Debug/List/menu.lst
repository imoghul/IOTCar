###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          20/Apr/2022  15:13:01
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\anotherone\Project 10\menu.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWDB57.tmp
#        ("C:\Users\saad\Documents\anotherone\Project 10\menu.c" -lC
#        "C:\Users\saad\Documents\anotherone\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\anotherone\Project 10\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\anotherone\Project 10\Debug\List\menu.lst
#    Object file   =  
#        C:\Users\saad\Documents\anotherone\Project 10\Debug\Obj\menu.r43
#
###############################################################################

C:\Users\saad\Documents\anotherone\Project 10\menu.c
      1          #include "menu.h"
      2          #include "msp430.h"
      3          #include "adc.h"
      4          #include "functions.h"
      5          #include "iot.h"
      6          #include "sm.h"
      7          #include <string.h>
      8          #include <stdlib.h>
      9          extern volatile unsigned int ADC_Thumb;
     10          extern volatile unsigned char display_changed;
     11          extern volatile unsigned int calibrationMode;
     12          extern char display_line[4][11];
     13          extern volatile char state;

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          char menuState = START_MENU;
   \                     menuState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for menuState>`
     15          extern unsigned int LBDetect, LWDetect, RBDetect, RWDetect;
     16          extern volatile char transMenu, interractMenu;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          unsigned int lastThumb;
   \                     lastThumb:
   \   000000                DS8 2
     18          extern command currCommand;
     19          extern char commandsReceieved;
     20          extern volatile unsigned int stopwatchUpdated;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          int commandDisplayCounter;
   \                     commandDisplayCounter:
   \   000000                DS8 2
     22          extern volatile int timeElapsedSeconds, timeElapsedMilliseconds;
     23          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          menu mainMenu;
   \                     mainMenu:
   \   000000                DS8 64
     25          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     26          menu calib = {
   \                     calib:
   \   000000                DS8 64
   \   000040                REQUIRE `?<Initializer for calib>`
     27              .length = 1,
     28              .current = 0,
     29              .name = CALIB_MENU,
     30              .headers = {""},
     31              .values = {""},
     32              .transitions = {&mainMenu}
     33          };

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     34          menu start = {
   \                     start:
   \   000000                DS8 64
   \   000040                REQUIRE `?<Initializer for start>`
     35              .length = 1,
     36              .current = 0,
     37              .name = START_MENU,
     38              .headers = {""},
     39              .values = {""},
     40              .transitions = {&mainMenu}
     41          };

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     42          menu commandsOutput = {
   \                     commandsOutput:
   \   000000                DS8 64
   \   000040                REQUIRE `?<Initializer for commandsOutput>`
     43              .length = 1,
     44              .current = 0,
     45              .name = COMMANDS_MENU,
     46              .headers = {""},
     47              .values = {""},
     48              .transitions = {&mainMenu}
     49          };
     50          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     51          menu* currMenu = &start;
   \                     currMenu:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for currMenu>`
     52          
     53          
     54          
     55          /*void displayStartMenu() {}
     56          
     57          void displayMainMenu() {
     58              strcpy(display_line[0], mainMenu.headers[mainMenu.current]);
     59          }
     60          
     61          void displayCalibMenu() {
     62              display_changed = 1;
     63          }*/
     64          

   \                                 In  segment CODE, align 2
     65          void displayCommand(){
   \                     displayCommand:
     66            if(currCommand.comm != LINEFOLLOW_COMMAND && currCommand.comm != EXIT_COMMAND){
   \   000000   5E42....     MOV.B   &currCommand, R14
   \   000004   7E906F00     CMP.B   #0x6f, R14
   \   000008   0C24         JEQ     ??displayCommand_0
   \   00000A   7E906500     CMP.B   #0x65, R14
   \   00000E   0924         JEQ     ??displayCommand_0
     67              display_line[3][0] = currCommand.comm;
   \   000010   C24E....     MOV.B   R14, &display_line + 33
     68              HEXtoBCD(currCommand.duration, 3, 1);
                     ^
Warning[Pe223]: function "HEXtoBCD" declared implicitly
   \   000014   1E43         MOV.W   #0x1, R14
   \   000016   3D400300     MOV.W   #0x3, R13
   \   00001A   1C42....     MOV.W   &currCommand + 2, R12
   \   00001E   ........     CALLA   #HEXtoBCD
     69            }
     70          }
   \                     ??displayCommand_0:
   \   000022   1001         RETA
     71          

   \                                 In  segment CODE, align 2
     72          void displayStatus(){
   \                     displayStatus:
     73            if(currCommand.comm == LINEFOLLOW_COMMAND) {
   \   000000   F2906F00.... CMP.B   #0x6f, &currCommand
   \   000006   1820         JNE     ??displayStatus_4
     74                  strcpy(display_line[3],"Auto.     ");
   \   000008   3D40....     MOV.W   #`?<Constant "Auto.     ">`, R13
   \   00000C   3C40....     MOV.W   #display_line + 33, R12
   \                     ??displayStatus_3:
   \   000010   ........     CALLA   #strcpy
     75              } else if(state == DONE) {
     76                  strcpy(display_line[3],"Time      ");
     77                  strcpy(display_line[1], " That was ");
     78                  strcpy(display_line[2], "easy!! ;-)");
     79          
     80              } else if(commandsReceieved && currCommand.comm == 0 && currCommand.duration == 0) strcpy(display_line[3],"          ");//display_line[3][0] = display_line[3][1] = display_line[3][2] = display_line[3][3] = display_line[3][4] = ' ';
     81               if(commandsReceieved){//(stopwatchUpdated) {
   \   000014   C293....     CMP.B   #0x0, &commandsReceieved
   \   000018   0E24         JEQ     ??displayStatus_1
     82                  //stopwatchUpdated = 0;
     83                  HEXtoBCD(timeElapsedSeconds, 3, 5);
                         ^
Warning[Pe223]: function "HEXtoBCD" declared implicitly
   \                     ??displayStatus_2:
   \   00001A   3E400500     MOV.W   #0x5, R14
   \   00001E   3D400300     MOV.W   #0x3, R13
   \   000022   1C42....     MOV.W   &timeElapsedSeconds, R12
   \   000026   ........     CALLA   #HEXtoBCD
     84                  display_line[3][5] = ' ';
   \   00002A   F2402000.... MOV.B   #0x20, &display_line + 38
     85                  display_line[3][9] = 's';
   \   000030   F2407300.... MOV.B   #0x73, &display_line + 42
     86                  //display_line[3][9] = timeElapsedMilliseconds + '0';
     87              }
     88          }
   \                     ??displayStatus_1:
   \   000036   1001         RETA
   \                     ??displayStatus_4:
   \   000038   F2906400.... CMP.B   #0x64, &state
   \   00003E   0D20         JNE     ??displayStatus_5
   \   000040   3D40....     MOV.W   #`?<Constant "Time      ">`, R13
   \   000044   ........     CALLA   #?Subroutine2
   \                     ??CrossCallReturnLabel_6:
   \   000048   3D40....     MOV.W   #`?<Constant " That was ">`, R13
   \   00004C   ........     CALLA   #?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   000050   3D40....     MOV.W   #`?<Constant "easy!! ;-)">`, R13
   \   000054   3C40....     MOV.W   #display_line + 22, R12
   \   000058   DB3F         JMP     ??displayStatus_3
   \                     ??displayStatus_5:
   \   00005A   C293....     CMP.B   #0x0, &commandsReceieved
   \   00005E   EB27         JEQ     ??displayStatus_1
   \   000060   C293....     CMP.B   #0x0, &currCommand
   \   000064   DA23         JNE     ??displayStatus_2
   \   000066   8293....     CMP.W   #0x0, &currCommand + 2
   \   00006A   D723         JNE     ??displayStatus_2
   \   00006C   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000070   ........     CALLA   #?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   000074   D23F         JMP     ??displayStatus_2
   \   000076   0343         NOP

   \                                 In  segment CODE, align 2
   \                     ?Subroutine3:
   \   000000   3C40....     MOV.W   #display_line + 11, R12
   \   000004   ........     BRA     #strcpy

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   000000   3C40....     MOV.W   #display_line + 33, R12
   \   000004   ........     BRA     #strcpy
     89          

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   000000   3C40....     MOV.W   #display_line, R12
   \   000004   ........     BRA     #strcpy

   \                                 In  segment CODE, align 2
     90          void displayArrival(){
   \                     displayArrival:
     91            
     92            if(currCommand.comm == DISPLAY_NUMBER_COMMAND) {
   \   000000   F2906400.... CMP.B   #0x64, &currCommand
   \   000006   0A20         JNE     ??displayArrival_0
     93                  strcpy(display_line[0], "ARRIVED 0 ");
   \   000008   3D40....     MOV.W   #`?<Constant "ARRIVED 0 ">`, R13
   \   00000C   ........     CALLA   #?Subroutine1
     94                  display_line[0][9] = currCommand.duration + '0';
   \                     ??CrossCallReturnLabel_3:
   \   000010   5E42....     MOV.B   &currCommand + 2, R14
   \   000014   7E503000     ADD.B   #0x30, R14
   \   000018   C24E....     MOV.B   R14, &display_line + 9
     95            }
     96            
     97          }
   \                     ??displayArrival_0:
   \   00001C   1001         RETA
     98          

   \                                 In  segment CODE, align 2
     99          void displayIp(){
   \                     displayIp:
    100            
    101            if(commandsReceieved) {
   \   000000   C293....     CMP.B   #0x0, &commandsReceieved
   \   000004   0724         JEQ     ??displayIp_0
    102                  if(state != DONE)displayIP(1);
   \   000006   F2906400.... CMP.B   #0x64, &state
   \   00000C   1224         JEQ     ??displayIp_1
   \   00000E   1C43         MOV.W   #0x1, R12
   \   000010   ........     BRA     #displayIP
    103              } else {
    104                  strcpy(display_line[0], " WAITING  ");
   \                     ??displayIp_0:
   \   000014   3D40....     MOV.W   #`?<Constant " WAITING  ">`, R13
   \   000018   ........     CALLA   #?Subroutine1
    105                  strcpy(display_line[1], " FOR INPUT");
   \                     ??CrossCallReturnLabel_2:
   \   00001C   3D40....     MOV.W   #`?<Constant " FOR INPUT">`, R13
   \   000020   ........     CALLA   #?Subroutine3
    106          
    107                  if(state != DONE)displayIP(2);
   \                     ??CrossCallReturnLabel_8:
   \   000024   F2906400.... CMP.B   #0x64, &state
   \   00002A   0324         JEQ     ??displayIp_1
   \   00002C   2C43         MOV.W   #0x2, R12
   \   00002E   ........     CALLA   #displayIP
    108              }
    109            
    110          }
   \                     ??displayIp_1:
   \   000032   1001         RETA
    111          

   \                                 In  segment CODE, align 2
    112          void displayStopwatch(){
   \                     displayStopwatch:
    113              
    114          }
   \   000000   1001         RETA
    115          

   \                                 In  segment CODE, align 2, keep-with-next
    116          void displayCommandsMenu() {
   \                     displayCommandsMenu:
    117            switch(commandDisplayCounter++){
   \   000000   1F42....     MOV.W   &commandDisplayCounter, R15
   \   000004   0E4F         MOV.W   R15, R14
   \   000006   1E53         ADD.W   #0x1, R14
   \   000008   824E....     MOV.W   R14, &commandDisplayCounter
   \   00000C   0F83         SUB.W   #0x0, R15
   \   00000E   0D24         JEQ     ??displayCommandsMenu_1
   \   000010   3F806400     SUB.W   #0x64, R15
   \   000014   0D24         JEQ     ??displayCommandsMenu_2
   \   000016   3F806400     SUB.W   #0x64, R15
   \   00001A   0D24         JEQ     ??displayCommandsMenu_3
   \   00001C   3F806400     SUB.W   #0x64, R15
   \   000020   0C24         JEQ     ??displayCommandsMenu_4
   \   000022   3F80C800     SUB.W   #0xc8, R15
   \   000026   0C24         JEQ     ??displayCommandsMenu_5
   \   000028   0D3C         JMP     ??displayCommandsMenu_0
    118              case 0:
    119                displayCommand();
   \                     ??displayCommandsMenu_1:
   \   00002A   ........     CALLA   #displayCommand
    120                break;
   \   00002E   0A3C         JMP     ??displayCommandsMenu_0
    121              case 100:
    122                displayStatus();
   \                     ??displayCommandsMenu_2:
   \   000030   ........     CALLA   #displayStatus
    123                break;
   \   000034   073C         JMP     ??displayCommandsMenu_0
    124              case 200:
    125                displayArrival();
   \                     ??displayCommandsMenu_3:
   \   000036   ........     CALLA   #displayArrival
    126              case 300:
    127                displayIp();
   \                     ??displayCommandsMenu_4:
   \   00003A   ........     CALLA   #displayIp
    128                break;
   \   00003E   023C         JMP     ??displayCommandsMenu_0
    129              case 400:
    130                displayStopwatch();
    131                break;
    132              case 500:
    133                commandDisplayCounter = 0;
   \                     ??displayCommandsMenu_5:
   \   000040   8243....     MOV.W   #0x0, &commandDisplayCounter
    134                break;
    135              default: break;
    136            }
    137              display_changed = 1;
   \                     ??displayCommandsMenu_0:
   \   000044                REQUIRE ?Subroutine0
   \   000044                // Fall through to label ?Subroutine0
    138          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   000000   D243....     MOV.B   #0x1, &display_changed
   \   000004   1001         RETA
    139          
    140          

   \                                 In  segment CODE, align 2, keep-with-next
    141          void updateMenuPos(menu* m) {
   \                     updateMenuPos:
    142              unsigned int val = (ADC_Thumb * m->length) >> THUMB_RES;
   \   000000   6E4C         MOV.B   @R12, R14
   \   000002   0212         PUSH.W  SR
   \   000004   32C2         DINT
   \   000006   0343         NOP
   \   000008   9242........ MOV.W   &ADC_Thumb, &__iar_HWMUL       // MPY
   \   00000E   824E....     MOV.W   R14, &__iar_HWMUL + 8          // OP2
   \   000012   1F42....     MOV.W   &__iar_HWMUL + 10, R15         // RESLO
   \   000016   0343         NOP
   \   000018   3241         POP.W   SR
   \   00001A   5F0F         RRUM.W  #0x4, R15
   \   00001C   5F03         RRUM.W  #0x1, R15
    143              m->current  = val < m->length ? val : m->length - 1;
   \   00001E   0F9E         CMP.W   R14, R15
   \   000020   0228         JNC     ??updateMenuPos_1
   \   000022   6F4C         MOV.B   @R12, R15
   \   000024   7F53         ADD.B   #0xff, R15
   \                     ??updateMenuPos_1:
   \   000026   CC4F0100     MOV.B   R15, 0x1(R12)
    144          }
   \   00002A   1001         RETA
    145          

   \                                 In  segment CODE, align 2, keep-with-next
    146          void interractWithMenu(void) {
   \                     interractWithMenu:
    147              /*switch(menuState) {
    148                  case CALIB_MENU:
    149                      calibrationMode++;
    150                      break;
    151              }*/
    152              if(menuState == CALIB_MENU) calibrationMode++;
   \   000000   F2904300.... CMP.B   #0x43, &menuState
   \   000006   0220         JNE     ??interractWithMenu_0
   \   000008   9253....     ADD.W   #0x1, &calibrationMode
    153          }
   \                     ??interractWithMenu_0:
   \   00000C   1001         RETA
    154          

   \                                 In  segment CODE, align 2, keep-with-next
    155          void transitionMenu(menu* m) {
   \                     transitionMenu:
   \   000000   0A12         PUSH.W  R10
    156              // transitioning out code
    157              if(menuState == CALIB_MENU) {
   \   000002   F2904300.... CMP.B   #0x43, &menuState
   \   000008   0320         JNE     ??transitionMenu_0
    158                  state = START;
   \   00000A   F2405300.... MOV.B   #0x53, &state
    159              }
    160          
    161              currMenu = m->transitions[m->current];
   \                     ??transitionMenu_0:
   \   000010   5F4C0100     MOV.B   0x1(R12), R15
   \   000014   0C5F         ADD.W   R15, R12
   \   000016   0C5F         ADD.W   R15, R12
   \   000018   1F4C2C00     MOV.W   0x2c(R12), R15
   \   00001C   824F....     MOV.W   R15, &currMenu
    162              menuState = currMenu->name;
   \   000020   5E4F0200     MOV.B   0x2(R15), R14
   \   000024   C24E....     MOV.B   R14, &menuState
    163          
    164              // transitioning in code
    165              if(menuState == CALIB_MENU) {
   \   000028   7E904300     CMP.B   #0x43, R14
   \   00002C   0D20         JNE     ??transitionMenu_1
    166                  calibrationMode = 0;
   \   00002E   8243....     MOV.W   #0x0, &calibrationMode
    167                  LBDetect = RBDetect = LWDetect = RWDetect = 0;
   \   000032   8243....     MOV.W   #0x0, &RWDetect
   \   000036   8243....     MOV.W   #0x0, &LWDetect
   \   00003A   8243....     MOV.W   #0x0, &RBDetect
   \   00003E   8243....     MOV.W   #0x0, &LBDetect
    168                  state = CALIBRATE;
   \   000042   F2404300.... MOV.B   #0x43, &state
    169              }
    170          
    171              strcpy(display_line[0], "          ");
   \                     ??transitionMenu_1:
   \   000048   3A40....     MOV.W   #`?<Constant "          ">`, R10
   \   00004C   0D4A         MOV.W   R10, R13
   \   00004E   ........     CALLA   #?Subroutine1
    172              strcpy(display_line[1], "          ");
   \                     ??CrossCallReturnLabel_1:
   \   000052   0D4A         MOV.W   R10, R13
   \   000054   ........     CALLA   #?Subroutine3
    173              strcpy(display_line[2], "          ");
   \                     ??CrossCallReturnLabel_7:
   \   000058   0D4A         MOV.W   R10, R13
   \   00005A   3C40....     MOV.W   #display_line + 22, R12
   \   00005E   ........     CALLA   #strcpy
    174              strcpy(display_line[3], "          ");
   \   000062   0D4A         MOV.W   R10, R13
   \   000064   ........     CALLA   #?Subroutine2
    175              display_changed = 1;
   \                     ??CrossCallReturnLabel_4:
   \   000068   D243....     MOV.B   #0x1, &display_changed
    176          }
   \   00006C   3A41         POP.W   R10
   \   00006E   1001         RETA
    177          

   \                                 In  segment CODE, align 2
    178          void MenuProcess(void) {
   \                     MenuProcess:
    179              if(transMenu) {
   \   000000   C293....     CMP.B   #0x0, &transMenu
   \   000004   0624         JEQ     ??MenuProcess_0
    180                  transMenu = 0;
   \   000006   C243....     MOV.B   #0x0, &transMenu
    181                  transitionMenu(currMenu);
   \   00000A   1C42....     MOV.W   &currMenu, R12
   \   00000E   ........     CALLA   #transitionMenu
    182              }
    183          
    184              if(interractMenu) {
   \                     ??MenuProcess_0:
   \   000012   C293....     CMP.B   #0x0, &interractMenu
   \   000016   0424         JEQ     ??MenuProcess_1
    185                  interractMenu = 0;
   \   000018   C243....     MOV.B   #0x0, &interractMenu
    186                  interractWithMenu();
   \   00001C   ........     CALLA   #interractWithMenu
    187              }
    188          
    189              switch(menuState) {
   \                     ??MenuProcess_1:
   \   000020   5E42....     MOV.B   &menuState, R14
   \   000024   7E804D00     SUB.B   #0x4d, R14
   \   000028   0424         JEQ     ??MenuProcess_2
   \   00002A   7E801600     SUB.B   #0x16, R14
   \   00002E   0D24         JEQ     ??MenuProcess_3
   \   000030   1001         RETA
    190                  /*case START_MENU:
    191                      //updateMenuPos(&start);
    192                      //displayStartMenu();
    193                      break;*/
    194                  case MAIN_MENU:
    195                      updateMenuPos(&mainMenu);
   \                     ??MenuProcess_2:
   \   000032   3C40....     MOV.W   #mainMenu, R12
   \   000036   ........     CALLA   #updateMenuPos
    196                      strcpy(display_line[0], mainMenu.headers[mainMenu.current]);
   \   00003A   5F42....     MOV.B   &mainMenu + 1, R15
   \   00003E   0F5F         RLA.W   R15
   \   000040   1D4F....     MOV.W   mainMenu + 4(R15), R13
   \   000044   ........     CALLA   #?Subroutine1
    197                      //displayMainMenu();
    198                      display_changed = 1;
   \                     ??CrossCallReturnLabel_0:
   \   000048   ....         JMP     ?Subroutine0
    199                      break;
    200          
    201                  case COMMANDS_MENU:
    202                      displayCommandsMenu();
   \                     ??MenuProcess_3:
   \   00004A   ........     BRA     #displayCommandsMenu
    203                      break;
    204          
    205                  /*case NETWORK_MENU:
    206                      displayNetworkInfo();
    207                      break;*/
    208          
    209                  default:
    210                      break;
    211              }
    212          }
    213          

   \                                 In  segment CODE, align 2
    214          void Init_Menu(void) {
   \                     Init_Menu:
    215              // calib = (menu) {
    216              //     .length = 1,
    217              //     .current = 0,
    218              //     .name = CALIB_MENU,
    219              //     .headers = {""},
    220              //     .values = {""},
    221              //     .transitions = {&mainMenu}
    222              // };
    223          
    224              mainMenu  = (menu) {
    225                  .length = 2,
    226                  .current = 0,
    227                  .name = MAIN_MENU,
    228                  .headers = {"CALIBRATE ", " COMMANDS "}, //," NETWORK  "},
    229                  .values = {""},
    230                  .transitions = {&calib, &commandsOutput} //,&networkInfo}
    231              };
   \   000000   3C40....     MOV.W   #mainMenu, R12
   \   000004   3E40....     MOV.W   #?_0, R14
   \   000008   3D402000     MOV.W   #0x20, R13
   \   00000C   ........     BRA     #?CopyMemoryWords
    232          
    233              // start  = (menu) {
    234              //     .length = 1,
    235              //     .current = 0,
    236              //     .name = START_MENU,
    237              //     .headers = {""},
    238              //     .values = {""},
    239              //     .transitions = {&mainMenu}
    240              // };
    241              // commandsOutput = (menu) {
    242              //     .length = 1,
    243              //     .current = 0,
    244              //     .name = COMMANDS_MENU,
    245              //     .headers = {""},
    246              //     .values = {""},
    247              //     .transitions = {&mainMenu}
    248              // };
    249              /*networkInfo = (menu){
    250                  .length = 1,
    251                  .current = 0,
    252                  .name = NETWORK_MENU,
    253                  .headers = {""},
    254                  .values = {""},
    255                  .transitions = {&mainMenu}
    256              };*/
    257          }

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for menuState>`:
   \   000000   54           DC8 84

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for calib>`:
   \   000000   01004300     DC8 1, 0, 67, 0
   \   000004   ....         DC16 `?<Constant "">`
   \   000006   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \   000018   ....         DC16 `?<Constant "">`
   \   00001A   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \   00002C   ....         DC16 mainMenu
   \   00002E   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for start>`:
   \   000000   01005400     DC8 1, 0, 84, 0
   \   000004   ....         DC16 `?<Constant "">`
   \   000006   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \   000018   ....         DC16 `?<Constant "">`
   \   00001A   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \   00002C   ....         DC16 mainMenu
   \   00002E   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for commandsOutput>`:
   \   000000   01006300     DC8 1, 0, 99, 0
   \   000004   ....         DC16 `?<Constant "">`
   \   000006   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \   000018   ....         DC16 `?<Constant "">`
   \   00001A   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \   00002C   ....         DC16 mainMenu
   \   00002E   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for currMenu>`:
   \   000000   ....         DC16 start

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Auto.     ">`:
   \   000000   4175746F2E20 DC8 "Auto.     "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Time      ">`:
   \   000000   54696D652020 DC8 "Time      "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " That was ">`:
   \   000000   205468617420 DC8 " That was "
   \            7761732000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "easy!! ;-)">`:
   \   000000   656173792121 DC8 "easy!! ;-)"
   \            203B2D2900  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ARRIVED 0 ">`:
   \   000000   415252495645 DC8 "ARRIVED 0 "
   \            4420302000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " WAITING  ">`:
   \   000000   205741495449 DC8 " WAITING  "
   \            4E47202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " FOR INPUT">`:
   \   000000   20464F522049 DC8 " FOR INPUT"
   \            4E50555400  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CALIBRATE ">`:
   \   000000   43414C494252 DC8 "CALIBRATE "
   \            4154452000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " COMMANDS ">`:
   \   000000   20434F4D4D41 DC8 " COMMANDS "
   \            4E44532000  
    258          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Menu
        0 ?CopyMemoryWords
      4   MenuProcess
        0   -> displayCommandsMenu
        4   -> interractWithMenu
        4   -> strcpy
        4   -> transitionMenu
        4   -> updateMenuPos
      4   displayArrival
        4   -> strcpy
      4   displayCommand
        4   -> HEXtoBCD
      4   displayCommandsMenu
        4   -> displayArrival
        4   -> displayCommand
        4   -> displayIp
        4   -> displayStatus
      4   displayIp
        0   -> displayIP
        4   -> displayIP
        4   -> strcpy
      4   displayStatus
        4   -> HEXtoBCD
        4   -> strcpy
      4   displayStopwatch
      4   interractWithMenu
      6   transitionMenu
        6   -> strcpy
      6   updateMenuPos


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant " COMMANDS ">
      11  ?<Constant " FOR INPUT">
      11  ?<Constant " That was ">
      11  ?<Constant " WAITING  ">
       1  ?<Constant "">
      11  ?<Constant "ARRIVED 0 ">
      11  ?<Constant "Auto.     ">
      11  ?<Constant "CALIBRATE ">
      11  ?<Constant "Time      ">
      11  ?<Constant "easy!! ;-)">
      64  ?<Initializer for calib>
      64  ?<Initializer for commandsOutput>
       2  ?<Initializer for currMenu>
       1  ?<Initializer for menuState>
      64  ?<Initializer for start>
       6  ?Subroutine0
       8  ?Subroutine1
       8  ?Subroutine2
       8  ?Subroutine3
      16  Init_Menu
      78  MenuProcess
      64  calib
       2  commandDisplayCounter
      64  commandsOutput
       2  currMenu
      30  displayArrival
      36  displayCommand
      68  displayCommandsMenu
      52  displayIp
     120  displayStatus
       2  displayStopwatch
      14  interractWithMenu
       2  lastThumb
      64  mainMenu
       1  menuState
      64  start
     112  transitionMenu
      44  updateMenuPos
      64  -- Other

 
 602 bytes in segment CODE
 175 bytes in segment DATA16_C
 195 bytes in segment DATA16_I
 195 bytes in segment DATA16_ID
  68 bytes in segment DATA16_Z
 
 602 bytes of CODE  memory
 370 bytes of CONST memory
 263 bytes of DATA  memory

Errors: none
Warnings: 2
