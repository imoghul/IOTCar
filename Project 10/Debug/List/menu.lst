###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          10/Apr/2022  19:21:46
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 10\menu.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWCE5.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 10\menu.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 10\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 10\Debug\List\menu.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 10\Debug\Obj\menu.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 10\menu.c
      1          #include "menu.h"
      2          #include "msp430.h"
      3          #include "adc.h"
      4          #include "functions.h"
      5          #include "sm.h"
      6          #include <string.h>
      7          #include <stdlib.h>
      8          extern volatile unsigned int ADC_Thumb;
      9          extern volatile unsigned char display_changed;
     10          extern volatile unsigned int calibrationMode;
     11          extern char display_line[4][11];
     12          extern volatile char state;

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     13          char menuState = START_MENU;
   \                     menuState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for menuState>`
     14          extern unsigned int LBDetect, LWDetect, RBDetect, RWDetect;
     15          extern volatile char transMenu,interractMenu;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          unsigned int lastThumb;
   \                     lastThumb:
   \   000000                DS8 2
     17          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          menu calib,start,mainMenu;
   \                     calib:
   \   000000                DS8 64

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     start:
   \   000000                DS8 64

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     mainMenu:
   \   000000                DS8 64
     19          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     20          menu* currMenu = &start;
   \                     currMenu:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for currMenu>`
     21          
     22          
     23          
     24          /*void displayStartMenu() {}
     25          
     26          void displayMainMenu() {
     27              strcpy(display_line[0], mainMenu.headers[mainMenu.current]);
     28          }
     29          
     30          void displayCalibMenu() {
     31              display_changed = 1;
     32          }*/
     33          
     34          

   \                                 In  segment CODE, align 2
     35          void updateMenuPos(menu* m) {
   \                     updateMenuPos:
     36              unsigned int val = (ADC_Thumb * m->length) >> THUMB_RES;
   \   000000   6E4C         MOV.B   @R12, R14
   \   000002   0212         PUSH.W  SR
   \   000004   32C2         DINT
   \   000006   0343         NOP
   \   000008   9242........ MOV.W   &ADC_Thumb, &__iar_HWMUL       // MPY
   \   00000E   824E....     MOV.W   R14, &__iar_HWMUL + 8          // OP2
   \   000012   1F42....     MOV.W   &__iar_HWMUL + 10, R15         // RESLO
   \   000016   0343         NOP
   \   000018   3241         POP.W   SR
   \   00001A   5F0F         RRUM.W  #0x4, R15
   \   00001C   5F03         RRUM.W  #0x1, R15
     37              m->current  = val < m->length ? val : m->length - 1;
   \   00001E   0F9E         CMP.W   R14, R15
   \   000020   0228         JNC     ??updateMenuPos_1
   \   000022   6F4C         MOV.B   @R12, R15
   \   000024   7F53         ADD.B   #0xff, R15
   \                     ??updateMenuPos_1:
   \   000026   CC4F0100     MOV.B   R15, 0x1(R12)
     38          }
   \   00002A   1001         RETA
     39          

   \                                 In  segment CODE, align 2
     40          void interractWithMenu(void){
   \                     interractWithMenu:
     41            switch(menuState){
   \   000000   F2904300.... CMP.B   #0x43, &menuState
   \   000006   0220         JNE     ??interractWithMenu_0
     42              case CALIB_MENU:
     43                calibrationMode++;
   \   000008   9253....     ADD.W   #0x1, &calibrationMode
     44                break;
     45            }
     46          }
   \                     ??interractWithMenu_0:
   \   00000C   1001         RETA
     47          

   \                                 In  segment CODE, align 2
     48          void transitionMenu(menu* m) {
   \                     transitionMenu:
   \   000000   0A12         PUSH.W  R10
     49              // transitioning out code
     50              if(menuState == CALIB_MENU){
   \   000002   F2904300.... CMP.B   #0x43, &menuState
   \   000008   0320         JNE     ??transitionMenu_0
     51                state = START;
   \   00000A   F2405300.... MOV.B   #0x53, &state
     52              }
     53            
     54              currMenu = m->transitions[m->current];
   \                     ??transitionMenu_0:
   \   000010   5F4C0100     MOV.B   0x1(R12), R15
   \   000014   0C5F         ADD.W   R15, R12
   \   000016   0C5F         ADD.W   R15, R12
   \   000018   1F4C2C00     MOV.W   0x2c(R12), R15
   \   00001C   824F....     MOV.W   R15, &currMenu
     55              menuState = currMenu->name;
   \   000020   5E4F0200     MOV.B   0x2(R15), R14
   \   000024   C24E....     MOV.B   R14, &menuState
     56              
     57              // transitioning in code
     58              if(menuState == CALIB_MENU){
   \   000028   7E904300     CMP.B   #0x43, R14
   \   00002C   0D20         JNE     ??transitionMenu_1
     59                calibrationMode = 0;
   \   00002E   8243....     MOV.W   #0x0, &calibrationMode
     60                LBDetect = RBDetect = LWDetect = RWDetect = 0;
   \   000032   8243....     MOV.W   #0x0, &RWDetect
   \   000036   8243....     MOV.W   #0x0, &LWDetect
   \   00003A   8243....     MOV.W   #0x0, &RBDetect
   \   00003E   8243....     MOV.W   #0x0, &LBDetect
     61                state = CALIBRATE;
   \   000042   F2404300.... MOV.B   #0x43, &state
     62              }
     63          
     64              strcpy(display_line[0], "          ");
   \                     ??transitionMenu_1:
   \   000048   3A40....     MOV.W   #`?<Constant "          ">`, R10
   \   00004C   0D4A         MOV.W   R10, R13
   \   00004E   3C40....     MOV.W   #display_line, R12
   \   000052   ........     CALLA   #strcpy
     65              strcpy(display_line[1], "          ");
   \   000056   0D4A         MOV.W   R10, R13
   \   000058   3C40....     MOV.W   #display_line + 11, R12
   \   00005C   ........     CALLA   #strcpy
     66              strcpy(display_line[2], "          ");
   \   000060   0D4A         MOV.W   R10, R13
   \   000062   3C40....     MOV.W   #display_line + 22, R12
   \   000066   ........     CALLA   #strcpy
     67              strcpy(display_line[3], "          ");
   \   00006A   0D4A         MOV.W   R10, R13
   \   00006C   3C40....     MOV.W   #display_line + 33, R12
   \   000070   ........     CALLA   #strcpy
     68              display_changed = 1;
   \   000074   D243....     MOV.B   #0x1, &display_changed
     69          }
   \   000078   3A41         POP.W   R10
   \   00007A   1001         RETA
     70          

   \                                 In  segment CODE, align 2
     71          void MenuProcess(void) {
   \                     MenuProcess:
     72            if(transMenu){
   \   000000   C293....     CMP.B   #0x0, &transMenu
   \   000004   0624         JEQ     ??MenuProcess_2
     73              transMenu = 0;
   \   000006   C243....     MOV.B   #0x0, &transMenu
     74              transitionMenu(currMenu);
   \   00000A   1C42....     MOV.W   &currMenu, R12
   \   00000E   ........     CALLA   #transitionMenu
     75            }
     76            if(interractMenu) {
   \                     ??MenuProcess_2:
   \   000012   C293....     CMP.B   #0x0, &interractMenu
   \   000016   0424         JEQ     ??MenuProcess_3
     77              interractMenu = 0;
   \   000018   C243....     MOV.B   #0x0, &interractMenu
     78              interractWithMenu();
   \   00001C   ........     CALLA   #interractWithMenu
     79            }
     80            switch(menuState) {
   \                     ??MenuProcess_3:
   \   000020   5E42....     MOV.B   &menuState, R14
   \   000024   7E804300     SUB.B   #0x43, R14
   \   000028   0C24         JEQ     ??MenuProcess_4
   \   00002A   7E800A00     SUB.B   #0xa, R14
   \   00002E   0B20         JNE     ??MenuProcess_1
     81                case START_MENU:
     82                    //updateMenuPos(&start);
     83                    //displayStartMenu();
     84                    break;
     85                case MAIN_MENU:
     86                    strcpy(display_line[0], mainMenu.headers[mainMenu.current]);//displayMainMenu();
   \   000030   5F42....     MOV.B   &mainMenu + 1, R15
   \   000034   0F5F         RLA.W   R15
   \   000036   1D4F....     MOV.W   mainMenu + 4(R15), R13
   \   00003A   3C40....     MOV.W   #display_line, R12
   \   00003E   ........     BRA     #strcpy
     87                    break;
     88                case CALIB_MENU:
     89                    display_changed = 1;//displayCalibMenu();
   \                     ??MenuProcess_4:
   \   000042   D243....     MOV.B   #0x1, &display_changed
     90                default:
     91                    break;
     92            }
     93          }
   \                     ??MenuProcess_1:
   \   000046   1001         RETA
     94          

   \                                 In  segment CODE, align 2
     95          void Init_Menu(void){
   \                     Init_Menu:
     96            calib = (menu){
     97                .length = 1,
     98                .current = 0,
     99                .name = CALIB_MENU,
    100                .headers = {""},
    101                .values = {""},
    102                .transitions = {&mainMenu}
    103            };
   \   000000   3C40....     MOV.W   #calib, R12
   \   000004   3E40....     MOV.W   #?_0, R14
   \   000008   3D402000     MOV.W   #0x20, R13
   \   00000C   ........     CALLA   #?CopyMemoryWords
    104            
    105            mainMenu  = (menu){
    106                .length = 1,
    107                .current = 0,
    108                .name = MAIN_MENU,
    109                .headers = {"CALIBRATE"},
    110                .values = {""},
    111                .transitions = {&calib}
    112            };
   \   000010   3C40....     MOV.W   #mainMenu, R12
   \   000014   3E40....     MOV.W   #?_1, R14
   \   000018   3D402000     MOV.W   #0x20, R13
   \   00001C   ........     CALLA   #?CopyMemoryWords
    113            
    114            start  = (menu){
    115                .length = 1,
    116                .current = 0,
    117                .name = START_MENU,
    118                .headers = {""},
    119                .values = {""},
    120                .transitions = {&mainMenu}
    121            };
   \   000020   3C40....     MOV.W   #start, R12
   \   000024   3E40....     MOV.W   #?_2, R14
   \   000028   3D402000     MOV.W   #0x20, R13
   \   00002C   ........     BRA     #?CopyMemoryWords
    122          }

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for menuState>`:
   \   000000   54           DC8 84

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for currMenu>`:
   \   000000   ....         DC16 start

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CALIBRATE">`:
   \   000000   43414C494252 DC8 "CALIBRATE"
   \            41544500    
    123          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Menu
        0 ?CopyMemoryWords
        4 ?CopyMemoryWords
      4   MenuProcess
        4   -> interractWithMenu
        0   -> strcpy
        4   -> transitionMenu
      4   interractWithMenu
      6   transitionMenu
        6   -> strcpy
      6   updateMenuPos


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       1  ?<Constant "">
      10  ?<Constant "CALIBRATE">
       2  ?<Initializer for currMenu>
       1  ?<Initializer for menuState>
      48  Init_Menu
      72  MenuProcess
      64  calib
       2  currMenu
      14  interractWithMenu
       2  lastThumb
      64  mainMenu
       1  menuState
      64  start
     124  transitionMenu
      44  updateMenuPos
     192  -- Other

 
 302 bytes in segment CODE
 214 bytes in segment DATA16_C
   3 bytes in segment DATA16_I
   3 bytes in segment DATA16_ID
 194 bytes in segment DATA16_Z
 
 302 bytes of CODE  memory
 217 bytes of CONST memory
 197 bytes of DATA  memory

Errors: none
Warnings: none
