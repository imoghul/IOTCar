###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          25/Apr/2022  16:05:53
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\test\Project 10\menu.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWEF4.tmp
#        ("C:\Users\saad\Documents\test\Project 10\menu.c" -lC
#        "C:\Users\saad\Documents\test\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\test\Project 10\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\test\Project 10\Debug\List\menu.lst
#    Object file   =  
#        C:\Users\saad\Documents\test\Project 10\Debug\Obj\menu.r43
#
###############################################################################

C:\Users\saad\Documents\test\Project 10\menu.c
      1          #include "menu.h"
      2          #include "msp430.h"
      3          #include "adc.h"
      4          #include "macros.h"
      5          #include "functions.h"
      6          #include "iot.h"
      7          #include "sm.h"
      8          #include <string.h>
      9          #include <stdlib.h>
     10          extern volatile unsigned int ADC_Thumb;
     11          extern volatile unsigned char display_changed;
     12          extern volatile unsigned int calibrationMode;
     13          extern char display_line[4][11];
     14          extern volatile char state;

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     15          char menuState = START_MENU;
   \                     menuState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for menuState>`
     16          extern unsigned int LBDetect, LWDetect, RBDetect, RWDetect;
     17          extern volatile char transMenu, interractMenu;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          unsigned int lastThumb;
   \                     lastThumb:
   \   000000                DS8 2
     19          extern command currCommand;
     20          extern char commandsReceieved;
     21          extern volatile unsigned int stopwatchUpdated;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          int commandDisplayCounter;
   \                     commandDisplayCounter:
   \   000000                DS8 2
     23          extern char currentStation;
     24          extern volatile int timeElapsedSeconds, timeElapsedMilliseconds;
     25          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          menu mainMenu;
   \                     mainMenu:
   \   000000                DS8 64
     27          
     28          // menu calib = {
     29          //     .length = 1,
     30          //     .current = 0,
     31          //     .name = CALIB_MENU,
     32          //     .headers = {""},
     33          //     .values = {""},
     34          //     .transitions = {&mainMenu}
     35          // };

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     36          menu start = {
   \                     start:
   \   000000                DS8 64
   \   000040                REQUIRE `?<Initializer for start>`
     37              .length = 1,
     38              .current = 0,
     39              .name = START_MENU,
     40              .headers = {""},
     41              .values = {""},
     42              .transitions = {&mainMenu}
     43          };

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     44          menu commandsOutput = {
   \                     commandsOutput:
   \   000000                DS8 64
   \   000040                REQUIRE `?<Initializer for commandsOutput>`
     45              .length = 1,
     46              .current = 0,
     47              .name = COMMANDS_MENU,
     48              .headers = {""},
     49              .values = {""},
     50              .transitions = {&commandsOutput}
     51          };
     52          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     53          menu* currMenu = &start;
   \                     currMenu:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for currMenu>`
     54          
     55          
     56          
     57          
     58          //===========================================================================
     59          // Function name: displayCommand
     60          //
     61          // Description: This function displays the current command being implemented
     62          //
     63          // Passed : no variables passed
     64          // Locals: no variables declared
     65          // Returned: no values returned
     66          // Globals: display_line,currCommand
     67          //
     68          // Author: Ibrahim Moghul
     69          // Date: Apr 2022
     70          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     71          //===========================================================================
     72          

   \                                 In  segment CODE, align 2
     73          void displayCommand() {
   \                     displayCommand:
     74              if(currCommand.comm != LINEFOLLOW_COMMAND && currCommand.comm != EXIT_COMMAND) {
   \   000000   F2906F00.... CMP.B   #0x6f, &currCommand
   \   000006   0E24         JEQ     ??displayCommand_0
   \   000008   F2906500.... CMP.B   #0x65, &currCommand
   \   00000E   0A24         JEQ     ??displayCommand_0
     75                  LINE4[0] = currCommand.comm;
   \   000010   D242........ MOV.B   &currCommand, &display_line + 33
     76                  HEXtoBCD(currCommand.duration, COMMAND_LINE, COMMAND_DURATION_BEGIN);
                         ^
Warning[Pe223]: function "HEXtoBCD" declared implicitly
   \   000016   1E43         MOV.W   #0x1, R14
   \   000018   3D400300     MOV.W   #0x3, R13
   \   00001C   1C42....     MOV.W   &currCommand + 2, R12
   \   000020   ........     CALLA   #HEXtoBCD
     77              }
     78          }
   \                     ??displayCommand_0:
   \   000024   1001         RETA
     79          
     80          //===========================================================================
     81          // Function name: displayStatus
     82          //
     83          // Description: This function displays the status of completion
     84          //
     85          // Passed : no variables passed
     86          // Locals: no variables declared
     87          // Returned: no values returned
     88          // Globals: display_line,timeElapsedSeconds,currCommand,commandsReceieved
     89          //
     90          // Author: Ibrahim Moghul
     91          // Date: Apr 2022
     92          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     93          //===========================================================================
     94          

   \                                 In  segment CODE, align 2
     95          void displayStatus() {
   \                     displayStatus:
     96              if(currCommand.comm == LINEFOLLOW_COMMAND) {
   \   000000   F2906F00.... CMP.B   #0x6f, &currCommand
   \   000006   0720         JNE     ??displayStatus_1
     97                  strcpy(LINE4, "Auto.     ");
   \   000008   3D40....     MOV.W   #`?<Constant "Auto.     ">`, R13
   \   00000C   3C40....     MOV.W   #display_line + 33, R12
   \   000010   ........     CALLA   #strcpy
   \   000014   263C         JMP     ??displayStatus_0
     98              } else if(state == DONE) {
   \                     ??displayStatus_1:
   \   000016   F2906400.... CMP.B   #0x64, &state
   \   00001C   1320         JNE     ??displayStatus_2
     99                  strcpy(LINE4, "Time:     ");
   \   00001E   3D40....     MOV.W   #`?<Constant "Time:     ">`, R13
   \   000022   3C40....     MOV.W   #display_line + 33, R12
   \   000026   ........     CALLA   #strcpy
    100                  strcpy(LINE2, " That was ");
   \   00002A   3D40....     MOV.W   #`?<Constant " That was ">`, R13
   \   00002E   3C40....     MOV.W   #display_line + 11, R12
   \   000032   ........     CALLA   #strcpy
    101                  strcpy(LINE3, "easy!! ;-)");
   \   000036   3D40....     MOV.W   #`?<Constant "easy!! ;-)">`, R13
   \   00003A   3C40....     MOV.W   #display_line + 22, R12
   \   00003E   ........     CALLA   #strcpy
   \   000042   0F3C         JMP     ??displayStatus_0
    102          
    103              } else if(commandsReceieved && !currCommand.comm && !currCommand.duration) strcpy(LINE4, BLANK_LINE);
   \                     ??displayStatus_2:
   \   000044   C293....     CMP.B   #0x0, &commandsReceieved
   \   000048   0C24         JEQ     ??displayStatus_0
   \   00004A   C293....     CMP.B   #0x0, &currCommand
   \   00004E   0920         JNE     ??displayStatus_0
   \   000050   8293....     CMP.W   #0x0, &currCommand + 2
   \   000054   0620         JNE     ??displayStatus_0
   \   000056   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00005A   3C40....     MOV.W   #display_line + 33, R12
   \   00005E   ........     CALLA   #strcpy
    104          
    105              if(commandsReceieved) { //(stopwatchUpdated) {
   \                     ??displayStatus_0:
   \   000062   C293....     CMP.B   #0x0, &commandsReceieved
   \   000066   0E24         JEQ     ??displayStatus_3
    106                  //stopwatchUpdated = 0;
    107                  HEXtoBCD(timeElapsedSeconds, COMMAND_LINE, STOPWATCH_BEGIN);
                         ^
Warning[Pe223]: function "HEXtoBCD" declared implicitly
   \   000068   3E400500     MOV.W   #0x5, R14
   \   00006C   3D400300     MOV.W   #0x3, R13
   \   000070   1C42....     MOV.W   &timeElapsedSeconds, R12
   \   000074   ........     CALLA   #HEXtoBCD
    108                  LINE4[STOPWATCH_BEGIN] = ' ';
   \   000078   F2402000.... MOV.B   #0x20, &display_line + 38
    109                  LINE4[LINE_LEN - 1] = 's';
   \   00007E   F2407300.... MOV.B   #0x73, &display_line + 42
    110                  //display_line[3][9] = timeElapsedMilliseconds + '0';
    111              }
    112          }
   \                     ??displayStatus_3:
   \   000084   1001         RETA
    113          
    114          //===========================================================================
    115          // Function name: displayArrival
    116          //
    117          // Description: This function displays the arrival status
    118          //
    119          // Passed : no variables passed
    120          // Locals: no variables declared
    121          // Returned: no values returned
    122          // Globals: display_line, commandDisplayCounter, currentStation
    123          //
    124          // Author: Ibrahim Moghul
    125          // Date: Apr 2022
    126          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    127          //===========================================================================
    128          

   \                                 In  segment CODE, align 2
    129          void displayArrival() {
   \                     displayArrival:
    130          
    131              //if(currCommand.comm == DISPLAY_NUMBER_COMMAND) {
    132              strcpy(LINE1, "ARRIVED 0 ");
   \   000000   3D40....     MOV.W   #`?<Constant "ARRIVED 0 ">`, R13
   \   000004   3C40....     MOV.W   #display_line, R12
   \   000008   ........     CALLA   #strcpy
    133              LINE1[LINE_LEN - 1] = currentStation + '0';
   \   00000C   5E42....     MOV.B   &currentStation, R14
   \   000010   7E503000     ADD.B   #0x30, R14
   \   000014   C24E....     MOV.B   R14, &display_line + 9
    134              commandDisplayCounter = BEGINNING;
   \   000018   8243....     MOV.W   #0x0, &commandDisplayCounter
    135              //}
    136          
    137          }
   \   00001C   1001         RETA
    138          
    139          //===========================================================================
    140          // Function name: displayIP
    141          //
    142          // Description: This function displays the Ip address during the duration of
    143          // operation
    144          //
    145          // Passed : no variables passed
    146          // Locals: no variables declared
    147          // Returned: no values returned
    148          // Globals: display_line, commandsReceieved, state
    149          //
    150          // Author: Ibrahim Moghul
    151          // Date: Apr 2022
    152          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    153          //===========================================================================
    154          

   \                                 In  segment CODE, align 2
    155          void displayIp() {
   \                     displayIp:
    156          
    157              if(commandsReceieved) {
   \   000000   C293....     CMP.B   #0x0, &commandsReceieved
   \   000004   0824         JEQ     ??displayIp_0
    158                  if(state != DONE)displayIP(DIPLAY_IP_LINE-1);
   \   000006   F2906400.... CMP.B   #0x64, &state
   \   00000C   1724         JEQ     ??displayIp_1
   \   00000E   1C43         MOV.W   #0x1, R12
   \   000010   ........     CALLA   #displayIP
   \   000014   1001         RETA
    159              } else {
    160                  strcpy(LINE1, " WAITING  ");
   \                     ??displayIp_0:
   \   000016   3D40....     MOV.W   #`?<Constant " WAITING  ">`, R13
   \   00001A   3C40....     MOV.W   #display_line, R12
   \   00001E   ........     CALLA   #strcpy
    161                  strcpy(LINE2, " FOR INPUT");
   \   000022   3D40....     MOV.W   #`?<Constant " FOR INPUT">`, R13
   \   000026   3C40....     MOV.W   #display_line + 11, R12
   \   00002A   ........     CALLA   #strcpy
    162          
    163                  if(state != DONE)displayIP(DIPLAY_IP_LINE);
   \   00002E   F2906400.... CMP.B   #0x64, &state
   \   000034   0324         JEQ     ??displayIp_1
   \   000036   2C43         MOV.W   #0x2, R12
   \   000038   ........     CALLA   #displayIP
    164              }
    165          
    166          }
   \                     ??displayIp_1:
   \   00003C   1001         RETA
    167          
    168          // void displayStopwatch() {
    169          
    170          // }
    171          
    172          //===========================================================================
    173          // Function name: displayCommandsMenu
    174          //
    175          // Description: This function displays all the required elements on the LCD
    176          // for the demo, it does so every couple clock cycles as doing so every cycle
    177          // was causing major lag
    178          //
    179          // Passed : no variables passed
    180          // Locals: no variables declared
    181          // Returned: no values returned
    182          // Globals: commandDisplayCounter, display_changed
    183          //
    184          // Author: Ibrahim Moghul
    185          // Date: Apr 2022
    186          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    187          //===========================================================================
    188          

   \                                 In  segment CODE, align 2
    189          void displayCommandsMenu() {
   \                     displayCommandsMenu:
    190              switch(commandDisplayCounter++) {
   \   000000   1F42....     MOV.W   &commandDisplayCounter, R15
   \   000004   0E4F         MOV.W   R15, R14
   \   000006   1E53         ADD.W   #0x1, R14
   \   000008   824E....     MOV.W   R14, &commandDisplayCounter
   \   00000C   0F83         SUB.W   #0x0, R15
   \   00000E   0D24         JEQ     ??displayCommandsMenu_1
   \   000010   3F806400     SUB.W   #0x64, R15
   \   000014   0D24         JEQ     ??displayCommandsMenu_2
   \   000016   3F806400     SUB.W   #0x64, R15
   \   00001A   0D24         JEQ     ??displayCommandsMenu_3
   \   00001C   3F80C800     SUB.W   #0xc8, R15
   \   000020   0D24         JEQ     ??displayCommandsMenu_4
   \   000022   3F806400     SUB.W   #0x64, R15
   \   000026   0D24         JEQ     ??displayCommandsMenu_5
   \   000028   0E3C         JMP     ??displayCommandsMenu_0
    191                  case 0:
    192                      displayCommand();
   \                     ??displayCommandsMenu_1:
   \   00002A   ........     CALLA   #displayCommand
    193                      break;
   \   00002E   0B3C         JMP     ??displayCommandsMenu_0
    194          
    195                  case 100:
    196                      displayStatus();
   \                     ??displayCommandsMenu_2:
   \   000030   ........     CALLA   #displayStatus
    197                      break;
   \   000034   083C         JMP     ??displayCommandsMenu_0
    198          
    199                  case 200:
    200                      displayIp();
   \                     ??displayCommandsMenu_3:
   \   000036   ........     CALLA   #displayIp
    201                      break;
   \   00003A   053C         JMP     ??displayCommandsMenu_0
    202          
    203                  //case 300:
    204                      //displayStopwatch();
    205                  //    break;
    206          
    207                  case 400:
    208                      commandDisplayCounter = BEGINNING;
   \                     ??displayCommandsMenu_4:
   \   00003C   8243....     MOV.W   #0x0, &commandDisplayCounter
    209                      break;
   \   000040   023C         JMP     ??displayCommandsMenu_0
    210          
    211                  case DISPLAY_ARRIVAL_STATE:
    212                      displayArrival();
   \                     ??displayCommandsMenu_5:
   \   000042   ........     CALLA   #displayArrival
    213          
    214                  default:
    215                      break;
    216              }
    217          
    218              display_changed = true;
   \                     ??displayCommandsMenu_0:
   \   000046   D243....     MOV.B   #0x1, &display_changed
    219          }
   \   00004A   1001         RETA
    220          
    221          //===========================================================================
    222          // Function name: updateMenuPos
    223          //
    224          // Description: This function converts the ADC_Thumb value into an index of
    225          // what the current menu item should be
    226          //
    227          // Passed : m
    228          // Locals: val
    229          // Returned: no values returned
    230          // Globals: ADC_Thumb
    231          //
    232          // Author: Ibrahim Moghul
    233          // Date: Apr 2022
    234          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    235          //===========================================================================
    236          
    237          

   \                                 In  segment CODE, align 2
    238          void updateMenuPos(menu* m) {
   \                     updateMenuPos:
    239              unsigned int val = (ADC_Thumb * m->length) >> THUMB_RES;
   \   000000   0212         PUSH.W  SR
   \   000002   32C2         DINT
   \   000004   0343         NOP
   \   000006   E24C....     MOV.B   @R12, &__iar_HWMUL             // MPY
   \   00000A   9242........ MOV.W   &ADC_Thumb, &__iar_HWMUL + 8   // OP2
   \   000010   1F42....     MOV.W   &__iar_HWMUL + 10, R15         // RESLO
   \   000014   0343         NOP
   \   000016   3241         POP.W   SR
   \   000018   5F0F         RRUM.W  #0x4, R15
   \   00001A   5F03         RRUM.W  #0x1, R15
    240              m->current  = val < m->length ? val : m->length - 1;
   \   00001C   6E4C         MOV.B   @R12, R14
   \   00001E   4E4E         MOV.B   R14, R14
   \   000020   0F9E         CMP.W   R14, R15
   \   000022   052C         JC      ??updateMenuPos_1
   \   000024   0E12         PUSH.W  R14
   \   000026   C14F0000     MOV.B   R15, 0(SP)
   \   00002A   3E41         POP.W   R14
   \   00002C   023C         JMP     ??updateMenuPos_0
   \                     ??updateMenuPos_1:
   \   00002E   6E4C         MOV.B   @R12, R14
   \   000030   7E53         ADD.B   #0xff, R14
   \                     ??updateMenuPos_0:
   \   000032   CC4E0100     MOV.B   R14, 0x1(R12)
    241          }
   \   000036   1001         RETA
    242          
    243          //===========================================================================
    244          // Function name: interractWithMenu
    245          //
    246          // Description: This function is run when button 2 is pressed and completes
    247          // all the interraction that happens within a menu
    248          //
    249          // Passed : no variables passed
    250          // Locals: no variables declared
    251          // Returned: no values returned
    252          // Globals: menuState, calibrationMode
    253          //
    254          // Author: Ibrahim Moghul
    255          // Date: Apr 2022
    256          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    257          //===========================================================================
    258          

   \                                 In  segment CODE, align 2
    259          void interractWithMenu(void) {
   \                     interractWithMenu:
    260              switch(menuState) {
   \   000000   F2904300.... CMP.B   #0x43, &menuState
   \   000006   0220         JNE     ??interractWithMenu_0
    261                  case CALIB_MENU:
    262                      calibrationMode++;
   \   000008   9253....     ADD.W   #0x1, &calibrationMode
    263                      break;
    264              }
    265          }
   \                     ??interractWithMenu_0:
   \   00000C   1001         RETA
    266          
    267          //===========================================================================
    268          // Function name: transitionMenu
    269          //
    270          // Description: This function displays transitions the menu based on its 
    271          // current position the the positions corresponding menu, it also does 
    272          // anything a specific menu needs done in a transition into or out of it
    273          //
    274          // Passed : m
    275          // Locals: no variables declared
    276          // Returned: no values returned
    277          // Globals: display_changed, display_line, state,menuState,currMenu
    278          // LBDetect, RBDetect,LWDetect,RWDetect, calibrationMode
    279          //
    280          // Author: Ibrahim Moghul
    281          // Date: Apr 2022
    282          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    283          //===========================================================================
    284          

   \                                 In  segment CODE, align 2
    285          void transitionMenu(menu* m) {
   \                     transitionMenu:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
    286              // transitioning out code
    287              if(menuState == CALIB_MENU) {
   \   000004   F2904300.... CMP.B   #0x43, &menuState
   \   00000A   0320         JNE     ??transitionMenu_0
    288                  state = START;
   \   00000C   F2405300.... MOV.B   #0x53, &state
    289              }
    290          
    291              currMenu = m->transitions[m->current];
   \                     ??transitionMenu_0:
   \   000012   5F4A0100     MOV.B   0x1(R10), R15
   \   000016   4F4F         MOV.B   R15, R15
   \   000018   0F5F         RLA.W   R15
   \   00001A   0E4A         MOV.W   R10, R14
   \   00001C   0E5F         ADD.W   R15, R14
   \   00001E   924E2C00.... MOV.W   0x2c(R14), &currMenu
    292              menuState = currMenu->name;
   \   000024   1F42....     MOV.W   &currMenu, R15
   \   000028   D24F0200.... MOV.B   0x2(R15), &menuState
    293          
    294              // transitioning in code
    295              if(menuState == CALIB_MENU) {
   \   00002E   F2904300.... CMP.B   #0x43, &menuState
   \   000034   0E20         JNE     ??transitionMenu_1
    296                  calibrationMode = BEGINNING;
   \   000036   8243....     MOV.W   #0x0, &calibrationMode
    297                  LBDetect = RBDetect = LWDetect = RWDetect = OFF;
   \   00003A   0F43         MOV.W   #0x0, R15
   \   00003C   824F....     MOV.W   R15, &RWDetect
   \   000040   824F....     MOV.W   R15, &LWDetect
   \   000044   824F....     MOV.W   R15, &RBDetect
   \   000048   824F....     MOV.W   R15, &LBDetect
    298                  state = CALIBRATE;
   \   00004C   F2404300.... MOV.B   #0x43, &state
    299              }
    300          
    301              strcpy(LINE1, BLANK_LINE);
   \                     ??transitionMenu_1:
   \   000052   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000056   3C40....     MOV.W   #display_line, R12
   \   00005A   ........     CALLA   #strcpy
    302              strcpy(LINE2, BLANK_LINE);
   \   00005E   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000062   3C40....     MOV.W   #display_line + 11, R12
   \   000066   ........     CALLA   #strcpy
    303              strcpy(LINE3, BLANK_LINE);
   \   00006A   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00006E   3C40....     MOV.W   #display_line + 22, R12
   \   000072   ........     CALLA   #strcpy
    304              strcpy(LINE4, BLANK_LINE);
   \   000076   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00007A   3C40....     MOV.W   #display_line + 33, R12
   \   00007E   ........     CALLA   #strcpy
    305              display_changed = true;
   \   000082   D243....     MOV.B   #0x1, &display_changed
    306          }
   \   000086   3A41         POP.W   R10
   \   000088   1001         RETA
    307          
    308          //===========================================================================
    309          // Function name: MenuProcess
    310          //
    311          // Description: This function displays the current menu and processes
    312          // transitions and interractions
    313          //
    314          // Passed : no variables passed
    315          // Locals: no variables declared
    316          // Returned: no values returned
    317          // Globals: display_changed, display_line, transMenu,currMenu,menuState,
    318          // mainMenu
    319          //
    320          // Author: Ibrahim Moghul
    321          // Date: Apr 2022
    322          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    323          //===========================================================================
    324          

   \                                 In  segment CODE, align 2
    325          void MenuProcess(void) {
   \                     MenuProcess:
    326              /*if(transMenu) {
    327                  transMenu = false;
    328                  currMenu = &commandsOutput;
    329                  menuState = COMMANDS_MENU;
    330                  //transitionMenu(currMenu);
    331              }
    332          
    333              //if(interractMenu) {
    334              //    interractMenu = 0;
    335              //    interractWithMenu();
    336              //}
    337          
    338              switch(menuState) {
    339                  //case START_MENU:
    340                  //    //updateMenuPos(&start);
    341                  //    //displayStartMenu();
    342                  //    break;
    343                  // case MAIN_MENU:
    344                  //     updateMenuPos(&mainMenu);
    345                  //     strcpy(LINE1, mainMenu.headers[mainMenu.current]);
    346                  //     //displayMainMenu();
    347                  //     display_changed = TRUE;
    348                  //     break;
    349          
    350                      case COMMANDS_MENU:
    351                          displayCommandsMenu();
    352                          break;
    353          
    354                      // case NETWORK_MENU:
    355                      //     displayNetworkInfo();
    356                      //     break;
    357          
    358                      //default:
    359                      //    break;
    360              }*/
    361            if(transMenu)displayCommandsMenu();
   \   000000   C293....     CMP.B   #0x0, &transMenu
   \   000004   0224         JEQ     ??MenuProcess_0
   \   000006   ........     CALLA   #displayCommandsMenu
    362          }
   \                     ??MenuProcess_0:
   \   00000A   1001         RETA
    363          
    364          //===========================================================================
    365          // Function name: Init_Menu
    366          //
    367          // Description: This function initializes menu structs
    368          //
    369          // Passed : no variables passed
    370          // Locals: no variables declared
    371          // Returned: no values returned
    372          // Globals: mainMenu, calib, commandsOutput
    373          //
    374          // Author: Ibrahim Moghul
    375          // Date: Apr 2022
    376          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    377          //===========================================================================
    378          

   \                                 In  segment CODE, align 2
    379          void Init_Menu(void) {
   \                     Init_Menu:
    380              // calib = (menu) {
    381              //     .length = 1,
    382              //     .current = 0,
    383              //     .name = CALIB_MENU,
    384              //     .headers = {""},
    385              //     .values = {""},
    386              //     .transitions = {&mainMenu}
    387              // };
    388          
    389              /*mainMenu  = (menu) {
    390                  .length = 2,
    391                  .current = 0,
    392                  .name = MAIN_MENU,
    393                  .headers = {"CALIBRATE ", " COMMANDS "}, //," NETWORK  "},
    394                  .values = {""},
    395                  .transitions = {&calib, &commandsOutput} //,&networkInfo}
    396              };*/
    397          
    398              // start  = (menu) {
    399              //     .length = 1,
    400              //     .current = 0,
    401              //     .name = START_MENU,
    402              //     .headers = {""},
    403              //     .values = {""},
    404              //     .transitions = {&mainMenu}
    405              // };
    406              // commandsOutput = (menu) {
    407              //     .length = 1,
    408              //     .current = 0,
    409              //     .name = COMMANDS_MENU,
    410              //     .headers = {""},
    411              //     .values = {""},
    412              //     .transitions = {&mainMenu}
    413              // };
    414              /*networkInfo = (menu){
    415                  .length = 1,
    416                  .current = 0,
    417                  .name = NETWORK_MENU,
    418                  .headers = {""},
    419                  .values = {""},
    420                  .transitions = {&mainMenu}
    421              };*/
    422          }
   \   000000   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for menuState>`:
   \   000000   54           DC8 84

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for start>`:
   \   000000   01005400     DC8 1, 0, 84, 0
   \   000004   ....         DC16 `?<Constant "">`
   \   000006   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \   000018   ....         DC16 `?<Constant "">`
   \   00001A   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \   00002C   ....         DC16 mainMenu
   \   00002E   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for commandsOutput>`:
   \   000000   01006300     DC8 1, 0, 99, 0
   \   000004   ....         DC16 `?<Constant "">`
   \   000006   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \   000018   ....         DC16 `?<Constant "">`
   \   00001A   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \   00002C   ....         DC16 commandsOutput
   \   00002E   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for currMenu>`:
   \   000000   ....         DC16 start

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Auto.     ">`:
   \   000000   4175746F2E20 DC8 "Auto.     "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Time:     ">`:
   \   000000   54696D653A20 DC8 "Time:     "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " That was ">`:
   \   000000   205468617420 DC8 " That was "
   \            7761732000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "easy!! ;-)">`:
   \   000000   656173792121 DC8 "easy!! ;-)"
   \            203B2D2900  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ARRIVED 0 ">`:
   \   000000   415252495645 DC8 "ARRIVED 0 "
   \            4420302000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " WAITING  ">`:
   \   000000   205741495449 DC8 " WAITING  "
   \            4E47202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " FOR INPUT">`:
   \   000000   20464F522049 DC8 " FOR INPUT"
   \            4E50555400  
    423          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Menu
      4   MenuProcess
        4   -> displayCommandsMenu
      4   displayArrival
        4   -> strcpy
      4   displayCommand
        4   -> HEXtoBCD
      4   displayCommandsMenu
        4   -> displayArrival
        4   -> displayCommand
        4   -> displayIp
        4   -> displayStatus
      4   displayIp
        4   -> displayIP
        4   -> strcpy
      4   displayStatus
        4   -> HEXtoBCD
        4   -> strcpy
      4   interractWithMenu
      6   transitionMenu
        6   -> strcpy
      6   updateMenuPos


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant " FOR INPUT">
      11  ?<Constant " That was ">
      11  ?<Constant " WAITING  ">
       1  ?<Constant "">
      11  ?<Constant "ARRIVED 0 ">
      11  ?<Constant "Auto.     ">
      11  ?<Constant "Time:     ">
      11  ?<Constant "easy!! ;-)">
      64  ?<Initializer for commandsOutput>
       2  ?<Initializer for currMenu>
       1  ?<Initializer for menuState>
      64  ?<Initializer for start>
       2  Init_Menu
      12  MenuProcess
       2  commandDisplayCounter
      64  commandsOutput
       2  currMenu
      30  displayArrival
      38  displayCommand
      76  displayCommandsMenu
      62  displayIp
     134  displayStatus
      14  interractWithMenu
       2  lastThumb
      64  mainMenu
       1  menuState
      64  start
     138  transitionMenu
      56  updateMenuPos

 
 562 bytes in segment CODE
  89 bytes in segment DATA16_C
 131 bytes in segment DATA16_I
 131 bytes in segment DATA16_ID
  68 bytes in segment DATA16_Z
 
 562 bytes of CODE  memory
 220 bytes of CONST memory
 199 bytes of DATA  memory

Errors: none
Warnings: 2
