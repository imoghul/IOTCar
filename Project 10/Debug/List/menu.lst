###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          12/Apr/2022  14:24:50
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 10\menu.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWD5BB.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 10\menu.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 10\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 10\Debug\List\menu.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 10\Debug\Obj\menu.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 10\menu.c
      1          #include "menu.h"
      2          #include "msp430.h"
      3          #include "adc.h"
      4          #include "functions.h"
      5          #include "iot.h"
      6          #include "sm.h"
      7          #include <string.h>
      8          #include <stdlib.h>
      9          extern volatile unsigned int ADC_Thumb;
     10          extern volatile unsigned char display_changed;
     11          extern volatile unsigned int calibrationMode;
     12          extern char display_line[4][11];
     13          extern volatile char state;

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          char menuState = START_MENU;
   \                     menuState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for menuState>`
     15          extern unsigned int LBDetect, LWDetect, RBDetect, RWDetect;
     16          extern volatile char transMenu,interractMenu;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          unsigned int lastThumb;
   \                     lastThumb:
   \   000000                DS8 2
     18          extern command currCommand;
     19          extern char commandsReceieved;
     20          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          menu calib,start,mainMenu,commandsOutput;
   \                     calib:
   \   000000                DS8 64

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     start:
   \   000000                DS8 64

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     mainMenu:
   \   000000                DS8 64

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     commandsOutput:
   \   000000                DS8 64
     22          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     23          menu* currMenu = &start;
   \                     currMenu:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for currMenu>`
     24          
     25          
     26          
     27          /*void displayStartMenu() {}
     28          
     29          void displayMainMenu() {
     30              strcpy(display_line[0], mainMenu.headers[mainMenu.current]);
     31          }
     32          
     33          void displayCalibMenu() {
     34              display_changed = 1;
     35          }*/
     36          

   \                                 In  segment CODE, align 2, keep-with-next
     37          void displayCommandsMenu() {
   \                     displayCommandsMenu:
     38            strcpy(display_line[3],"          ");
   \   000000   ........     CALLA   #?Subroutine1
     39            display_line[3][2] = currCommand.comm;
   \                     ??CrossCallReturnLabel_0:
   \   000004   D242........ MOV.B   &currCommand, &display_line + 35
     40            HEXtoBCD(currCommand.duration, 3, 4);
                   ^
Warning[Pe223]: function "HEXtoBCD" declared implicitly
   \   00000A   2E42         MOV.W   #0x4, R14
   \   00000C   3D400300     MOV.W   #0x3, R13
   \   000010   1C42....     MOV.W   &currCommand + 2, R12
   \   000014   ........     CALLA   #HEXtoBCD
     41            if(currCommand.comm == DISPLAY_NUMBER_COMMAND){
   \   000018   F2906400.... CMP.B   #0x64, &currCommand
   \   00001E   0D20         JNE     ??displayCommandsMenu_1
     42              strcpy(display_line[0],"ARRIVED 0 ");
   \   000020   3D40....     MOV.W   #`?<Constant "ARRIVED 0 ">`, R13
   \   000024   3C40....     MOV.W   #display_line, R12
   \   000028   ........     CALLA   #strcpy
     43              display_line[0][9] = currCommand.duration+'0';
   \   00002C   5E42....     MOV.B   &currCommand + 2, R14
   \   000030   7E503000     ADD.B   #0x30, R14
   \   000034   C24E....     MOV.B   R14, &display_line + 9
   \   000038   083C         JMP     ??displayCommandsMenu_0
     44            }
     45            
     46            if(currCommand.comm == 0 && currCommand.duration == 0) strcpy(display_line[3],"          ");
   \                     ??displayCommandsMenu_1:
   \   00003A   C293....     CMP.B   #0x0, &currCommand
   \   00003E   0520         JNE     ??displayCommandsMenu_0
   \   000040   8293....     CMP.W   #0x0, &currCommand + 2
   \   000044   0220         JNE     ??displayCommandsMenu_0
   \   000046   ........     CALLA   #?Subroutine1
     47            if(!commandsReceieved) strcpy(display_line[3],"WAITING...");
   \                     ??displayCommandsMenu_0:
   \   00004A   C293....     CMP.B   #0x0, &commandsReceieved
   \   00004E   0620         JNE     ??displayCommandsMenu_2
   \   000050   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   000054   3C40....     MOV.W   #display_line + 33, R12
   \   000058   ........     CALLA   #strcpy
     48            display_changed = 1;
   \                     ??displayCommandsMenu_2:
   \   00005C   ....         JMP     ??Subroutine0_0
     49          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   000000   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000004   3C40....     MOV.W   #display_line + 33, R12
   \   000008   ........     BRA     #strcpy

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine0_0:
   \   000000   D243....     MOV.B   #0x1, &display_changed
   \   000004   1001         RETA
     50          
     51          

   \                                 In  segment CODE, align 2, keep-with-next
     52          void updateMenuPos(menu* m) {
   \                     updateMenuPos:
     53              unsigned int val = (ADC_Thumb * m->length) >> THUMB_RES;
   \   000000   6E4C         MOV.B   @R12, R14
   \   000002   0212         PUSH.W  SR
   \   000004   32C2         DINT
   \   000006   0343         NOP
   \   000008   9242........ MOV.W   &ADC_Thumb, &__iar_HWMUL       // MPY
   \   00000E   824E....     MOV.W   R14, &__iar_HWMUL + 8          // OP2
   \   000012   1F42....     MOV.W   &__iar_HWMUL + 10, R15         // RESLO
   \   000016   0343         NOP
   \   000018   3241         POP.W   SR
   \   00001A   5F0F         RRUM.W  #0x4, R15
   \   00001C   5F03         RRUM.W  #0x1, R15
     54              m->current  = val < m->length ? val : m->length - 1;
   \   00001E   0F9E         CMP.W   R14, R15
   \   000020   0228         JNC     ??updateMenuPos_1
   \   000022   6F4C         MOV.B   @R12, R15
   \   000024   7F53         ADD.B   #0xff, R15
   \                     ??updateMenuPos_1:
   \   000026   CC4F0100     MOV.B   R15, 0x1(R12)
     55          }
   \   00002A   1001         RETA
     56          

   \                                 In  segment CODE, align 2, keep-with-next
     57          void interractWithMenu(void){
   \                     interractWithMenu:
     58            switch(menuState){
   \   000000   F2904300.... CMP.B   #0x43, &menuState
   \   000006   0220         JNE     ??interractWithMenu_0
     59              case CALIB_MENU:
     60                calibrationMode++;
   \   000008   9253....     ADD.W   #0x1, &calibrationMode
     61                break;
     62            }
     63          }
   \                     ??interractWithMenu_0:
   \   00000C   1001         RETA
     64          

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   000000   ........     CALLA   #strcpy
   \   000004                REQUIRE ??Subroutine0_0
   \   000004                // Fall through to label ??Subroutine0_0

   \                                 In  segment CODE, align 2, keep-with-next
     65          void transitionMenu(menu* m) {
   \                     transitionMenu:
     66              // transitioning out code
     67              if(menuState == CALIB_MENU){
   \   000000   F2904300.... CMP.B   #0x43, &menuState
   \   000006   0320         JNE     ??transitionMenu_0
     68                state = START;
   \   000008   F2405300.... MOV.B   #0x53, &state
     69              }
     70            
     71              currMenu = m->transitions[m->current];
   \                     ??transitionMenu_0:
   \   00000E   5F4C0100     MOV.B   0x1(R12), R15
   \   000012   0C5F         ADD.W   R15, R12
   \   000014   0C5F         ADD.W   R15, R12
   \   000016   1F4C2C00     MOV.W   0x2c(R12), R15
   \   00001A   824F....     MOV.W   R15, &currMenu
     72              menuState = currMenu->name;
   \   00001E   5E4F0200     MOV.B   0x2(R15), R14
   \   000022   C24E....     MOV.B   R14, &menuState
     73              
     74              // transitioning in code
     75              if(menuState == CALIB_MENU){
   \   000026   7E904300     CMP.B   #0x43, R14
   \   00002A   0D20         JNE     ??transitionMenu_1
     76                calibrationMode = 0;
   \   00002C   8243....     MOV.W   #0x0, &calibrationMode
     77                LBDetect = RBDetect = LWDetect = RWDetect = 0;
   \   000030   8243....     MOV.W   #0x0, &RWDetect
   \   000034   8243....     MOV.W   #0x0, &LWDetect
   \   000038   8243....     MOV.W   #0x0, &RBDetect
   \   00003C   8243....     MOV.W   #0x0, &LBDetect
     78                state = CALIBRATE;
   \   000040   F2404300.... MOV.B   #0x43, &state
     79              }
     80          
     81              strcpy(display_line[0], "          ");
   \                     ??transitionMenu_1:
   \   000046   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00004A   3C40....     MOV.W   #display_line, R12
   \   00004E   ........     CALLA   #strcpy
     82              //strcpy(display_line[1], "          ");
     83              //strcpy(display_line[2], "          ");
     84              strcpy(display_line[3], "          ");
   \   000052   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000056   3C40....     MOV.W   #display_line + 33, R12
   \   00005A   ....         JMP     ?Subroutine0
   \   00005C   0343         NOP
     85              display_changed = 1;
     86          }
     87          

   \                                 In  segment CODE, align 2
     88          void MenuProcess(void) {
   \                     MenuProcess:
     89            if(transMenu){
   \   000000   C293....     CMP.B   #0x0, &transMenu
   \   000004   0624         JEQ     ??MenuProcess_0
     90              transMenu = 0;
   \   000006   C243....     MOV.B   #0x0, &transMenu
     91              transitionMenu(currMenu);
   \   00000A   1C42....     MOV.W   &currMenu, R12
   \   00000E   ........     CALLA   #transitionMenu
     92            }
     93            if(interractMenu) {
   \                     ??MenuProcess_0:
   \   000012   C293....     CMP.B   #0x0, &interractMenu
   \   000016   0424         JEQ     ??MenuProcess_1
     94              interractMenu = 0;
   \   000018   C243....     MOV.B   #0x0, &interractMenu
     95              interractWithMenu();
   \   00001C   ........     CALLA   #interractWithMenu
     96            }
     97            switch(menuState) {
   \                     ??MenuProcess_1:
   \   000020   5E42....     MOV.B   &menuState, R14
   \   000024   7E804300     SUB.B   #0x43, R14
   \   000028   1324         JEQ     ??MenuProcess_2
   \   00002A   7E800A00     SUB.B   #0xa, R14
   \   00002E   0424         JEQ     ??MenuProcess_3
   \   000030   7E801600     SUB.B   #0x16, R14
   \   000034   0E24         JEQ     ??MenuProcess_4
   \   000036   1001         RETA
     98                /*case START_MENU:
     99                    //updateMenuPos(&start);
    100                    //displayStartMenu();
    101                    break;*/
    102                case MAIN_MENU:
    103                    updateMenuPos(&mainMenu);
   \                     ??MenuProcess_3:
   \   000038   3C40....     MOV.W   #mainMenu, R12
   \   00003C   ........     CALLA   #updateMenuPos
    104                    strcpy(display_line[0], mainMenu.headers[mainMenu.current]);//displayMainMenu();
   \   000040   5F42....     MOV.B   &mainMenu + 1, R15
   \   000044   0F5F         RLA.W   R15
   \   000046   1D4F....     MOV.W   mainMenu + 4(R15), R13
   \   00004A   3C40....     MOV.W   #display_line, R12
   \   00004E   ....         JMP     ?Subroutine0
    105                    display_changed = 1;
    106                    break;
    107                case CALIB_MENU:
    108                    display_changed = 1;//displayCalibMenu();
   \                     ??MenuProcess_2:
   \   000050   ....         JMP     ??Subroutine0_0
    109                    break;
    110                case COMMANDS_MENU:
    111                    displayCommandsMenu();
   \                     ??MenuProcess_4:
   \   000052   ........     BRA     #displayCommandsMenu
    112                default:
    113                    break;
    114            }
    115          }
    116          

   \                                 In  segment CODE, align 2
    117          void Init_Menu(void){
   \                     Init_Menu:
    118            calib = (menu){
    119                .length = 1,
    120                .current = 0,
    121                .name = CALIB_MENU,
    122                .headers = {""},
    123                .values = {""},
    124                .transitions = {&mainMenu}
    125            };
   \   000000   3C40....     MOV.W   #calib, R12
   \   000004   3E40....     MOV.W   #?_0, R14
   \   000008   ........     CALLA   #?Subroutine2
    126            
    127            mainMenu  = (menu){
    128                .length = 2,
    129                .current = 0,
    130                .name = MAIN_MENU,
    131                .headers = {"CALIBRATE "," COMMANDS "},
    132                .values = {""},
    133                .transitions = {&calib,&commandsOutput}
    134            };
   \                     ??CrossCallReturnLabel_1:
   \   00000C   3C40....     MOV.W   #mainMenu, R12
   \   000010   3E40....     MOV.W   #?_1, R14
   \   000014   ........     CALLA   #?Subroutine2
    135            
    136            start  = (menu){
    137                .length = 1,
    138                .current = 0,
    139                .name = START_MENU,
    140                .headers = {""},
    141                .values = {""},
    142                .transitions = {&mainMenu}
    143            };
   \                     ??CrossCallReturnLabel_2:
   \   000018   3C40....     MOV.W   #start, R12
   \   00001C   3E40....     MOV.W   #?_2, R14
   \   000020   ........     CALLA   #?Subroutine2
    144            commandsOutput = (menu){
    145                .length = 1,
    146                .current = 0,
    147                .name = COMMANDS_MENU,
    148                .headers = {""},
    149                .values = {""},
    150                .transitions = {&mainMenu}
    151            };
   \                     ??CrossCallReturnLabel_3:
   \   000024   3C40....     MOV.W   #commandsOutput, R12
   \   000028   3E40....     MOV.W   #?_3, R14
   \   00002C   3D402000     MOV.W   #0x20, R13
   \   000030   ........     BRA     #?CopyMemoryWords
    152          }

   \                                 In  segment CODE, align 2
   \                     ?Subroutine2:
   \   000000   3D402000     MOV.W   #0x20, R13
   \   000004   ........     BRA     #?CopyMemoryWords

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for menuState>`:
   \   000000   54           DC8 84

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for currMenu>`:
   \   000000   ....         DC16 start

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ARRIVED 0 ">`:
   \   000000   415252495645 DC8 "ARRIVED 0 "
   \            4420302000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WAITING...">`:
   \   000000   57414954494E DC8 "WAITING..."
   \            472E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CALIBRATE ">`:
   \   000000   43414C494252 DC8 "CALIBRATE "
   \            4154452000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " COMMANDS ">`:
   \   000000   20434F4D4D41 DC8 " COMMANDS "
   \            4E44532000  
    153          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Menu
        0 ?CopyMemoryWords
        4 ?CopyMemoryWords
      4   MenuProcess
        0   -> displayCommandsMenu
        4   -> interractWithMenu
        4   -> strcpy
        4   -> transitionMenu
        4   -> updateMenuPos
      4   displayCommandsMenu
        4   -> HEXtoBCD
        4   -> strcpy
      4   interractWithMenu
      4   transitionMenu
        4   -> strcpy
      6   updateMenuPos


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant " COMMANDS ">
       1  ?<Constant "">
      11  ?<Constant "ARRIVED 0 ">
      11  ?<Constant "CALIBRATE ">
      11  ?<Constant "WAITING...">
       2  ?<Initializer for currMenu>
       1  ?<Initializer for menuState>
       6  ??Subroutine0_0
       4  ?Subroutine0
      12  ?Subroutine1
       8  ?Subroutine2
      52  Init_Menu
      86  MenuProcess
      64  calib
      64  commandsOutput
       2  currMenu
      94  displayCommandsMenu
      14  interractWithMenu
       2  lastThumb
      64  mainMenu
       1  menuState
      64  start
      94  transitionMenu
      44  updateMenuPos
     256  -- Other

 
 414 bytes in segment CODE
 312 bytes in segment DATA16_C
   3 bytes in segment DATA16_I
   3 bytes in segment DATA16_ID
 258 bytes in segment DATA16_Z
 
 414 bytes of CODE  memory
 315 bytes of CONST memory
 261 bytes of DATA  memory

Errors: none
Warnings: 1
