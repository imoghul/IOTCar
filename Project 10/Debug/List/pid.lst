###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          21/Apr/2022  14:43:27
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece306test\Project 10\pid.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW1E85.tmp
#        ("C:\Users\saad\Documents\ece306test\Project 10\pid.c" -lC
#        "C:\Users\saad\Documents\ece306test\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\ece306test\Project 10\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece306test\Project 10\Debug\List\pid.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece306test\Project 10\Debug\Obj\pid.r43
#
###############################################################################

C:\Users\saad\Documents\ece306test\Project 10\pid.c
      1          #include "pid.h"
      2          #include "msp430.h"
      3          #include "macros.h"
      4          #include "detectors.h"
      5          #include "utils.h"
      6          

   \                                 In  segment CODE, align 2
      7          int GetOutput(PIDController* pidController, int setPoint, int current) {
   \                     GetOutput:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4D         MOV.W   R13, R10
      8              int error = setPoint - current;
   \   000004   0A8E         SUB.W   R14, R10
      9              pidController->error = error;
   \   000006   8C4A0400     MOV.W   R10, 0x4(R12)
     10              // INTEGRAL NOT EVEN BEGIN USED
     11              //long long integral = pidController->lastIntegral+error;
     12              //int integral = additionSafe(pidController->lastIntegral, INT_MAX, INT_MIN, pidController->error);
     13              int derivative = error - pidController->lastError;
   \   00000A   0F4A         MOV.W   R10, R15
   \   00000C   1F8C0600     SUB.W   0x6(R12), R15
     14              pidController->lastError = error;
   \   000010   8C4A0600     MOV.W   R10, 0x6(R12)
     15              //pidController->lastIntegral = integral;
     16              int errorTerm = (error * pidController->kP) >> 4;
     17              int derivTerm = (derivative * pidController->kD) >> 3;
     18              //long intTerm = integral, pidController->kI;
     19              return additionSafe(errorTerm, INT_MAX, INT_MIN, derivTerm);
   \   000014   0212         PUSH.W  SR
   \   000016   32C2         DINT
   \   000018   0343         NOP
   \   00001A   824F....     MOV.W   R15, &__iar_HWMUL              // MPY
   \   00001E   924C0200.... MOV.W   0x2(R12), &__iar_HWMUL + 8     // OP2
   \   000024   1F42....     MOV.W   &__iar_HWMUL + 10, R15         // RESLO
   \   000028   0343         NOP
   \   00002A   2241         MOV.W   @SP, SR
   \   00002C   5F09         RRAM.W  #0x3, R15
   \   00002E   3E400080     MOV.W   #0x8000, R14
   \   000032   3D40FF7F     MOV.W   #0x7fff, R13
   \   000036   32C2         DINT
   \   000038   0343         NOP
   \   00003A   824A....     MOV.W   R10, &__iar_HWMUL              // MPY
   \   00003E   A24C....     MOV.W   @R12, &__iar_HWMUL + 8         // OP2
   \   000042   1C42....     MOV.W   &__iar_HWMUL + 10, R12         // RESLO
   \   000046   0343         NOP
   \   000048   3241         POP.W   SR
   \   00004A   5C0D         RRAM.W  #0x4, R12
   \   00004C   ........     CALLA   #additionSafe
   \   000050   3A41         POP.W   R10
   \   000052   1001         RETA
     20          }
     21          

   \                                 In  segment CODE, align 2
     22          void ClearController(PIDController* pidController) {
   \                     ClearController:
     23              pidController->error = 0;
     24              pidController->lastError = 0;
   \   000000   7C030400     MOVA    #0x0, 0x4(R12)
     25              //pidController->lastIntegral = 0;
     26          }
   \   000004   1001         RETA
     27          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   ClearController
      8   GetOutput
        6   -> additionSafe


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ClearController
      84  GetOutput

 
 90 bytes in segment CODE
 
 90 bytes of CODE memory

Errors: none
Warnings: none
