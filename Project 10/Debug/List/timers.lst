###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          17/Apr/2022  16:57:14
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 10\timers.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW481E.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 10\timers.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 10\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 10\Debug\List\timers.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 10\Debug\Obj\timers.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 10\timers.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADCCTL0_L
   \                     _A_ADCCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x380
   \   union <unnamed> _A_TB0CTL_L
   \                     _A_TB0CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x386
   \   union <unnamed> _A_TB0CCTL2_L
   \                     _A_TB0CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3a0
   \   union <unnamed> _A_TB0EX0_L
   \                     _A_TB0EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ae
   \   union <unnamed> _A_TB0IV_L
   \                     _A_TB0IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c0
   \   union <unnamed> _A_TB1CTL_L
   \                     _A_TB1CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c2
   \   union <unnamed> _A_TB1CCTL0_L
   \                     _A_TB1CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c4
   \   union <unnamed> _A_TB1CCTL1_L
   \                     _A_TB1CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c6
   \   union <unnamed> _A_TB1CCTL2_L
   \                     _A_TB1CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d2
   \   union <unnamed> _A_TB1CCR0_L
   \                     _A_TB1CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3e0
   \   union <unnamed> _A_TB1EX0_L
   \                     _A_TB1EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ee
   \   union <unnamed> _A_TB1IV_L
   \                     _A_TB1IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x440
   \   union <unnamed> _A_TB3CTL_L
   \                     _A_TB3CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x444
   \   union <unnamed> _A_TB3CCTL1_L
   \                     _A_TB3CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x446
   \   union <unnamed> _A_TB3CCTL2_L
   \                     _A_TB3CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x448
   \   union <unnamed> _A_TB3CCTL3_L
   \                     _A_TB3CCTL3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x44a
   \   union <unnamed> _A_TB3CCTL4_L
   \                     _A_TB3CCTL4_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x452
   \   union <unnamed> _A_TB3CCR0_L
   \                     _A_TB3CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
      2          #include "timers.h"
      3          #include "ports.h"
      4          #include "macros.h"
      5          #include "wheels.h"
      6          #include "sm.h"
      7          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      8          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2
      9          extern volatile unsigned char update_display;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          volatile unsigned long timer0Counter;
   \                     timer0Counter:
   \   000000                DS8 4

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          volatile unsigned int backliteCounter;
   \                     backliteCounter:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          unsigned int debounce_count1, debounce_count2;
   \                     debounce_count1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     debounce_count2:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          volatile unsigned int debouncing1, debouncing2;
   \                     debouncing1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     debouncing2:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          volatile unsigned int debounce_thresh1 = 10, debounce_thresh2 = 10;
   \                     debounce_thresh1:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for debounce_thresh1>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
   \                     debounce_thresh2:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for debounce_thresh2>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          volatile unsigned int checkAdc;
   \                     checkAdc:
   \   000000                DS8 2
     16          extern volatile char state;
     17          extern volatile unsigned int rightSwitchable, leftSwitchable;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile int timeElapsedSeconds,timeElapsedMilliseconds;
   \                     timeElapsedSeconds:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     timeElapsedMilliseconds:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile unsigned int stopwatchUpdated;
   \                     stopwatchUpdated:
   \   000000                DS8 2
     20          extern char receievedFromPC;
     21          extern char commandsReceieved;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          char pingCounter;
   \                     pingCounter:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          volatile char pingFlag;
   \                     pingFlag:
   \   000000                DS8 1
     24          

   \                                 In  segment CODE, align 2
     25          void Init_Timers(void) {
   \                     Init_Timers:
     26              Init_Timer_B0();
   \   000000   ........     CALLA   #Init_Timer_B0
     27              Init_Timer_B1();
   \   000004   ........     CALLA   #Init_Timer_B1
     28              Init_Timer_B3();
   \   000008   ........     BRA     #Init_Timer_B3
     29          }
     30          

   \                                 In  segment CODE, align 2
     31          void Init_Timer_B0(void) {
   \                     Init_Timer_B0:
     32              /*TB0CTL = TBSSEL__SMCLK; // SMCLK source
     33              TB0CTL |= TBCLR; // Resets TB0R, clock divider, count direction
     34              TB0CTL |= MC__CONTINOUS; // Continuous up
     35              TB0CTL |= ID__2; // Divide clock by 2*/
     36            
     37              TB0CTL = TBSSEL__SMCLK | TBCLR | MC__CONTINOUS | ID__2;
   \   000000   B24064028003 MOV.W   #0x264, &0x380
     38              
     39              TB0EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000006   B2400700A003 MOV.W   #0x7, &0x3a0
     40              
     41              TB0CCR0 = TB0CCR0_INTERVAL; // CCR0
   \   00000C   B240D0079203 MOV.W   #0x7d0, &0x392
     42              TB0CCTL0 |= CCIE; // CCR0 enable interrupt
   \   000012   B2D010008203 BIS.W   #0x10, &0x382
     43              
     44              TB0CCR1 = TB0CCR1_INTERVAL; // CCR1
   \   000018   B24050C39403 MOV.W   #0xc350, &0x394
     45              //TB0CCTL1 |= CCIE; // CCR1 enable interrupt
     46              
     47              TB0CCR2 = TB0CCR2_INTERVAL; // CCR2
   \   00001E   B24050C39603 MOV.W   #0xc350, &0x396
     48              //TB0CCTL2 |= CCIE; // CCR2 enable interrupt
     49              
     50              TB0CTL &= ~TBIE & ~TBIFG; // Disable Overflow Interrupt
   \   000024   B2F0FCFF8003 AND.W   #0xfffc, &0x380
     51              //TB0CTL &= ~TBIFG; // Clear Overflow Interrupt flag
     52          }
   \   00002A   1001         RETA
   \   00002C                REQUIRE _A_TB0CTL_L
   \   00002C                REQUIRE _A_TB0EX0_L
   \   00002C                REQUIRE _A_TB0CCR0_L
   \   00002C                REQUIRE _A_TB0CCTL0_L
   \   00002C                REQUIRE _A_TB0CCR1_L
   \   00002C                REQUIRE _A_TB0CCR2_L
     53          

   \                                 In  segment CODE, align 2
     54          void Init_Timer_B1(void) {
   \                     Init_Timer_B1:
     55              /*TB1CTL = TBSSEL__SMCLK; // SMCLK source
     56              TB1CTL |= TBCLR; // Resets TB0R, clock divider, count direction
     57              TB1CTL |= MC__CONTINOUS; // Continuous up
     58              TB1CTL |= ID__4; // Divide clock by 4*/
     59            
     60              TB1CTL = TBSSEL__SMCLK | TBCLR | MC__CONTINOUS | ID__4;
   \   000000   B240A402C003 MOV.W   #0x2a4, &0x3c0
     61              
     62              TB1EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000006   B2400700E003 MOV.W   #0x7, &0x3e0
     63              
     64              TB1CCR0 = TB1CCR0_INTERVAL; // CCR0
   \   00000C   B24050C3D203 MOV.W   #0xc350, &0x3d2
     65              TB1CCTL0 |= CCIE; // CCR0 enable interrupt
   \   000012   B2D01000C203 BIS.W   #0x10, &0x3c2
     66              
     67              //TB1CCR1 = TB1CCR1_INTERVAL; // CCR1
     68              //TB1CCTL1 |= CCIE; // CCR1 enable interrupt
     69              
     70              //TB1CCR2 = TB1CCR2_INTERVAL; // CCR2
     71              //TB1CCTL2 |= CCIE; // CCR2 enable interrupt
     72              
     73              TB1CTL &= ~TBIE & ~TBIFG; // Disable Overflow Interrupt
   \   000018   B2F0FCFFC003 AND.W   #0xfffc, &0x3c0
     74              //TB1CTL &= ~TBIFG; // Clear Overflow Interrupt flag
     75          }
   \   00001E   1001         RETA
   \   000020                REQUIRE _A_TB1CTL_L
   \   000020                REQUIRE _A_TB1EX0_L
   \   000020                REQUIRE _A_TB1CCR0_L
   \   000020                REQUIRE _A_TB1CCTL0_L
     76          

   \                                 In  segment CODE, align 2
     77          void Init_Timer_B3(void) {
   \                     Init_Timer_B3:
     78              /*TB3CTL = TBSSEL__SMCLK;
     79              TB3CTL |= MC__UP;
     80              TB3CTL |= TBCLR;*/
     81            
     82              TB3CTL = TBCLR | MC__UP | TBSSEL__SMCLK;
   \   000000   B24014024004 MOV.W   #0x214, &0x440
     83          
     84              TB3CCR0 = WHEEL_PERIOD;
   \   000006   B240204E5204 MOV.W   #0x4e20, &0x452
     85          
     86              TB3CCTL1 = OUTMOD_7;
   \   00000C   3F40E000     MOV.W   #0xe0, R15
   \   000010   824F4404     MOV.W   R15, &0x444
     87              RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   000014   82435404     MOV.W   #0x0, &0x454
     88          
     89              TB3CCTL2 = OUTMOD_7;
   \   000018   824F4604     MOV.W   R15, &0x446
     90              LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   00001C   82435604     MOV.W   #0x0, &0x456
     91          
     92              TB3CCTL3 = OUTMOD_7;
   \   000020   824F4804     MOV.W   R15, &0x448
     93              RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000024   82435804     MOV.W   #0x0, &0x458
     94          
     95              TB3CCTL4 = OUTMOD_7;
   \   000028   824F4A04     MOV.W   R15, &0x44a
     96              LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   00002C   82435A04     MOV.W   #0x0, &0x45a
     97          }
   \   000030   1001         RETA
   \   000032                REQUIRE _A_TB3CTL_L
   \   000032                REQUIRE _A_TB3CCR0_L
   \   000032                REQUIRE _A_TB3CCTL1_L
   \   000032                REQUIRE _A_TB3CCR1_L
   \   000032                REQUIRE _A_TB3CCTL2_L
   \   000032                REQUIRE _A_TB3CCR2_L
   \   000032                REQUIRE _A_TB3CCTL3_L
   \   000032                REQUIRE _A_TB3CCR3_L
   \   000032                REQUIRE _A_TB3CCTL4_L
   \   000032                REQUIRE _A_TB3CCR4_L
     98          
     99          
    100          //===========================================================================
    101          // Function name: Timer0_B0_ISR
    102          //
    103          // Description: Increments Time_Sequence and update_display
    104          //
    105          // Passed : no variables passed
    106          // Locals: no variables declared
    107          // Returned: no values returned
    108          // Globals: no global values
    109          //
    110          // Author: Ibrahim Moghul
    111          // Date: Feb 2022
    112          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    113          //===========================================================================
    114          #pragma vector = TIMER0_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
    115          __interrupt void Timer0_B0_ISR(void) {
   \                     Timer0_B0_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
    116              //------------------------------------------------------------------------------
    117              // TimerB0 0 Interrupt handler
    118              //----------------------------------------------------------------------------
    119              if(Time_Sequence++ == TIME_SEQUENCE_MAX) Time_Sequence = 0;
   \   000002   1F42....     MOV.W   &Time_Sequence, R15
   \   000006   0E4F         MOV.W   R15, R14
   \   000008   1E53         ADD.W   #0x1, R14
   \   00000A   824E....     MOV.W   R14, &Time_Sequence
   \   00000E   3F90FA00     CMP.W   #0xfa, R15
   \   000012   0220         JNE     ??Timer0_B0_ISR_0
   \   000014   8243....     MOV.W   #0x0, &Time_Sequence
    120          
    121              if(++timer0Counter >= CHECK_ADC_TIMER_COUNT ) { // 56 ms
   \                     ??Timer0_B0_ISR_0:
   \   000018   1E42....     MOV.W   &timer0Counter, R14
   \   00001C   1F42....     MOV.W   &timer0Counter + 2, R15
   \   000020   1E53         ADD.W   #0x1, R14
   \   000022   0F63         ADDC.W  #0x0, R15
   \   000024   824E....     MOV.W   R14, &timer0Counter
   \   000028   824F....     MOV.W   R15, &timer0Counter + 2
   \   00002C   0320         JNE     ??Timer0_B0_ISR_1
   \   00002E   3E900E00     CMP.W   #0xe, R14
   \   000032   0628         JNC     ??Timer0_B0_ISR_2
    122                  timer0Counter = 0;
   \                     ??Timer0_B0_ISR_1:
   \   000034   8243....     MOV.W   #0x0, &timer0Counter
   \   000038   8243....     MOV.W   #0x0, &timer0Counter + 2
    123                  ADCCTL0 |= ADCSC;
   \   00003C   92D30007     BIS.W   #0x1, &0x700
    124              }
    125          
    126              TB0CCR0 += TB0CCR0_INTERVAL; // Add Offset to TBCCR0
   \                     ??Timer0_B0_ISR_2:
   \   000040   B250D0079203 ADD.W   #0x7d0, &0x392
    127              //----------------------------------------------------------------------------
    128          }
   \   000046   1E17         POPM.W  #0x2, R15
   \   000048   0013         RETI
   \   00004A                REQUIRE _A_ADCCTL0_L
   \   00004A                REQUIRE _A_TB0CCR0_L
    129          
    130          
    131          //===========================================================================
    132          // Function name: TIMER0_B1_ISR
    133          //
    134          // Description: Timer 1 handles switch debounce, and Timer 2 handles
    135          // LCD blinking
    136          //
    137          // Passed : no variables passed
    138          // Locals: no variables declared
    139          // Returned: no values returned
    140          // Globals: no global values
    141          //
    142          // Author: Ibrahim Moghul
    143          // Date: Feb 2022
    144          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    145          //===========================================================================
    146          #pragma vector=TIMER0_B1_VECTOR

   \                                 In  segment ISR_CODE, align 2
    147          __interrupt void TIMER0_B1_ISR(void) {
   \                     TIMER0_B1_ISR:
   \   000000   0F12         PUSH.W  R15
    148              //----------------------------------------------------------------------------
    149              // TimerB0 1-2, Overflow Interrupt Vector (TBIV) handler
    150              //----------------------------------------------------------------------------
    151              switch(__even_in_range(TB0IV, 14)) {
   \   000002   1F42AE03     MOV.W   &0x3ae, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for TIMER0_B1_ISR>_0`:
   \   000008   323C         JMP     ??TIMER0_B1_ISR_0
   \   00000A   063C         JMP     ??TIMER0_B1_ISR_5
   \   00000C   1B3C         JMP     ??TIMER0_B1_ISR_6
   \   00000E   2F3C         JMP     ??TIMER0_B1_ISR_0
   \   000010   2E3C         JMP     ??TIMER0_B1_ISR_0
   \   000012   2D3C         JMP     ??TIMER0_B1_ISR_0
   \   000014   2C3C         JMP     ??TIMER0_B1_ISR_0
   \   000016   2B3C         JMP     ??TIMER0_B1_ISR_0
    152                  case 0:
    153                      break; // No interrupt
    154          
    155                  case 2: // CCR1 not used
    156                      if(debouncing1 == TRUE) debounce_count1++;
   \                     ??TIMER0_B1_ISR_5:
   \   000018   9293....     CMP.W   #0x1, &debouncing1
   \   00001C   0220         JNE     ??TIMER0_B1_ISR_1
   \   00001E   9253....     ADD.W   #0x1, &debounce_count1
    157          
    158                      if (debounce_count1 > debounce_thresh1) {
   \                     ??TIMER0_B1_ISR_1:
   \   000022   9292........ CMP.W   &debounce_count1, &debounce_thresh1
   \   000028   092C         JC      ??TIMER0_B1_ISR_2
    159                          debounce_count1 = 0;
   \   00002A   8243....     MOV.W   #0x0, &debounce_count1
    160                          debouncing1 = FALSE;
   \   00002E   8243....     MOV.W   #0x0, &debouncing1
    161                          P4IE |= SW1;
   \   000032   E2D33B02     BIS.B   #0x2, &0x23b
    162                          TB0CCTL1 &= ~CCIE;
   \   000036   B2C010008403 BIC.W   #0x10, &0x384
    163                      }
    164          
    165                      TB0CCR1 += TB0CCR1_INTERVAL; // Add Offset to TBCCR1
   \                     ??TIMER0_B1_ISR_2:
   \   00003C   B25050C39403 ADD.W   #0xc350, &0x394
    166          
    167                      break;
   \   000042   153C         JMP     ??TIMER0_B1_ISR_0
    168          
    169                  case 4: // CCR2 not used
    170                      if(debouncing2 == TRUE) debounce_count2++;
   \                     ??TIMER0_B1_ISR_6:
   \   000044   9293....     CMP.W   #0x1, &debouncing2
   \   000048   0220         JNE     ??TIMER0_B1_ISR_3
   \   00004A   9253....     ADD.W   #0x1, &debounce_count2
    171          
    172                      if (debounce_count2 > debounce_thresh2) {
   \                     ??TIMER0_B1_ISR_3:
   \   00004E   9292........ CMP.W   &debounce_count2, &debounce_thresh2
   \   000054   092C         JC      ??TIMER0_B1_ISR_4
    173                          debounce_count2 = 0;
   \   000056   8243....     MOV.W   #0x0, &debounce_count2
    174                          debouncing2 = FALSE;
   \   00005A   8243....     MOV.W   #0x0, &debouncing2
    175                          P2IE |= SW2;
   \   00005E   F2D21B02     BIS.B   #0x8, &0x21b
    176                          TB0CCTL2 &= ~CCIE;
   \   000062   B2C010008603 BIC.W   #0x10, &0x386
    177                      }
    178          
    179                      TB0CCR2 += TB0CCR2_INTERVAL; // Add Offset to TBCCR2
   \                     ??TIMER0_B1_ISR_4:
   \   000068   B25050C39603 ADD.W   #0xc350, &0x396
    180          
    181                      break;
    182          
    183                  case 14: // overflow
    184          
    185                      break;
    186          
    187                  default:
    188                      break;
    189              }
    190          
    191              //----------------------------------------------------------------------------
    192          }
   \                     ??TIMER0_B1_ISR_0:
   \   00006E   3F41         POP.W   R15
   \   000070   0013         RETI
   \   000072                REQUIRE _A_PBIE_L
   \   000072                REQUIRE _A_TB0CCTL1_L
   \   000072                REQUIRE _A_TB0CCR1_L
   \   000072                REQUIRE _A_PAIE_L
   \   000072                REQUIRE _A_TB0CCTL2_L
   \   000072                REQUIRE _A_TB0CCR2_L
   \   000072                REQUIRE _A_TB0IV_L
    193          
    194          #pragma vector = TIMER1_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
    195          __interrupt void Timer1_B0_ISR(void) {
   \                     Timer1_B0_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
    196              //------------------------------------------------------------------------------
    197              // TimerB0 0 Interrupt handler
    198              //----------------------------------------------------------------------------
    199              P3OUT |= IOT_EN_CPU;
   \   000002   F2D080002202 BIS.B   #0x80, &0x222
    200          
    201              if(commandsReceieved && state != END) {
   \   000008   C293....     CMP.B   #0x0, &commandsReceieved
   \   00000C   1024         JEQ     ??Timer1_B0_ISR_0
   \   00000E   F2904500.... CMP.B   #0x45, &state
   \   000014   0C24         JEQ     ??Timer1_B0_ISR_0
    202                  stopwatchUpdated = 1;
   \   000016   9243....     MOV.W   #0x1, &stopwatchUpdated
    203                  timeElapsedMilliseconds+=2;
   \   00001A   A253....     ADD.W   #0x2, &timeElapsedMilliseconds
    204                  if(timeElapsedMilliseconds>=10){
   \   00001E   B2900A00.... CMP.W   #0xa, &timeElapsedMilliseconds
   \   000024   0438         JL      ??Timer1_B0_ISR_0
    205                    timeElapsedMilliseconds = 0;
   \   000026   8243....     MOV.W   #0x0, &timeElapsedMilliseconds
    206                    timeElapsedSeconds++;
   \   00002A   9253....     ADD.W   #0x1, &timeElapsedSeconds
    207                  }
    208              }
    209          
    210              if(pingCounter++>=PING_COUNT_MAX){
   \                     ??Timer1_B0_ISR_0:
   \   00002E   5E42....     MOV.B   &pingCounter, R14
   \   000032   4F4E         MOV.B   R14, R15
   \   000034   5F53         ADD.B   #0x1, R15
   \   000036   7E900300     CMP.B   #0x3, R14
   \   00003A   0328         JNC     ??Timer1_B0_ISR_1
    211                pingCounter = 0;
   \   00003C   4F43         MOV.B   #0x0, R15
    212                pingFlag = 1;
   \   00003E   D243....     MOV.B   #0x1, &pingFlag
   \                     ??Timer1_B0_ISR_1:
   \   000042   C24F....     MOV.B   R15, &pingCounter
    213              }
    214              
    215              update_display = 1;
   \   000046   D243....     MOV.B   #0x1, &update_display
    216              TB1CCR0 += TB1CCR0_INTERVAL;
   \   00004A   B25050C3D203 ADD.W   #0xc350, &0x3d2
    217              //----------------------------------------------------------------------------
    218          }
   \   000050   1E17         POPM.W  #0x2, R15
   \   000052   0013         RETI
   \   000054                REQUIRE _A_PBOUT_L
   \   000054                REQUIRE _A_TB1CCR0_L
    219          
    220          #pragma vector=TIMER1_B1_VECTOR

   \                                 In  segment ISR_CODE, align 2
    221          __interrupt void TIMER1_B1_ISR(void) {
   \                     TIMER1_B1_ISR:
   \   000000   0F12         PUSH.W  R15
    222              //----------------------------------------------------------------------------
    223              // TimerB0 1-2, Overflow Interrupt Vector (TBIV) handler
    224              //----------------------------------------------------------------------------
    225              switch(__even_in_range(TB1IV, 14)) {
   \   000002   1F42EE03     MOV.W   &0x3ee, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for TIMER1_B1_ISR>_0`:
   \   000008   123C         JMP     ??TIMER1_B1_ISR_0
   \   00000A   063C         JMP     ??TIMER1_B1_ISR_1
   \   00000C   0B3C         JMP     ??TIMER1_B1_ISR_2
   \   00000E   0F3C         JMP     ??TIMER1_B1_ISR_0
   \   000010   0E3C         JMP     ??TIMER1_B1_ISR_0
   \   000012   0D3C         JMP     ??TIMER1_B1_ISR_0
   \   000014   0C3C         JMP     ??TIMER1_B1_ISR_0
   \   000016   0B3C         JMP     ??TIMER1_B1_ISR_0
    226                  case 0:
    227                      break; // No interrupt
    228          
    229                  case 2: // Left Motor
    230                      leftSwitchable = 1;
   \                     ??TIMER1_B1_ISR_1:
   \   000018   9243....     MOV.W   #0x1, &leftSwitchable
    231                      TB1CCTL1 &= ~CCIE;
   \   00001C   B2C01000C403 BIC.W   #0x10, &0x3c4
    232          
    233                      break;
   \   000022   053C         JMP     ??TIMER1_B1_ISR_0
    234          
    235                  case 4: // Right Motor
    236          
    237                      rightSwitchable = 1;
   \                     ??TIMER1_B1_ISR_2:
   \   000024   9243....     MOV.W   #0x1, &rightSwitchable
    238                      TB1CCTL2 &= ~CCIE;
   \   000028   B2C01000C603 BIC.W   #0x10, &0x3c6
    239          
    240                      break;
    241          
    242                  case 14: // overflow
    243          
    244                      break;
    245          
    246                  default:
    247                      break;
    248              }
    249          
    250              //----------------------------------------------------------------------------
    251          }
   \                     ??TIMER1_B1_ISR_0:
   \   00002E   3F41         POP.W   R15
   \   000030   0013         RETI
   \   000032                REQUIRE _A_TB1CCTL1_L
   \   000032                REQUIRE _A_TB1CCTL2_L
   \   000032                REQUIRE _A_TB1IV_L

   \                                 In  segment INTVEC, offset 0x50, root
   \                     `??TIMER1_B1_ISR::??INTVEC 80`:
   \   000050   ....         DC16    TIMER1_B1_ISR

   \                                 In  segment INTVEC, offset 0x52, root
   \                     `??Timer1_B0_ISR::??INTVEC 82`:
   \   000052   ....         DC16    Timer1_B0_ISR

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??TIMER0_B1_ISR::??INTVEC 84`:
   \   000054   ....         DC16    TIMER0_B1_ISR

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??Timer0_B0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    Timer0_B0_ISR

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for debounce_thresh1>`:
   \   000000   0A00         DC16 10

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for debounce_thresh2>`:
   \   000000   0A00         DC16 10

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_B0
      4   Init_Timer_B1
      4   Init_Timer_B3
      4   Init_Timers
        4   -> Init_Timer_B0
        4   -> Init_Timer_B1
        0   -> Init_Timer_B3
      6   TIMER0_B1_ISR
      6   TIMER1_B1_ISR
      8   Timer0_B0_ISR
      8   Timer1_B0_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for debounce_thresh1>
       2  ?<Initializer for debounce_thresh2>
      44  Init_Timer_B0
      32  Init_Timer_B1
      50  Init_Timer_B3
      12  Init_Timers
     114  TIMER0_B1_ISR
       2  TIMER0_B1_ISR::??INTVEC 84
      50  TIMER1_B1_ISR
       2  TIMER1_B1_ISR::??INTVEC 80
       2  Time_Sequence
      74  Timer0_B0_ISR
       2  Timer0_B0_ISR::??INTVEC 86
      84  Timer1_B0_ISR
       2  Timer1_B0_ISR::??INTVEC 82
       2  _A_ADCCTL0_L
       2  _A_PAIE_L
       2  _A_PBIE_L
       2  _A_PBOUT_L
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CCTL1_L
       2  _A_TB0CCTL2_L
       2  _A_TB0CTL_L
       2  _A_TB0EX0_L
       2  _A_TB0IV_L
       2  _A_TB1CCR0_L
       2  _A_TB1CCTL0_L
       2  _A_TB1CCTL1_L
       2  _A_TB1CCTL2_L
       2  _A_TB1CTL_L
       2  _A_TB1EX0_L
       2  _A_TB1IV_L
       2  _A_TB3CCR0_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
       2  _A_TB3CCTL1_L
       2  _A_TB3CCTL2_L
       2  _A_TB3CCTL3_L
       2  _A_TB3CCTL4_L
       2  _A_TB3CTL_L
       2  backliteCounter
       2  checkAdc
       2  debounce_count1
       2  debounce_count2
       2  debounce_thresh1
       2  debounce_thresh2
       2  debouncing1
       2  debouncing2
       1  pingCounter
       1  pingFlag
       2  stopwatchUpdated
       2  timeElapsedMilliseconds
       2  timeElapsedSeconds
       4  timer0Counter

 
 138 bytes in segment CODE
  60 bytes in segment DATA16_AN
   4 bytes in segment DATA16_I
   4 bytes in segment DATA16_ID
  26 bytes in segment DATA16_Z
   8 bytes in segment INTVEC
 322 bytes in segment ISR_CODE
 
 460 bytes of CODE  memory
   4 bytes of CONST memory (+  8 bytes shared)
  30 bytes of DATA  memory (+ 60 bytes shared)

Errors: none
Warnings: none
