###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          25/Apr/2022  16:03:32
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\test\Project 10\detectors.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWE9B3.tmp
#        ("C:\Users\saad\Documents\test\Project 10\detectors.c" -lC
#        "C:\Users\saad\Documents\test\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\test\Project 10\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\test\Project 10\Debug\List\detectors.lst
#    Object file   =  
#        C:\Users\saad\Documents\test\Project 10\Debug\Obj\detectors.r43
#
###############################################################################

C:\Users\saad\Documents\test\Project 10\detectors.c
      1          #include "msp430.h"
      2          #include "ports.h"
      3          #include "adc.h"
      4          #include "wheels.h"
      5          #include <string.h>
      6          #include "sm.h"
      7          #include "detectors.h"
      8          extern volatile unsigned char display_changed;
      9          extern char display_line[4][11];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          char movingDirection;
   \                     movingDirection:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          int rightVals[VALUES_TO_HOLD];
   \                     rightVals:
   \   000000                DS8 8
     12          extern volatile unsigned int ADC_Left_Detect, ADC_Right_Detect;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          int lastLeft;
   \                     lastLeft:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          int lastRight;
   \                     lastRight:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          int leftVals[VALUES_TO_HOLD];
   \                     leftVals:
   \   000000                DS8 8
     16          extern volatile unsigned int adcUpdated;
     17          extern volatile unsigned int calibrationMode;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          unsigned int LBDetect, LWDetect, RBDetect, RWDetect;
   \                     LBDetect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     LWDetect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     RBDetect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     RWDetect:
   \   000000                DS8 2
     19          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          short l_LessBlack, l_LessGray, l_LessWhite;
   \                     l_LessBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_LessGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_LessWhite:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          short r_LessBlack, r_LessGray, r_LessWhite;
   \                     r_LessBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_LessGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_LessWhite:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          short l_GreaterBlack, l_GreaterGray, l_GreaterWhite;
   \                     l_GreaterBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_GreaterGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_GreaterWhite:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          short r_GreaterBlack, r_GreaterGray, r_GreaterWhite;
   \                     r_GreaterBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_GreaterGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_GreaterWhite:
   \   000000                DS8 2
     24          short lessWhiteOr, lessWhiteAnd, greaterWhiteOr, greaterWhiteAnd;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          short lessWhiteOr, lessWhiteAnd, greaterWhiteOr, greaterWhiteAnd;
   \                     lessWhiteOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     lessWhiteAnd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterWhiteOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterWhiteAnd:
   \   000000                DS8 2
     26          short lessGrayOr, lessGrayAnd, greaterGrayOr, greaterGrayAnd;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          short lessGrayOr, lessGrayAnd, greaterGrayOr, greaterGrayAnd;
   \                     lessGrayOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     lessGrayAnd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterGrayOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterGrayAnd:
   \   000000                DS8 2
     28          short lessBlackOr, lessBlackAnd, greaterBlackOr, greaterBlackAnd;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          short lessBlackOr, lessBlackAnd, greaterBlackOr, greaterBlackAnd;
   \                     lessBlackOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     lessBlackAnd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterBlackOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterBlackAnd:
   \   000000                DS8 2
     30          
     31          
     32          //===========================================================================
     33          // Function name: updateDetectors
     34          //
     35          // Description: This function updates the status of the detectors
     36          //
     37          // Passed : no variables passed
     38          // Locals: no variables declared
     39          // Returned: no values returned
     40          // Globals: l_LessWhite,r_LessWhite,l_GreaterWhite,r_GreaterWhite,lessWhiteOr,
     41          // lessWhiteAnd, greaterWhiteAnd, greaterWhiteOr, ADC_Left_Detect,
     42          // ADC_Right_Detect
     43          //
     44          // Author: Ibrahim Moghul
     45          // Date: Apr 2022
     46          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     47          //===========================================================================
     48          

   \                                 In  segment CODE, align 2
     49          void updateDetectors(void) {
   \                     updateDetectors:
     50              /*l_LessBlack = ADC_Left_Detect < LEFT_BLACK_DETECT;
     51              r_LessBlack = ADC_Right_Detect < RIGHT_BLACK_DETECT;
     52              l_LessGray = ADC_Left_Detect < LEFT_GRAY_DETECT;
     53              r_LessGray = ADC_Right_Detect < RIGHT_GRAY_DETECT;*/
     54              l_LessWhite = ADC_Left_Detect < LEFT_WHITE_DETECT;
   \   000000   B2900900.... CMP.W   #0x9, &ADC_Left_Detect
   \   000006   032C         JC      ??updateDetectors_7
   \   000008   9243....     MOV.W   #0x1, &l_LessWhite
   \   00000C   023C         JMP     ??updateDetectors_0
   \                     ??updateDetectors_7:
   \   00000E   8243....     MOV.W   #0x0, &l_LessWhite
     55              r_LessWhite = ADC_Right_Detect < RIGHT_WHITE_DETECT;
   \                     ??updateDetectors_0:
   \   000012   B2900900.... CMP.W   #0x9, &ADC_Right_Detect
   \   000018   032C         JC      ??updateDetectors_8
   \   00001A   9243....     MOV.W   #0x1, &r_LessWhite
   \   00001E   023C         JMP     ??updateDetectors_1
   \                     ??updateDetectors_8:
   \   000020   8243....     MOV.W   #0x0, &r_LessWhite
     56              //
     57              /*l_GreaterBlack = ADC_Left_Detect > LEFT_BLACK_DETECT;
     58              r_GreaterBlack = ADC_Right_Detect > RIGHT_BLACK_DETECT;
     59              l_GreaterGray = ADC_Left_Detect > LEFT_GRAY_DETECT;
     60              r_GreaterGray = ADC_Right_Detect > RIGHT_GRAY_DETECT;*/
     61              l_GreaterWhite = !l_LessWhite;//ADC_Left_Detect > LEFT_WHITE_DETECT;
   \                     ??updateDetectors_1:
   \   000024   8293....     CMP.W   #0x0, &l_LessWhite
   \   000028   0320         JNE     ??updateDetectors_9
   \   00002A   9243....     MOV.W   #0x1, &l_GreaterWhite
   \   00002E   023C         JMP     ??updateDetectors_2
   \                     ??updateDetectors_9:
   \   000030   8243....     MOV.W   #0x0, &l_GreaterWhite
     62              r_GreaterWhite = !r_LessWhite;//ADC_Right_Detect > RIGHT_WHITE_DETECT;
   \                     ??updateDetectors_2:
   \   000034   8293....     CMP.W   #0x0, &r_LessWhite
   \   000038   0320         JNE     ??updateDetectors_10
   \   00003A   9243....     MOV.W   #0x1, &r_GreaterWhite
   \   00003E   023C         JMP     ??updateDetectors_3
   \                     ??updateDetectors_10:
   \   000040   8243....     MOV.W   #0x0, &r_GreaterWhite
     63              //
     64              lessWhiteOr = l_LessWhite || r_LessWhite;
   \                     ??updateDetectors_3:
   \   000044   8293....     CMP.W   #0x0, &l_LessWhite
   \   000048   0320         JNE     ??updateDetectors_11
   \   00004A   8293....     CMP.W   #0x0, &r_LessWhite
   \   00004E   0324         JEQ     ??updateDetectors_12
   \                     ??updateDetectors_11:
   \   000050   9243....     MOV.W   #0x1, &lessWhiteOr
   \   000054   023C         JMP     ??updateDetectors_4
   \                     ??updateDetectors_12:
   \   000056   8243....     MOV.W   #0x0, &lessWhiteOr
     65              lessWhiteAnd = l_LessWhite && r_LessWhite;
   \                     ??updateDetectors_4:
   \   00005A   8293....     CMP.W   #0x0, &l_LessWhite
   \   00005E   0624         JEQ     ??updateDetectors_13
   \   000060   8293....     CMP.W   #0x0, &r_LessWhite
   \   000064   0324         JEQ     ??updateDetectors_13
   \   000066   9243....     MOV.W   #0x1, &lessWhiteAnd
   \   00006A   023C         JMP     ??updateDetectors_5
   \                     ??updateDetectors_13:
   \   00006C   8243....     MOV.W   #0x0, &lessWhiteAnd
     66              greaterWhiteAnd = l_GreaterWhite && r_GreaterWhite;
   \                     ??updateDetectors_5:
   \   000070   8293....     CMP.W   #0x0, &l_GreaterWhite
   \   000074   0624         JEQ     ??updateDetectors_14
   \   000076   8293....     CMP.W   #0x0, &r_GreaterWhite
   \   00007A   0324         JEQ     ??updateDetectors_14
   \   00007C   9243....     MOV.W   #0x1, &greaterWhiteAnd
   \   000080   023C         JMP     ??updateDetectors_6
   \                     ??updateDetectors_14:
   \   000082   8243....     MOV.W   #0x0, &greaterWhiteAnd
     67              greaterWhiteOr = l_GreaterWhite || r_GreaterWhite;
   \                     ??updateDetectors_6:
   \   000086   8293....     CMP.W   #0x0, &l_GreaterWhite
   \   00008A   0320         JNE     ??updateDetectors_15
   \   00008C   8293....     CMP.W   #0x0, &r_GreaterWhite
   \   000090   0324         JEQ     ??updateDetectors_16
   \                     ??updateDetectors_15:
   \   000092   9243....     MOV.W   #0x1, &greaterWhiteOr
   \   000096   1001         RETA
   \                     ??updateDetectors_16:
   \   000098   8243....     MOV.W   #0x0, &greaterWhiteOr
     68          }
   \   00009C   1001         RETA
     69          
     70          //===========================================================================
     71          // Function name: calibrate
     72          //
     73          // Description: This function calibrates the thresholds for the detectors
     74          //
     75          // Passed : no variables passed
     76          // Locals: left, right, leftDetect,rightDetect
     77          // Returned: no values returned
     78          // Globals: LWDetect,LBDetect,RWDetect,RBDetect
     79          //
     80          // Author: Ibrahim Moghul
     81          // Date: Apr 2022
     82          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     83          //===========================================================================
     84          

   \                                 In  segment CODE, align 2
     85          void calibrate(void) {
   \                     calibrate:
     86              unsigned int left = ADC_Left_Detect, right = ADC_Right_Detect;
   \   000000   1F42....     MOV.W   &ADC_Left_Detect, R15
   \   000004   1E42....     MOV.W   &ADC_Right_Detect, R14
     87              int * leftDetect = calibrationMode ? &LWDetect : &LBDetect;
                                        ^
Warning[Pe144]: a value of type "unsigned int *" cannot be used to initialize
          an entity of type "int *"
   \   000008   8293....     CMP.W   #0x0, &calibrationMode
   \   00000C   0324         JEQ     ??calibrate_2
   \   00000E   3D40....     MOV.W   #LWDetect, R13
   \   000012   023C         JMP     ??calibrate_0
   \                     ??calibrate_2:
   \   000014   3D40....     MOV.W   #LBDetect, R13
     88              int * rightDetect = calibrationMode ? &RWDetect : &RBDetect;
                                         ^
Warning[Pe144]: a value of type "unsigned int *" cannot be used to initialize
          an entity of type "int *"
   \                     ??calibrate_0:
   \   000018   8293....     CMP.W   #0x0, &calibrationMode
   \   00001C   0324         JEQ     ??calibrate_3
   \   00001E   3C40....     MOV.W   #RWDetect, R12
   \   000022   023C         JMP     ??calibrate_1
   \                     ??calibrate_3:
   \   000024   3C40....     MOV.W   #RBDetect, R12
     89          
     90              if (left > *leftDetect) *leftDetect = left;
   \                     ??calibrate_1:
   \   000028   8D9F0000     CMP.W   R15, 0(R13)
   \   00002C   022C         JC      ??calibrate_4
   \   00002E   8D4F0000     MOV.W   R15, 0(R13)
     91          
     92              if (right > *rightDetect) *rightDetect = right;
   \                     ??calibrate_4:
   \   000032   8C9E0000     CMP.W   R14, 0(R12)
   \   000036   022C         JC      ??calibrate_5
   \   000038   8C4E0000     MOV.W   R14, 0(R12)
     93          }
   \                     ??calibrate_5:
   \   00003C   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   calibrate
      4   updateDetectors


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  LBDetect
       2  LWDetect
       2  RBDetect
       2  RWDetect
      62  calibrate
       2  greaterBlackAnd
       2  greaterBlackOr
       2  greaterGrayAnd
       2  greaterGrayOr
       2  greaterWhiteAnd
       2  greaterWhiteOr
       2  l_GreaterBlack
       2  l_GreaterGray
       2  l_GreaterWhite
       2  l_LessBlack
       2  l_LessGray
       2  l_LessWhite
       2  lastLeft
       2  lastRight
       8  leftVals
       2  lessBlackAnd
       2  lessBlackOr
       2  lessGrayAnd
       2  lessGrayOr
       2  lessWhiteAnd
       2  lessWhiteOr
       1  movingDirection
       2  r_GreaterBlack
       2  r_GreaterGray
       2  r_GreaterWhite
       2  r_LessBlack
       2  r_LessGray
       2  r_LessWhite
       8  rightVals
     158  updateDetectors

 
 220 bytes in segment CODE
  77 bytes in segment DATA16_Z
 
 220 bytes of CODE memory
  77 bytes of DATA memory

Errors: none
Warnings: 2
