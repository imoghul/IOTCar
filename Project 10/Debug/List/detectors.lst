###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          20/Apr/2022  10:33:39
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\anotherone\Project 10\detectors.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW12F2.tmp
#        ("C:\Users\saad\Documents\anotherone\Project 10\detectors.c" -lC
#        "C:\Users\saad\Documents\anotherone\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\anotherone\Project 10\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\anotherone\Project 10\Debug\List\detectors.lst
#    Object file   =  
#        C:\Users\saad\Documents\anotherone\Project 10\Debug\Obj\detectors.r43
#
###############################################################################

C:\Users\saad\Documents\anotherone\Project 10\detectors.c
      1          #include "msp430.h"
      2          #include "ports.h"
      3          #include "adc.h"
      4          #include "wheels.h"
      5          #include <string.h>
      6          #include "sm.h"
      7          #include "detectors.h"
      8          extern volatile unsigned char display_changed;
      9          extern char display_line[4][11];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          char movingDirection;
   \                     movingDirection:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          int rightVals[VALUES_TO_HOLD];
   \                     rightVals:
   \   000000                DS8 8
     12          extern volatile unsigned int ADC_Left_Detect, ADC_Right_Detect;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          int lastLeft;
   \                     lastLeft:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          int lastRight;
   \                     lastRight:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          int leftVals[VALUES_TO_HOLD];
   \                     leftVals:
   \   000000                DS8 8
     16          extern volatile unsigned int adcUpdated;
     17          extern volatile unsigned int calibrationMode;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          unsigned int LBDetect, LWDetect, RBDetect, RWDetect;
   \                     LBDetect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     LWDetect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     RBDetect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     RWDetect:
   \   000000                DS8 2
     19          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          short l_LessBlack, l_LessGray, l_LessWhite;
   \                     l_LessBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_LessGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_LessWhite:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          short r_LessBlack, r_LessGray, r_LessWhite;
   \                     r_LessBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_LessGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_LessWhite:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          short l_GreaterBlack, l_GreaterGray, l_GreaterWhite;
   \                     l_GreaterBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_GreaterGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_GreaterWhite:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          short r_GreaterBlack, r_GreaterGray, r_GreaterWhite;
   \                     r_GreaterBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_GreaterGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_GreaterWhite:
   \   000000                DS8 2
     24          short lessWhiteOr, lessWhiteAnd, greaterWhiteOr, greaterWhiteAnd;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          short lessWhiteOr, lessWhiteAnd, greaterWhiteOr, greaterWhiteAnd;
   \                     lessWhiteOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     lessWhiteAnd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterWhiteOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterWhiteAnd:
   \   000000                DS8 2
     26          short lessGrayOr, lessGrayAnd, greaterGrayOr, greaterGrayAnd;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          short lessGrayOr, lessGrayAnd, greaterGrayOr, greaterGrayAnd;
   \                     lessGrayOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     lessGrayAnd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterGrayOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterGrayAnd:
   \   000000                DS8 2
     28          short lessBlackOr, lessBlackAnd, greaterBlackOr, greaterBlackAnd;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          short lessBlackOr, lessBlackAnd, greaterBlackOr, greaterBlackAnd;
   \                     lessBlackOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     lessBlackAnd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterBlackOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterBlackAnd:
   \   000000                DS8 2
     30          

   \                                 In  segment CODE, align 2
     31          void updateDetectors(void) {
   \                     updateDetectors:
   \   000000   1B15         PUSHM.W #0x2, R11
     32              /*l_LessBlack = ADC_Left_Detect < LEFT_BLACK_DETECT;
     33              r_LessBlack = ADC_Right_Detect < RIGHT_BLACK_DETECT;
     34              l_LessGray = ADC_Left_Detect < LEFT_GRAY_DETECT;
     35              r_LessGray = ADC_Right_Detect < RIGHT_GRAY_DETECT;*/
     36              l_LessWhite = ADC_Left_Detect < LEFT_WHITE_DETECT;
   \   000002   1F42....     MOV.W   &LWDetect, R15
   \   000006   2F53         ADD.W   #0x2, R15
   \   000008   829F....     CMP.W   R15, &ADC_Left_Detect
   \   00000C   4E7E         SUBC.B  R14, R14
   \   00000E   5EF3         AND.B   #0x1, R14
   \   000010   824E....     MOV.W   R14, &l_LessWhite
     37              r_LessWhite = ADC_Right_Detect < RIGHT_WHITE_DETECT;
   \   000014   1F42....     MOV.W   &RWDetect, R15
   \   000018   2F53         ADD.W   #0x2, R15
   \   00001A   829F....     CMP.W   R15, &ADC_Right_Detect
   \   00001E   4F7F         SUBC.B  R15, R15
   \   000020   5FF3         AND.B   #0x1, R15
   \   000022   824F....     MOV.W   R15, &r_LessWhite
     38              //
     39              /*l_GreaterBlack = ADC_Left_Detect > LEFT_BLACK_DETECT;
     40              r_GreaterBlack = ADC_Right_Detect > RIGHT_BLACK_DETECT;
     41              l_GreaterGray = ADC_Left_Detect > LEFT_GRAY_DETECT;
     42              r_GreaterGray = ADC_Right_Detect > RIGHT_GRAY_DETECT;*/
     43              l_GreaterWhite = !l_LessWhite;//ADC_Left_Detect > LEFT_WHITE_DETECT;
   \   000026   4D4E         MOV.B   R14, R13
   \   000028   5DE3         XOR.B   #0x1, R13
   \   00002A   824D....     MOV.W   R13, &l_GreaterWhite
     44              r_GreaterWhite = !r_LessWhite;//ADC_Right_Detect > RIGHT_WHITE_DETECT;
   \   00002E   4C4F         MOV.B   R15, R12
   \   000030   5CE3         XOR.B   #0x1, R12
   \   000032   824C....     MOV.W   R12, &r_GreaterWhite
     45              //
     46              lessWhiteOr = l_LessWhite || r_LessWhite;
   \   000036   4A4E         MOV.B   R14, R10
   \   000038   4ADF         BIS.B   R15, R10
   \   00003A   824A....     MOV.W   R10, &lessWhiteOr
     47              lessWhiteAnd = l_LessWhite && r_LessWhite;
   \   00003E   4EFF         AND.B   R15, R14
   \   000040   824E....     MOV.W   R14, &lessWhiteAnd
     48              greaterWhiteAnd = l_GreaterWhite && r_GreaterWhite;
   \   000044   4E4D         MOV.B   R13, R14
   \   000046   4EFC         AND.B   R12, R14
   \   000048   824E....     MOV.W   R14, &greaterWhiteAnd
     49              greaterWhiteOr = l_GreaterWhite || r_GreaterWhite;
   \   00004C   4DDC         BIS.B   R12, R13
   \   00004E   824D....     MOV.W   R13, &greaterWhiteOr
     50          }
   \   000052   1A17         POPM.W  #0x2, R11
   \   000054   1001         RETA
     51          

   \                                 In  segment CODE, align 2
     52          void calibrate(void) {
   \                     calibrate:
   \   000000   1B15         PUSHM.W #0x2, R11
     53              unsigned int left = ADC_Left_Detect, right = ADC_Right_Detect;
   \   000002   1A42....     MOV.W   &ADC_Left_Detect, R10
   \   000006   1B42....     MOV.W   &ADC_Right_Detect, R11
     54              int * leftDetect = calibrationMode ? &LWDetect : &LBDetect;
                                        ^
Warning[Pe144]: a value of type "unsigned int *" cannot be used to initialize
          an entity of type "int *"
   \   00000A   8293....     CMP.W   #0x0, &calibrationMode
   \   00000E   0324         JEQ     ??calibrate_2
   \   000010   3F40....     MOV.W   #LWDetect, R15
   \   000014   023C         JMP     ??calibrate_0
   \                     ??calibrate_2:
   \   000016   3F40....     MOV.W   #LBDetect, R15
     55              int * rightDetect = calibrationMode ? &RWDetect : &RBDetect;
                                         ^
Warning[Pe144]: a value of type "unsigned int *" cannot be used to initialize
          an entity of type "int *"
   \                     ??calibrate_0:
   \   00001A   8293....     CMP.W   #0x0, &calibrationMode
   \   00001E   0324         JEQ     ??calibrate_3
   \   000020   3E40....     MOV.W   #RWDetect, R14
   \   000024   023C         JMP     ??calibrate_1
   \                     ??calibrate_3:
   \   000026   3E40....     MOV.W   #RBDetect, R14
     56          
     57              if (left > *leftDetect) *leftDetect = left;
   \                     ??calibrate_1:
   \   00002A   2C4F         MOV.W   @R15, R12
   \   00002C   0C9A         CMP.W   R10, R12
   \   00002E   022C         JC      ??calibrate_4
   \   000030   8F4A0000     MOV.W   R10, 0(R15)
     58          
     59              if (right > *rightDetect) *rightDetect = right;
   \                     ??calibrate_4:
   \   000034   2C4E         MOV.W   @R14, R12
   \   000036   0C9B         CMP.W   R11, R12
   \   000038   022C         JC      ??calibrate_5
   \   00003A   8E4B0000     MOV.W   R11, 0(R14)
     60          
     61              HEXtoBCD((int)LBDetect, 3, 6);
                     ^
Warning[Pe223]: function "HEXtoBCD" declared implicitly
   \                     ??calibrate_5:
   \   00003E   3E400600     MOV.W   #0x6, R14
   \   000042   3D400300     MOV.W   #0x3, R13
   \   000046   1C42....     MOV.W   &LBDetect, R12
   \   00004A   ........     CALLA   #HEXtoBCD
     62              HEXtoBCD((int)RBDetect, 3, 0);
   \   00004E   0E43         MOV.W   #0x0, R14
   \   000050   3D400300     MOV.W   #0x3, R13
   \   000054   1C42....     MOV.W   &RBDetect, R12
   \   000058   ........     CALLA   #HEXtoBCD
     63              HEXtoBCD((int)LWDetect, 2, 6);
   \   00005C   3E400600     MOV.W   #0x6, R14
   \   000060   2D43         MOV.W   #0x2, R13
   \   000062   1C42....     MOV.W   &LWDetect, R12
   \   000066   ........     CALLA   #HEXtoBCD
     64              HEXtoBCD((int)RWDetect, 2, 0);
   \   00006A   0E43         MOV.W   #0x0, R14
   \   00006C   2D43         MOV.W   #0x2, R13
   \   00006E   1C42....     MOV.W   &RWDetect, R12
   \   000072   ........     CALLA   #HEXtoBCD
     65              HEXtoBCD((int)left, 0, 6);
   \   000076   3E400600     MOV.W   #0x6, R14
   \   00007A   0D43         MOV.W   #0x0, R13
   \   00007C   0C4A         MOV.W   R10, R12
   \   00007E   ........     CALLA   #HEXtoBCD
     66              HEXtoBCD((int)right, 0, 0);
   \   000082   0E43         MOV.W   #0x0, R14
   \   000084   0D43         MOV.W   #0x0, R13
   \   000086   0C4B         MOV.W   R11, R12
   \   000088   ........     CALLA   #HEXtoBCD
     67              display_changed = 1;
   \   00008C   D243....     MOV.B   #0x1, &display_changed
     68          }
   \   000090   1A17         POPM.W  #0x2, R11
   \   000092   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      8   calibrate
        8   -> HEXtoBCD
      8   updateDetectors


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  LBDetect
       2  LWDetect
       2  RBDetect
       2  RWDetect
     148  calibrate
       2  greaterBlackAnd
       2  greaterBlackOr
       2  greaterGrayAnd
       2  greaterGrayOr
       2  greaterWhiteAnd
       2  greaterWhiteOr
       2  l_GreaterBlack
       2  l_GreaterGray
       2  l_GreaterWhite
       2  l_LessBlack
       2  l_LessGray
       2  l_LessWhite
       2  lastLeft
       2  lastRight
       8  leftVals
       2  lessBlackAnd
       2  lessBlackOr
       2  lessGrayAnd
       2  lessGrayOr
       2  lessWhiteAnd
       2  lessWhiteOr
       1  movingDirection
       2  r_GreaterBlack
       2  r_GreaterGray
       2  r_GreaterWhite
       2  r_LessBlack
       2  r_LessGray
       2  r_LessWhite
       8  rightVals
      86  updateDetectors

 
 234 bytes in segment CODE
  77 bytes in segment DATA16_Z
 
 234 bytes of CODE memory
  77 bytes of DATA memory

Errors: none
Warnings: 3
