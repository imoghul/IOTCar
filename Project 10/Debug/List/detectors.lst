###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          12/Apr/2022  15:08:05
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 10\detectors.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW7327.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 10\detectors.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 10\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 10\Debug\List\detectors.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 10\Debug\Obj\detectors.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 10\detectors.c
      1          #include "msp430.h"
      2          #include "ports.h"
      3          #include "adc.h"
      4          #include "wheels.h"
      5          #include <string.h>
      6          #include "sm.h"
      7          #include "detectors.h"
      8          extern volatile unsigned char display_changed;
      9          extern char display_line[4][11];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          char movingDirection;
   \                     movingDirection:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          int rightVals[VALUES_TO_HOLD];
   \                     rightVals:
   \   000000                DS8 8
     12          extern volatile unsigned int ADC_Left_Detect, ADC_Right_Detect;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          int lastLeft;
   \                     lastLeft:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          int lastRight;
   \                     lastRight:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          int leftVals[VALUES_TO_HOLD];
   \                     leftVals:
   \   000000                DS8 8
     16          extern volatile unsigned int adcUpdated;
     17          extern volatile unsigned int calibrationMode;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          unsigned int LBDetect, LWDetect, RBDetect, RWDetect;
   \                     LBDetect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     LWDetect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     RBDetect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     RWDetect:
   \   000000                DS8 2
     19          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          short l_LessBlack,l_LessGray,l_LessWhite;
   \                     l_LessBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_LessGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_LessWhite:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          short r_LessBlack,r_LessGray,r_LessWhite;
   \                     r_LessBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_LessGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_LessWhite:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          short l_GreaterBlack,l_GreaterGray,l_GreaterWhite;
   \                     l_GreaterBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_GreaterGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     l_GreaterWhite:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          short r_GreaterBlack,r_GreaterGray,r_GreaterWhite;
   \                     r_GreaterBlack:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_GreaterGray:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     r_GreaterWhite:
   \   000000                DS8 2
     24          short lessWhiteOr,lessWhiteAnd,greaterWhiteOr,greaterWhiteAnd;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          short lessWhiteOr,lessWhiteAnd,greaterWhiteOr,greaterWhiteAnd;
   \                     lessWhiteOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     lessWhiteAnd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterWhiteOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterWhiteAnd:
   \   000000                DS8 2
     26          short lessGrayOr,lessGrayAnd,greaterGrayOr,greaterGrayAnd;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          short lessGrayOr,lessGrayAnd,greaterGrayOr,greaterGrayAnd;
   \                     lessGrayOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     lessGrayAnd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterGrayOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterGrayAnd:
   \   000000                DS8 2
     28          short lessBlackOr,lessBlackAnd,greaterBlackOr,greaterBlackAnd;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          short lessBlackOr,lessBlackAnd,greaterBlackOr,greaterBlackAnd;
   \                     lessBlackOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     lessBlackAnd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterBlackOr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     greaterBlackAnd:
   \   000000                DS8 2
     30          

   \                                 In  segment CODE, align 2
     31          void updateDetectors(void){
   \                     updateDetectors:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   1842....     MOV.W   &LBDetect, R8
   \   000006   3850CEFF     ADD.W   #0xffce, R8
   \   00000A   8298....     CMP.W   R8, &ADC_Left_Detect
   \   00000E   4F7F         SUBC.B  R15, R15
   \   000010   5FF3         AND.B   #0x1, R15
   \   000012   824F....     MOV.W   R15, &l_LessBlack
   \   000016   1B42....     MOV.W   &RBDetect, R11
   \   00001A   3B50CEFF     ADD.W   #0xffce, R11
   \   00001E   829B....     CMP.W   R11, &ADC_Right_Detect
   \   000022   4F7F         SUBC.B  R15, R15
   \   000024   5FF3         AND.B   #0x1, R15
   \   000026   824F....     MOV.W   R15, &r_LessBlack
   \   00002A   1C42....     MOV.W   &LBDetect, R12
   \   00002E   3C509CFF     ADD.W   #0xff9c, R12
   \   000032   829C....     CMP.W   R12, &ADC_Left_Detect
   \   000036   4F7F         SUBC.B  R15, R15
   \   000038   5FF3         AND.B   #0x1, R15
   \   00003A   824F....     MOV.W   R15, &l_LessGray
     32            l_LessBlack = ADC_Left_Detect<LEFT_BLACK_DETECT;
     33            r_LessBlack = ADC_Right_Detect<RIGHT_BLACK_DETECT;
     34            l_LessGray = ADC_Left_Detect<LEFT_GRAY_DETECT;
     35            r_LessGray = ADC_Right_Detect<RIGHT_GRAY_DETECT;
   \   00003E   1E42....     MOV.W   &RBDetect, R14
   \   000042   3E509CFF     ADD.W   #0xff9c, R14
   \   000046   829E....     CMP.W   R14, &ADC_Right_Detect
   \   00004A   4F7F         SUBC.B  R15, R15
   \   00004C   5FF3         AND.B   #0x1, R15
   \   00004E   824F....     MOV.W   R15, &r_LessGray
   \   000052   1D42....     MOV.W   &LWDetect, R13
   \   000056   3D501400     ADD.W   #0x14, R13
   \   00005A   829D....     CMP.W   R13, &ADC_Left_Detect
   \   00005E   4F7F         SUBC.B  R15, R15
   \   000060   5FF3         AND.B   #0x1, R15
   \   000062   824F....     MOV.W   R15, &l_LessWhite
     36            l_LessWhite = ADC_Left_Detect<LEFT_WHITE_DETECT;
     37            r_LessWhite = ADC_Right_Detect<RIGHT_WHITE_DETECT;
   \   000066   1A42....     MOV.W   &RWDetect, R10
   \   00006A   3A501400     ADD.W   #0x14, R10
   \   00006E   829A....     CMP.W   R10, &ADC_Right_Detect
   \   000072   4F7F         SUBC.B  R15, R15
   \   000074   5FF3         AND.B   #0x1, R15
   \   000076   824F....     MOV.W   R15, &r_LessWhite
     38            //
     39            l_GreaterBlack = ADC_Left_Detect>LEFT_BLACK_DETECT;
   \   00007A   1892....     CMP.W   &ADC_Left_Detect, R8
   \   00007E   4F7F         SUBC.B  R15, R15
   \   000080   5FF3         AND.B   #0x1, R15
   \   000082   824F....     MOV.W   R15, &l_GreaterBlack
     40            r_GreaterBlack = ADC_Right_Detect>RIGHT_BLACK_DETECT;
   \   000086   1B92....     CMP.W   &ADC_Right_Detect, R11
   \   00008A   4F7F         SUBC.B  R15, R15
   \   00008C   5FF3         AND.B   #0x1, R15
   \   00008E   824F....     MOV.W   R15, &r_GreaterBlack
     41            l_GreaterGray = ADC_Left_Detect>LEFT_GRAY_DETECT;
   \   000092   1C92....     CMP.W   &ADC_Left_Detect, R12
   \   000096   4F7F         SUBC.B  R15, R15
   \   000098   5FF3         AND.B   #0x1, R15
   \   00009A   824F....     MOV.W   R15, &l_GreaterGray
     42            r_GreaterGray = ADC_Right_Detect>RIGHT_GRAY_DETECT;
   \   00009E   1E92....     CMP.W   &ADC_Right_Detect, R14
   \   0000A2   4F7F         SUBC.B  R15, R15
   \   0000A4   5FF3         AND.B   #0x1, R15
   \   0000A6   824F....     MOV.W   R15, &r_GreaterGray
     43            l_GreaterWhite = ADC_Left_Detect>LEFT_WHITE_DETECT;
   \   0000AA   1D92....     CMP.W   &ADC_Left_Detect, R13
   \   0000AE   4F7F         SUBC.B  R15, R15
   \   0000B0   5FF3         AND.B   #0x1, R15
   \   0000B2   824F....     MOV.W   R15, &l_GreaterWhite
     44            r_GreaterWhite = ADC_Right_Detect>RIGHT_WHITE_DETECT;
   \   0000B6   1A92....     CMP.W   &ADC_Right_Detect, R10
   \   0000BA   4F7F         SUBC.B  R15, R15
   \   0000BC   5FF3         AND.B   #0x1, R15
   \   0000BE   824F....     MOV.W   R15, &r_GreaterWhite
     45            //
     46            
     47          }
   \   0000C2   3817         POPM.W  #0x4, R11
   \   0000C4   1001         RETA
     48          

   \                                 In  segment CODE, align 2
     49          void calibrate(void) {
   \                     calibrate:
     50              if(calibrationMode == 0) {
   \   000000   8293....     CMP.W   #0x0, &calibrationMode
   \   000004   0F20         JNE     ??calibrate_1
     51                  unsigned int left = ADC_Left_Detect, right = ADC_Right_Detect;
   \   000006   1F42....     MOV.W   &ADC_Left_Detect, R15
   \   00000A   1E42....     MOV.W   &ADC_Right_Detect, R14
     52          
     53                  if (left > LBDetect) LBDetect = left;
   \   00000E   829F....     CMP.W   R15, &LBDetect
   \   000012   022C         JC      ??calibrate_2
   \   000014   824F....     MOV.W   R15, &LBDetect
     54          
     55                  if (right > RBDetect) RBDetect = right;
   \                     ??calibrate_2:
   \   000018   829E....     CMP.W   R14, &RBDetect
   \   00001C   142C         JC      ??calibrate_0
   \   00001E   824E....     MOV.W   R14, &RBDetect
   \   000022   113C         JMP     ??calibrate_0
     56              } else if(calibrationMode == 1) {
   \                     ??calibrate_1:
   \   000024   9293....     CMP.W   #0x1, &calibrationMode
   \   000028   0E20         JNE     ??calibrate_0
     57                  unsigned int left = ADC_Left_Detect, right = ADC_Right_Detect;
   \   00002A   1F42....     MOV.W   &ADC_Left_Detect, R15
   \   00002E   1E42....     MOV.W   &ADC_Right_Detect, R14
     58          
     59                  if (left > LWDetect) LWDetect = left;
   \   000032   829F....     CMP.W   R15, &LWDetect
   \   000036   022C         JC      ??calibrate_3
   \   000038   824F....     MOV.W   R15, &LWDetect
     60          
     61                  if (right > RWDetect) RWDetect = right;
   \                     ??calibrate_3:
   \   00003C   829E....     CMP.W   R14, &RWDetect
   \   000040   022C         JC      ??calibrate_0
   \   000042   824E....     MOV.W   R14, &RWDetect
     62              }
     63          
     64              HEXtoBCD((int)LBDetect, 3, 6);
                     ^
Warning[Pe223]: function "HEXtoBCD" declared implicitly
   \                     ??calibrate_0:
   \   000046   3E400600     MOV.W   #0x6, R14
   \   00004A   3D400300     MOV.W   #0x3, R13
   \   00004E   1C42....     MOV.W   &LBDetect, R12
   \   000052   ........     CALLA   #HEXtoBCD
     65              HEXtoBCD((int)RBDetect, 3, 0);
   \   000056   0E43         MOV.W   #0x0, R14
   \   000058   3D400300     MOV.W   #0x3, R13
   \   00005C   1C42....     MOV.W   &RBDetect, R12
   \   000060   ........     CALLA   #HEXtoBCD
     66              HEXtoBCD((int)LWDetect, 0, 6);
   \   000064   3E400600     MOV.W   #0x6, R14
   \   000068   0D43         MOV.W   #0x0, R13
   \   00006A   1C42....     MOV.W   &LWDetect, R12
   \   00006E   ........     CALLA   #HEXtoBCD
     67              HEXtoBCD((int)RWDetect, 0, 0);
   \   000072   0E43         MOV.W   #0x0, R14
   \   000074   0D43         MOV.W   #0x0, R13
   \   000076   1C42....     MOV.W   &RWDetect, R12
   \   00007A   ........     BRA     #HEXtoBCD
     68          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   calibrate
        0   -> HEXtoBCD
        4   -> HEXtoBCD
     12   updateDetectors


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  LBDetect
       2  LWDetect
       2  RBDetect
       2  RWDetect
     126  calibrate
       2  greaterBlackAnd
       2  greaterBlackOr
       2  greaterGrayAnd
       2  greaterGrayOr
       2  greaterWhiteAnd
       2  greaterWhiteOr
       2  l_GreaterBlack
       2  l_GreaterGray
       2  l_GreaterWhite
       2  l_LessBlack
       2  l_LessGray
       2  l_LessWhite
       2  lastLeft
       2  lastRight
       8  leftVals
       2  lessBlackAnd
       2  lessBlackOr
       2  lessGrayAnd
       2  lessGrayOr
       2  lessWhiteAnd
       2  lessWhiteOr
       1  movingDirection
       2  r_GreaterBlack
       2  r_GreaterGray
       2  r_GreaterWhite
       2  r_LessBlack
       2  r_LessGray
       2  r_LessWhite
       8  rightVals
     198  updateDetectors

 
 324 bytes in segment CODE
  77 bytes in segment DATA16_Z
 
 324 bytes of CODE memory
  77 bytes of DATA memory

Errors: none
Warnings: 1
