###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          20/Apr/2022  11:32:13
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\anotherone\Project 10\main.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWB1BF.tmp
#        ("C:\Users\saad\Documents\anotherone\Project 10\main.c" -lC
#        "C:\Users\saad\Documents\anotherone\Project 10\Debug\List" -o
#        "C:\Users\saad\Documents\anotherone\Project 10\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\anotherone\Project 10\Debug\List\main.lst
#    Object file   =  
#        C:\Users\saad\Documents\anotherone\Project 10\Debug\Obj\main.r43
#
###############################################################################

C:\Users\saad\Documents\anotherone\Project 10\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include <string.h>
     15          #include "macros.h"
     16          #include "init.h"
     17          #include "led.h"
     18          #include "wheels.h"
     19          #include "ports.h"
     20          #include "switches.h"
     21          #include "timers.h"
     22          #include "adc.h"
     23          #include "detectors.h"
     24          #include "sm.h"
     25          #include "menu.h"
     26          #include "serial.h"
     27          #include "iot.h"
     28          // Function Prototypes
     29          void main(void);
     30          
     31          
     32          // Global Variables
     33          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     35          extern char display_line[4][11];
     36          extern char *display[4];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     38          extern volatile unsigned char display_changed;
     39          extern volatile unsigned char update_display;
     40          extern volatile unsigned int update_display_count;
     41          extern volatile unsigned int Time_Sequence;
     42          extern volatile char one_time;
     43          extern volatile unsigned int wheel_tick;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     47          unsigned int Last_Time_Sequence;
   \                     Last_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          volatile unsigned int cycle_count;
   \                     cycle_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          volatile unsigned int stopwatch_seconds;
   \                     stopwatch_seconds:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     50          volatile unsigned int stopwatch_milliseconds;
   \                     stopwatch_milliseconds:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          volatile unsigned int time_change;
   \                     time_change:
   \   000000                DS8 2
     52          extern volatile unsigned int right_tick, left_tick;
     53          extern char adc_char[5];
     54          extern volatile unsigned int ADC_Left_Detect, ADC_Right_Detect;
     55          extern char movingDirection;
     56          extern char enteringDirection;
     57          extern float timeElapsed;
     58          extern char state;
     59          extern volatile unsigned int stopwatchUpdated;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     60          unsigned volatile UCA0_index, UCA1_index;
   \                     UCA0_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     UCA1_index:
   \   000000                DS8 2
     61          extern volatile char USB0_Char_Tx[];
     62          extern volatile unsigned int pb0_buffered;
     63          extern volatile unsigned int usb0_rx_wr, usb0_rx_rd;
     64          extern volatile unsigned int serialState;
     65          extern menu resistor, mainMenu;
     66          //===========================================================================
     67          // Function name: Main
     68          //
     69          // Description: This function contains the while loop that runs continuously
     70          // to act for the operating system. It also calls all the functions to
     71          // initialize the system.
     72          //
     73          // Passed : no variables passed
     74          // Locals: no variables declared
     75          // Returned: no values returned
     76          // Globals: char* display_1
     77          // char* display_2
     78          // slow_input_down
     79          // control_state[CNTL_STATE_INDEX]
     80          //
     81          // Author: Ibrahim Moghul
     82          // Date: Feb 2022
     83          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     84          //===========================================================================
     85          

   \                                 In  segment CODE, align 2
     86          void main(void) {
   \                     main:
     87              //------------------------------------------------------------------------------
     88              // Main Program
     89              // This is the main routine for the program. Execution of code starts here.
     90              // The operating system is Back Ground Fore Ground.
     91              //
     92              //------------------------------------------------------------------------------
     93              PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     94              // Disable the GPIO power-on default high-impedance mode to activate
     95              // previously configured port settings
     96              Init_Menu();
   \   000004   ........     CALLA   #Init_Menu
     97              Init_Ports();                        // Initialize Ports
   \   000008   ........     CALLA   #Init_Ports
     98              Init_Clocks();                       // Initialize Clock System
   \   00000C   ........     CALLA   #Init_Clocks
     99              Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   000010   ........     CALLA   #Init_Conditions
    100              Init_Timers();                       // Initialize Timers
   \   000014   ........     CALLA   #Init_Timers
    101              Init_LCD();                          // Initialize LCD
   \   000018   ........     CALLA   #Init_LCD
    102              Init_REF();
   \   00001C   ........     CALLA   #Init_REF
    103              Init_DAC();
   \   000020   ........     CALLA   #Init_DAC
    104              Init_ADC();
   \   000024   ........     CALLA   #Init_ADC
    105              Init_Serial_UCA();
   \   000028   ........     CALLA   #Init_Serial_UCA
    106              EMITTER_ON;
   \   00002C   F2D010004302 BIS.B   #0x10, &0x243
    107              // Place the contents of what you want on the display, in between the quotes
    108              // Limited to 10 characters per line
    109              strcpy(display_line[0], "          ");
   \   000032   3A40....     MOV.W   #`?<Constant "          ">`, R10
   \   000036   0D4A         MOV.W   R10, R13
   \   000038   3C40....     MOV.W   #display_line, R12
   \   00003C   ........     CALLA   #strcpy
    110              strcpy(display_line[1], "          ");
   \   000040   0D4A         MOV.W   R10, R13
   \   000042   3C40....     MOV.W   #display_line + 11, R12
   \   000046   ........     CALLA   #strcpy
    111              strcpy(display_line[2], "          ");
   \   00004A   0D4A         MOV.W   R10, R13
   \   00004C   3C40....     MOV.W   #display_line + 22, R12
   \   000050   ........     CALLA   #strcpy
    112              strcpy(display_line[3], "          ");
   \   000054   0D4A         MOV.W   R10, R13
   \   000056   3C40....     MOV.W   #display_line + 33, R12
   \   00005A   ........     CALLA   #strcpy
    113              display_changed = TRUE;
   \   00005E   D243....     MOV.B   #0x1, &display_changed
    114          
    115              //------------------------------------------------------------------------------
    116              // Begining of the "While" Operating System
    117              //------------------------------------------------------------------------------
    118              while(ALWAYS) {                       // Can the Operating system run
    119                  Display_Process();                  // Update Display
   \                     ??main_0:
   \   000062   ........     CALLA   #Display_Process
    120                  SerialProcess();
   \   000066   ........     CALLA   #SerialProcess
    121          
    122                  if(!Init_IOT()) continue;
   \   00006A   ........     CALLA   #Init_IOT
   \   00006E   0C93         CMP.W   #0x0, R12
   \   000070   F827         JEQ     ??main_0
    123          
    124                  MenuProcess();
   \   000072   ........     CALLA   #MenuProcess
    125                  IOTBufferCommands();
   \   000076   ........     CALLA   #IOTBufferCommands
    126                  ProcessCommands();
   \   00007A   ........     CALLA   #ProcessCommands
    127                  StateMachine();                     // Run wheels state machine
   \   00007E   ........     CALLA   #StateMachine
    128                  MotorSafety();
   \   000082   ........     CALLA   #MotorSafety
    129                  P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   000086   D2E32202     XOR.B   #0x1, &0x222
    130          
    131          
    132                  if(Last_Time_Sequence != Time_Sequence) {
   \   00008A   9292........ CMP.W   &Time_Sequence, &Last_Time_Sequence
   \   000090   E827         JEQ     ??main_0
    133                      Last_Time_Sequence = Time_Sequence;
   \   000092   9242........ MOV.W   &Time_Sequence, &Last_Time_Sequence
    134                      time_change = 1;
   \   000098   9243....     MOV.W   #0x1, &time_change
    135          
    136                      if(++cycle_count == TIME_SEQUENCE_MAX) {
   \   00009C   1F42....     MOV.W   &cycle_count, R15
   \   0000A0   1F53         ADD.W   #0x1, R15
   \   0000A2   824F....     MOV.W   R15, &cycle_count
   \   0000A6   3F90FA00     CMP.W   #0xfa, R15
   \   0000AA   DB23         JNE     ??main_0
    137                          cycle_count = 0;
   \   0000AC   8243....     MOV.W   #0x0, &cycle_count
    138                          stopwatch_seconds++;
   \   0000B0   9253....     ADD.W   #0x1, &stopwatch_seconds
   \   0000B4   D63F         JMP     ??main_0
   \   0000B6   0343         NOP
   \   0000B8                REQUIRE _A_PM5CTL0_L
   \   0000B8                REQUIRE _A_PCOUT_L
   \   0000B8                REQUIRE _A_PBOUT_L
    139                      }
    140                  }
    141              }
    142          
    143              //------------------------------------------------------------------------------
    144          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  
    145          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> IOTBufferCommands
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_DAC
        4   -> Init_IOT
        4   -> Init_LCD
        4   -> Init_Menu
        4   -> Init_Ports
        4   -> Init_REF
        4   -> Init_Serial_UCA
        4   -> Init_Timers
        4   -> MenuProcess
        4   -> MotorSafety
        4   -> ProcessCommands
        4   -> SerialProcess
        4   -> StateMachine
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       2  Last_Time_Sequence
       2  UCA0_index
       2  UCA1_index
       2  _A_PBOUT_L
       2  _A_PCOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       2  cycle_count
       1  display_mode
     184  main
       1  slow_input_down
       2  stopwatch_milliseconds
       2  stopwatch_seconds
       2  test_value
       2  time_change

 
 184 bytes in segment CODE
   6 bytes in segment DATA16_AN
  11 bytes in segment DATA16_C
  20 bytes in segment DATA16_Z
 
 184 bytes of CODE  memory
  11 bytes of CONST memory
  20 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: none
