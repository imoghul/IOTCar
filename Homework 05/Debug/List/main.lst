###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          15/Feb/2022  11:19:02
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Homework 05\main.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW96C8.tmp
#        ("C:\Users\saad\Documents\ece-306\Homework 05\main.c" -lC
#        "C:\Users\saad\Documents\ece-306\Homework 05\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Homework 05\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Homework 05\Debug\List\main.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Homework 05\Debug\Obj\main.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Homework 05\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include <string.h>
     15          #include "macros.h"
     16          #include "init.h"
     17          #include "ports.h"
     18          #include "switches.h"
     19          #include "led.h"
     20          
     21          // Function Prototypes
     22          void main(void);
     23          
     24          
     25          // Global Variables
     26            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     28          extern char display_line[4][11];
     29          extern char *display[4];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     31          extern volatile unsigned char display_changed;
     32          extern volatile unsigned char update_display;
     33          extern volatile unsigned int update_display_count;
     34          extern volatile unsigned int Time_Sequence;
     35          extern volatile char one_time;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          volatile unsigned int Last_Time_Sequence;
   \                     Last_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     40          volatile unsigned int cycle_count;
   \                     cycle_count:
   \   000000                DS8 2
     41          
     42          
     43          //===========================================================================
     44          // Function name: Main
     45          //
     46          // Description: This function contains the while loop that runs continuously
     47          // to act for the operating system. It also calls all the functions to
     48          // initialize the system.
     49          //
     50          // Passed : no variables passed
     51          // Locals: no variables declared
     52          // Returned: no values returned
     53          // Globals: char* display_1
     54          // char* display_2
     55          // slow_input_down
     56          // control_state[CNTL_STATE_INDEX]
     57          //
     58          // Author: Ibrahim Moghul
     59          // Date: Feb 2022
     60          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     61          //===========================================================================
     62          

   \                                 In  segment CODE, align 2
     63          void main(void){
   \                     main:
     64          //------------------------------------------------------------------------------
     65          // Main Program
     66          // This is the main routine for the program. Execution of code starts here.
     67          // The operating system is Back Ground Fore Ground.
     68          //
     69          //------------------------------------------------------------------------------
     70            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     71          // Disable the GPIO power-on default high-impedance mode to activate
     72          // previously configured port settings
     73          
     74            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     75            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     76            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     77            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     78            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     79          
     80            // Place the contents of what you want on the display, in between the quotes
     81          // Limited to 10 characters per line
     82            strcpy(display_line[0], "   NCSU   ");
   \   000018   3D40....     MOV.W   #`?<Constant "   NCSU   ">`, R13
   \   00001C   3C40....     MOV.W   #display_line, R12
   \   000020   ........     CALLA   #strcpy
     83            strcpy(display_line[1], " WOLFPACK ");
   \   000024   3D40....     MOV.W   #`?<Constant " WOLFPACK ">`, R13
   \   000028   3C40....     MOV.W   #display_line + 11, R12
   \   00002C   ........     CALLA   #strcpy
     84            strcpy(display_line[2], "  ECE306  ");
   \   000030   3D40....     MOV.W   #`?<Constant "  ECE306  ">`, R13
   \   000034   3C40....     MOV.W   #display_line + 22, R12
   \   000038   ........     CALLA   #strcpy
     85            strcpy(display_line[3], "  GP I/O  ");
   \   00003C   3D40....     MOV.W   #`?<Constant "  GP I/O  ">`, R13
   \   000040   3C40....     MOV.W   #display_line + 33, R12
   \   000044   ........     CALLA   #strcpy
     86            display_changed = TRUE;
   \   000048   D243....     MOV.B   #0x1, &display_changed
     87          
     88          //------------------------------------------------------------------------------
     89          // Begining of the "While" Operating System
     90          //------------------------------------------------------------------------------
     91            while(ALWAYS) {                      // Can the Operating system run
     92              SwitchesProcess();
   \                     ??main_0:
   \   00004C   ........     CALLA   #SwitchesProcess
     93              Carlson_StateMachine();
   \   000050   ........     CALLA   #Carlson_StateMachine
     94              P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   000054   D2E32202     XOR.B   #0x1, &0x222
     95              if(Last_Time_Sequence!=Time_Sequence){
                     ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is undefined
          in this statement
   \   000058   1F42....     MOV.W   &Last_Time_Sequence, R15
   \   00005C   1F92....     CMP.W   &Time_Sequence, R15
   \   000060   F527         JEQ     ??main_0
     96                Last_Time_Sequence=Time_Sequence;
   \   000062   9242........ MOV.W   &Time_Sequence, &Last_Time_Sequence
     97                cycle_count++;
   \   000068   9253....     ADD.W   #0x1, &cycle_count
   \   00006C   EF3F         JMP     ??main_0
   \   00006E   0343         NOP
   \   000070                REQUIRE _A_PM5CTL0_L
   \   000070                REQUIRE _A_PBOUT_L
     98              }
     99            }
    100          //------------------------------------------------------------------------------
    101          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   NCSU   ">`:
   \   000000   2020204E4353 DC8 "   NCSU   "
   \            5520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " WOLFPACK ">`:
   \   000000   20574F4C4650 DC8 " WOLFPACK "
   \            41434B2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  ECE306  ">`:
   \   000000   202045434533 DC8 "  ECE306  "
   \            3036202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  GP I/O  ">`:
   \   000000   202047502049 DC8 "  GP I/O  "
   \            2F4F202000  
    102          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Carlson_StateMachine
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> SwitchesProcess
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "   NCSU   ">
      11  ?<Constant "  ECE306  ">
      11  ?<Constant "  GP I/O  ">
      11  ?<Constant " WOLFPACK ">
       2  Last_Time_Sequence
       2  _A_PBOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       2  cycle_count
       1  display_mode
     112  main
       1  slow_input_down
       2  test_value

 
 112 bytes in segment CODE
   4 bytes in segment DATA16_AN
  44 bytes in segment DATA16_C
  10 bytes in segment DATA16_Z
 
 112 bytes of CODE  memory
  44 bytes of CONST memory
  10 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: 1
