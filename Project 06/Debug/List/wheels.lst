###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          22/Feb/2022  14:12:47
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 06\wheels.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW2FFF.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 06\wheels.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 06\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 06\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 06\Debug\List\wheels.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 06\Debug\Obj\wheels.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 06\wheels.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x240
   \   union <unnamed> _A_PCIN_L
   \                     _A_PCIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
      2          #include "ports.h"
      3          #include "wheels.h"
      4          #include <string.h>
      5          
      6          extern volatile unsigned int cycle_count;
      7          extern volatile unsigned int stopwatch_milliseconds;
      8          extern volatile unsigned int stopwatch_seconds;
      9          extern volatile unsigned char display_changed;
     10          extern char display_line[4][11];

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          volatile unsigned int wheel_periods;
   \                     wheel_periods:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     12          volatile char state = START;
   \                     state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for state>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          volatile int shapeCounter;
   \                     shapeCounter:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          volatile char nextState = LINEFOLLOW;
   \                     nextState:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for nextState>`
     15          extern volatile unsigned int Time_Sequence;
     16          extern volatile unsigned int Last_Time_Sequence;
     17          extern volatile unsigned int time_change;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int delayTime;
   \                     delayTime:
   \   000000                DS8 2
     19          extern volatile unsigned int ADC_Left_Detect,ADC_Right_Detect;
     20          

   \                                 In  segment CODE, align 2
     21          void ShutoffMotors(void){
   \                     ShutoffMotors:
     22            P6OUT &= ~R_FORWARD;
   \   000000   D2C34302     BIC.B   #0x1, &0x243
     23            P6OUT &= ~L_FORWARD;
   \   000004   E2C34302     BIC.B   #0x2, &0x243
     24            P6OUT &= ~R_REVERSE;
   \   000008   E2C24302     BIC.B   #0x4, &0x243
     25            P6OUT &= ~L_REVERSE_2355;
   \   00000C   F2C24302     BIC.B   #0x8, &0x243
     26            RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   000010   82435404     MOV.W   #0x0, &0x454
     27            LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   000014   82435604     MOV.W   #0x0, &0x456
     28            RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000018   82435804     MOV.W   #0x0, &0x458
     29            LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   00001C   82435A04     MOV.W   #0x0, &0x45a
     30          }
   \   000020   1001         RETA
   \   000022                REQUIRE _A_PCOUT_L
   \   000022                REQUIRE _A_TB3CCR1_L
   \   000022                REQUIRE _A_TB3CCR2_L
   \   000022                REQUIRE _A_TB3CCR3_L
   \   000022                REQUIRE _A_TB3CCR4_L
     31          

   \                                 In  segment CODE, align 2
     32          void MotorSafety(void){
   \                     MotorSafety:
     33            if ((((P6IN & R_FORWARD)!=0 && (P6IN & R_REVERSE)!=0) || ((P6IN & L_FORWARD)!=0 && (P6IN & L_REVERSE_2355)!=0))
     34                ||
     35                  ((RIGHT_FORWARD_SPEED!=0 && RIGHT_REVERSE_SPEED!=0) || (LEFT_FORWARD_SPEED!=0 && LEFT_REVERSE_SPEED!=0))){
   \   000000   D2B34102     BIT.B   #0x1, &0x241
   \   000004   0328         JNC     ??MotorSafety_0
   \   000006   E2B24102     BIT.B   #0x4, &0x241
   \   00000A   122C         JC      ??MotorSafety_1
   \                     ??MotorSafety_0:
   \   00000C   E2B34102     BIT.B   #0x2, &0x241
   \   000010   0328         JNC     ??MotorSafety_2
   \   000012   F2B24102     BIT.B   #0x8, &0x241
   \   000016   0C2C         JC      ??MotorSafety_1
   \                     ??MotorSafety_2:
   \   000018   82935404     CMP.W   #0x0, &0x454
   \   00001C   0324         JEQ     ??MotorSafety_3
   \   00001E   82935804     CMP.W   #0x0, &0x458
   \   000022   0620         JNE     ??MotorSafety_1
   \                     ??MotorSafety_3:
   \   000024   82935604     CMP.W   #0x0, &0x456
   \   000028   0824         JEQ     ??MotorSafety_4
   \   00002A   82935A04     CMP.W   #0x0, &0x45a
   \   00002E   0524         JEQ     ??MotorSafety_4
     36              ShutoffMotors();
   \                     ??MotorSafety_1:
   \   000030   ........     CALLA   #ShutoffMotors
     37              P1OUT |= RED_LED;
   \   000034   D2D30202     BIS.B   #0x1, &0x202
   \   000038   1001         RETA
     38            }
     39            else{
     40              P1OUT &= ~RED_LED;
   \                     ??MotorSafety_4:
   \   00003A   D2C30202     BIC.B   #0x1, &0x202
     41            }
     42          }
   \   00003E   1001         RETA
   \   000040                REQUIRE _A_PCIN_L
   \   000040                REQUIRE _A_TB3CCR1_L
   \   000040                REQUIRE _A_TB3CCR3_L
   \   000040                REQUIRE _A_TB3CCR2_L
   \   000040                REQUIRE _A_TB3CCR4_L
   \   000040                REQUIRE _A_PAOUT_L
     43          

   \                                 In  segment CODE, align 2
     44          void RunMotor(unsigned short volatile* forwardPin, unsigned short volatile* reversePin, int val){
   \                     RunMotor:
     45            //ShutoffMotors();
     46            if (val>0){
   \   000000   1E93         CMP.W   #0x1, R14
   \   000002   0538         JL      ??RunMotor_1
     47              *reversePin = WHEEL_OFF;
   \   000004   8D430000     MOV.W   #0x0, 0(R13)
     48              *forwardPin = val;
   \   000008   8C4E0000     MOV.W   R14, 0(R12)
   \   00000C   0E3C         JMP     ??RunMotor_0
     49            }
     50            else if (val==0){
   \                     ??RunMotor_1:
   \   00000E   0E93         CMP.W   #0x0, R14
   \   000010   0520         JNE     ??RunMotor_2
     51              *forwardPin = WHEEL_OFF;
   \   000012   8C430000     MOV.W   #0x0, 0(R12)
     52              *reversePin = WHEEL_OFF;
   \   000016   8D430000     MOV.W   #0x0, 0(R13)
   \   00001A   073C         JMP     ??RunMotor_0
     53            }
     54            else{
     55              *forwardPin = WHEEL_OFF;
   \                     ??RunMotor_2:
   \   00001C   8C430000     MOV.W   #0x0, 0(R12)
     56              *reversePin = -val;
   \   000020   0F4E         MOV.W   R14, R15
   \   000022   3FE3         XOR.W   #0xffff, R15
   \   000024   1F53         ADD.W   #0x1, R15
   \   000026   8D4F0000     MOV.W   R15, 0(R13)
     57            }
     58            MotorSafety();
   \                     ??RunMotor_0:
   \   00002A   ........     CALLA   #MotorSafety
     59          }
   \   00002E   1001         RETA
     60          

   \                                 In  segment CODE, align 2
     61          int Update_Ticks(int max_tick){
   \                     Update_Ticks:
   \   000000   0F4C         MOV.W   R12, R15
     62            if(++wheel_periods>max_tick){
   \   000002   1E42....     MOV.W   &wheel_periods, R14
   \   000006   1E53         ADD.W   #0x1, R14
   \   000008   824E....     MOV.W   R14, &wheel_periods
   \   00000C   0F9E         CMP.W   R14, R15
   \   00000E   042C         JC      ??Update_Ticks_0
     63              wheel_periods=0; 
   \   000010   8243....     MOV.W   #0x0, &wheel_periods
     64              return 1;
   \   000014   1C43         MOV.W   #0x1, R12
   \   000016   1001         RETA
     65            }
     66            return 0;
   \                     ??Update_Ticks_0:
   \   000018   0C43         MOV.W   #0x0, R12
   \   00001A   1001         RETA
     67          }
     68          

   \                                 In  segment CODE, align 2
     69          int Drive_Path(int speedR, int speedL, int ticksDuration){
   \                     Drive_Path:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   084E         MOV.W   R14, R8
     70            if (time_change){
   \   000008   8293....     CMP.W   #0x0, &time_change
   \   00000C   1924         JEQ     ??Drive_Path_1
     71              time_change = 0;
   \   00000E   8243....     MOV.W   #0x0, &time_change
     72              RunMotor(&RIGHT_FORWARD_SPEED,&RIGHT_REVERSE_SPEED,speedR);//RunRightMotor(speedR);
   \   000012   0E4A         MOV.W   R10, R14
   \   000014   3D405804     MOV.W   #0x458, R13
   \   000018   3C405404     MOV.W   #0x454, R12
   \   00001C   ........     CALLA   #RunMotor
     73              RunMotor(&LEFT_FORWARD_SPEED,&LEFT_REVERSE_SPEED,speedL);//RunLeftMotor(speedL);
   \   000020   0E4B         MOV.W   R11, R14
   \   000022   3D405A04     MOV.W   #0x45a, R13
   \   000026   3C405604     MOV.W   #0x456, R12
   \   00002A   ........     CALLA   #RunMotor
     74              if (Update_Ticks(ticksDuration)){
   \   00002E   0C48         MOV.W   R8, R12
   \   000030   ........     CALLA   #Update_Ticks
   \   000034   0C93         CMP.W   #0x0, R12
   \   000036   0424         JEQ     ??Drive_Path_1
     75                ShutoffMotors();
   \   000038   ........     CALLA   #ShutoffMotors
     76                return 1;
   \   00003C   1C43         MOV.W   #0x1, R12
   \   00003E   013C         JMP     ??Drive_Path_0
     77              }
     78            }
     79            return 0;
   \                     ??Drive_Path_1:
   \   000040   0C43         MOV.W   #0x0, R12
   \                     ??Drive_Path_0:
   \   000042   3817         POPM.W  #0x4, R11
   \   000044   1001         RETA
   \   000046                REQUIRE _A_TB3CCR1_L
   \   000046                REQUIRE _A_TB3CCR3_L
   \   000046                REQUIRE _A_TB3CCR2_L
   \   000046                REQUIRE _A_TB3CCR4_L
     80          }
     81          

   \                                 In  segment CODE, align 2
     82          void LineFollow(void){
   \                     LineFollow:
     83          
     84            if(ADC_Left_Detect >= LEFT_LINE_DETECT && ADC_Right_Detect >= RIGHT_LINE_DETECT){
   \   000000   B2904600.... CMP.W   #0x46, &ADC_Left_Detect
   \   000006   0C28         JNC     ??LineFollow_0
   \   000008   B2904600.... CMP.W   #0x46, &ADC_Right_Detect
   \   00000E   0828         JNC     ??LineFollow_0
     85              Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT,0);
   \   000010   0E43         MOV.W   #0x0, R14
   \   000012   3D40803E     MOV.W   #0x3e80, R13
   \   000016   3C40204E     MOV.W   #0x4e20, R12
   \   00001A   ........     CALLA   #Drive_Path
   \   00001E   1001         RETA
     86            }
     87            else if(ADC_Left_Detect >= LEFT_LINE_DETECT){ // left detected so rcirc
   \                     ??LineFollow_0:
   \   000020   B2904600.... CMP.W   #0x46, &ADC_Left_Detect
   \   000026   0828         JNC     ??LineFollow_1
     88              Drive_Path(RCIRC_RIGHT,RCIRC_LEFT,0);
   \   000028   0E43         MOV.W   #0x0, R14
   \   00002A   3D40B80B     MOV.W   #0xbb8, R13
   \   00002E   3C40204E     MOV.W   #0x4e20, R12
   \   000032   ........     CALLA   #Drive_Path
   \   000036   1001         RETA
     89            }
     90            else if (ADC_Right_Detect >= RIGHT_LINE_DETECT){
   \                     ??LineFollow_1:
   \   000038   B2904600.... CMP.W   #0x46, &ADC_Right_Detect
   \   00003E   0828         JNC     ??LineFollow_2
     91              Drive_Path(LCIRC_RIGHT,LCIRC_LEFT,0);
   \   000040   0E43         MOV.W   #0x0, R14
   \   000042   3D40204E     MOV.W   #0x4e20, R13
   \   000046   3C40B80B     MOV.W   #0xbb8, R12
   \   00004A   ........     CALLA   #Drive_Path
   \   00004E   1001         RETA
     92            }
     93            else {
     94              Drive_Path(STRAIGHT_RIGHT,STRAIGHT_LEFT,0);
   \                     ??LineFollow_2:
   \   000050   0E43         MOV.W   #0x0, R14
   \   000052   3D40803E     MOV.W   #0x3e80, R13
   \   000056   3C40204E     MOV.W   #0x4e20, R12
   \   00005A   ........     CALLA   #Drive_Path
     95            }
     96          
     97          }
   \   00005E   1001         RETA
     98          
     99          // delays for a specified time and then switches state to global nextState
    100          // make sure nextState is set to desired vlaue before the end of delay

   \                                 In  segment CODE, align 2
    101          void delay(int seconds,int cycles){
   \                     delay:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
    102            if(stopwatch_seconds == 0 && cycle_count<=1) {
   \   000006   8293....     CMP.W   #0x0, &stopwatch_seconds
   \   00000A   0B20         JNE     ??delay_0
   \   00000C   A293....     CMP.W   #0x2, &cycle_count
   \   000010   082C         JC      ??delay_0
    103              strcpy(display_line[0], "WAITING...");
   \   000012   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   000016   3C40....     MOV.W   #display_line, R12
   \   00001A   ........     CALLA   #strcpy
    104              display_changed = 1;
   \   00001E   D243....     MOV.B   #0x1, &display_changed
    105            }
    106            if(stopwatch_seconds>=seconds && cycle_count >= cycles) {
   \                     ??delay_0:
   \   000022   829A....     CMP.W   R10, &stopwatch_seconds
   \   000026   0A28         JNC     ??delay_1
   \   000028   829B....     CMP.W   R11, &cycle_count
   \   00002C   0728         JNC     ??delay_1
    107              stopwatch_seconds = 0;
   \   00002E   8243....     MOV.W   #0x0, &stopwatch_seconds
    108              cycle_count = 0;
   \   000032   8243....     MOV.W   #0x0, &cycle_count
    109              state = nextState;
   \   000036   D242........ MOV.B   &nextState, &state
    110            }
    111          }
   \                     ??delay_1:
   \   00003C   1A17         POPM.W  #0x2, R11
   \   00003E   1001         RETA
    112          
    113          
    114          

   \                                 In  segment CODE, align 2
    115          void StateMachine(void){
   \                     StateMachine:
    116            switch(state){
   \   000000   5E42....     MOV.B   &state, R14
   \   000004   7E804500     SUB.B   #0x45, R14
   \   000008   2224         JEQ     ??StateMachine_1
   \   00000A   7E800E00     SUB.B   #0xe, R14
   \   00000E   0624         JEQ     ??StateMachine_2
   \   000010   6E82         SUB.B   #0x4, R14
   \   000012   1424         JEQ     ??StateMachine_3
   \   000014   7E801500     SUB.B   #0x15, R14
   \   000018   1724         JEQ     ??StateMachine_4
   \   00001A   1001         RETA
    117              case (START):
    118                strcpy(display_line[0], "WAITING...");
   \                     ??StateMachine_2:
   \   00001C   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   000020   3C40....     MOV.W   #display_line, R12
   \   000024   ........     CALLA   #strcpy
    119                display_changed = 1;
   \   000028   D243....     MOV.B   #0x1, &display_changed
    120                stopwatch_seconds = 0;
   \   00002C   8243....     MOV.W   #0x0, &stopwatch_seconds
    121                cycle_count = 0;
   \   000030   8243....     MOV.W   #0x0, &cycle_count
    122                state = WAIT;
   \   000034   F2405700.... MOV.B   #0x57, &state
    123                break;
   \   00003A   1001         RETA
    124              case (WAIT):
    125                delay(3,0);
   \                     ??StateMachine_3:
   \   00003C   0D43         MOV.W   #0x0, R13
   \   00003E   3C400300     MOV.W   #0x3, R12
   \   000042   ........     CALLA   #delay
    126                break;
   \   000046   1001         RETA
    127              case (LINEFOLLOW):
    128                LineFollow();
   \                     ??StateMachine_4:
   \   000048   ........     CALLA   #LineFollow
    129                break;
   \   00004C   1001         RETA
    130              case (END):
    131                strcpy(display_line[0], "    END   ");
   \                     ??StateMachine_1:
   \   00004E   3D40....     MOV.W   #`?<Constant "    END   ">`, R13
   \   000052   3C40....     MOV.W   #display_line, R12
   \   000056   ........     CALLA   #strcpy
    132                display_changed = 1;
   \   00005A   D243....     MOV.B   #0x1, &display_changed
    133                break;
    134              default: break;  
    135            }
    136          }
   \   00005E   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for state>`:
   \   000000   53           DC8 83

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for nextState>`:
   \   000000   6C           DC8 108

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WAITING...">`:
   \   000000   57414954494E DC8 "WAITING..."
   \            472E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    END   ">`:
   \   000000   20202020454E DC8 "    END   "
   \            4420202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Drive_Path
       12   -> RunMotor
       12   -> ShutoffMotors
       12   -> Update_Ticks
      4   LineFollow
        4   -> Drive_Path
      4   MotorSafety
        4   -> ShutoffMotors
      4   RunMotor
        4   -> MotorSafety
      4   ShutoffMotors
      4   StateMachine
        4   -> LineFollow
        4   -> delay
        4   -> strcpy
      4   Update_Ticks
      8   delay
        8   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "    END   ">
      11  ?<Constant "WAITING...">
       1  ?<Initializer for nextState>
       1  ?<Initializer for state>
      70  Drive_Path
      96  LineFollow
      64  MotorSafety
      48  RunMotor
      34  ShutoffMotors
      96  StateMachine
      28  Update_Ticks
       2  _A_PAOUT_L
       2  _A_PCIN_L
       2  _A_PCOUT_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
      64  delay
       2  delayTime
       1  nextState
       2  shapeCounter
       1  state
       2  wheel_periods

 
 500 bytes in segment CODE
  14 bytes in segment DATA16_AN
  22 bytes in segment DATA16_C
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
   6 bytes in segment DATA16_Z
 
 500 bytes of CODE  memory
  24 bytes of CONST memory
   8 bytes of DATA  memory (+ 14 bytes shared)

Errors: none
Warnings: none
