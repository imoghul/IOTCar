###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          20/Feb/2022  11:43:54
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 06\timers.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW248B.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 06\timers.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 06\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 06\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 06\Debug\List\timers.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 06\Debug\Obj\timers.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 06\timers.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x380
   \   union <unnamed> _A_TB0CTL_L
   \                     _A_TB0CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x386
   \   union <unnamed> _A_TB0CCTL2_L
   \                     _A_TB0CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3a0
   \   union <unnamed> _A_TB0EX0_L
   \                     _A_TB0EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ae
   \   union <unnamed> _A_TB0IV_L
   \                     _A_TB0IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x440
   \   union <unnamed> _A_TB3CTL_L
   \                     _A_TB3CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x444
   \   union <unnamed> _A_TB3CCTL1_L
   \                     _A_TB3CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x446
   \   union <unnamed> _A_TB3CCTL2_L
   \                     _A_TB3CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x448
   \   union <unnamed> _A_TB3CCTL3_L
   \                     _A_TB3CCTL3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x44a
   \   union <unnamed> _A_TB3CCTL4_L
   \                     _A_TB3CCTL4_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x452
   \   union <unnamed> _A_TB3CCR0_L
   \                     _A_TB3CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
      2          #include "timers.h"
      3          #include "ports.h"
      4          #include "macros.h"
      5          #include "wheels.h"
      6          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      7          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2
      8          extern volatile unsigned char update_display;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      9          volatile unsigned int timer0Counter;
   \                     timer0Counter:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          volatile unsigned int backliteCounter;
   \                     backliteCounter:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          volatile unsigned int debounce_count1, debounce_count2;
   \                     debounce_count1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     debounce_count2:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          volatile unsigned int debouncing1, debouncing2;
   \                     debouncing1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     debouncing2:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     13          volatile unsigned int debounce_thresh1=10, debounce_thresh2=10;
   \                     debounce_thresh1:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for debounce_thresh1>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
   \                     debounce_thresh2:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for debounce_thresh2>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          volatile unsigned int backliteBlinking = TRUE;
   \                     backliteBlinking:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for backliteBlinking>`

   \                                 In  segment CODE, align 2
     15          void Init_Timers(void){
   \                     Init_Timers:
     16            Init_Timer_B0();
   \   000000   ........     CALLA   #Init_Timer_B0
     17            Init_Timer_B3();
   \   000004   ........     CALLA   #Init_Timer_B3
     18          }
   \   000008   1001         RETA
     19          

   \                                 In  segment CODE, align 2
     20          void Init_Timer_B0(void) {
   \                     Init_Timer_B0:
     21            TB0CTL = TBSSEL__SMCLK; // SMCLK source
   \   000000   B24000028003 MOV.W   #0x200, &0x380
     22            TB0CTL |= TBCLR; // Resets TB0R, clock divider, count direction
   \   000006   A2D28003     BIS.W   #0x4, &0x380
     23            TB0CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D020008003 BIS.W   #0x20, &0x380
     24            TB0CTL |= ID__2; // Divide clock by 2
   \   000010   B2D040008003 BIS.W   #0x40, &0x380
     25            TB0EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000016   B2400700A003 MOV.W   #0x7, &0x3a0
     26            TB0CCR0 = TB0CCR0_INTERVAL; // CCR0
   \   00001C   B240D0079203 MOV.W   #0x7d0, &0x392
     27            TB0CCTL0 |= CCIE; // CCR0 enable interrupt
   \   000022   B2D010008203 BIS.W   #0x10, &0x382
     28            TB0CCR1 = TB0CCR1_INTERVAL; // CCR1
   \   000028   B24050C39403 MOV.W   #0xc350, &0x394
     29            //TB0CCTL1 |= CCIE; // CCR1 enable interrupt
     30            TB0CCR2 = TB0CCR2_INTERVAL; // CCR2
   \   00002E   B24050C39603 MOV.W   #0xc350, &0x396
     31            //TB0CCTL2 |= CCIE; // CCR2 enable interrupt
     32            TB0CTL &= ~TBIE; // Disable Overflow Interrupt
   \   000034   A2C38003     BIC.W   #0x2, &0x380
     33            TB0CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000038   92C38003     BIC.W   #0x1, &0x380
     34          }
   \   00003C   1001         RETA
   \   00003E                REQUIRE _A_TB0CTL_L
   \   00003E                REQUIRE _A_TB0EX0_L
   \   00003E                REQUIRE _A_TB0CCR0_L
   \   00003E                REQUIRE _A_TB0CCTL0_L
   \   00003E                REQUIRE _A_TB0CCR1_L
   \   00003E                REQUIRE _A_TB0CCR2_L
     35          

   \                                 In  segment CODE, align 2
     36          void Init_Timer_B3(void){
   \                     Init_Timer_B3:
     37            TB3CTL = TBSSEL__SMCLK;
   \   000000   B24000024004 MOV.W   #0x200, &0x440
     38            TB3CTL |= MC__UP;
   \   000006   B2D010004004 BIS.W   #0x10, &0x440
     39            TB3CTL |= TBCLR;
   \   00000C   A2D24004     BIS.W   #0x4, &0x440
     40            
     41            TB3CCR0 = WHEEL_PERIOD;
   \   000010   B240204E5204 MOV.W   #0x4e20, &0x452
     42            
     43            TB3CCTL1 = OUTMOD_7;
   \   000016   B240E0004404 MOV.W   #0xe0, &0x444
     44            RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   00001C   82435404     MOV.W   #0x0, &0x454
     45            
     46            TB3CCTL2 = OUTMOD_7;
   \   000020   B240E0004604 MOV.W   #0xe0, &0x446
     47            LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   000026   82435604     MOV.W   #0x0, &0x456
     48            
     49            TB3CCTL3 = OUTMOD_7;
   \   00002A   B240E0004804 MOV.W   #0xe0, &0x448
     50            RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000030   82435804     MOV.W   #0x0, &0x458
     51            
     52            TB3CCTL4 = OUTMOD_7;
   \   000034   B240E0004A04 MOV.W   #0xe0, &0x44a
     53            LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   00003A   82435A04     MOV.W   #0x0, &0x45a
     54          }
   \   00003E   1001         RETA
   \   000040                REQUIRE _A_TB3CTL_L
   \   000040                REQUIRE _A_TB3CCR0_L
   \   000040                REQUIRE _A_TB3CCTL1_L
   \   000040                REQUIRE _A_TB3CCR1_L
   \   000040                REQUIRE _A_TB3CCTL2_L
   \   000040                REQUIRE _A_TB3CCR2_L
   \   000040                REQUIRE _A_TB3CCTL3_L
   \   000040                REQUIRE _A_TB3CCR3_L
   \   000040                REQUIRE _A_TB3CCTL4_L
   \   000040                REQUIRE _A_TB3CCR4_L
     55          
     56          
     57          //===========================================================================
     58          // Function name: Timer0_B0_ISR
     59          //
     60          // Description: Increments Time_Sequence and update_display
     61          //
     62          // Passed : no variables passed
     63          // Locals: no variables declared
     64          // Returned: no values returned
     65          // Globals: no global values
     66          //
     67          // Author: Ibrahim Moghul
     68          // Date: Feb 2022
     69          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     70          //===========================================================================
     71          #pragma vector = TIMER0_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     72          __interrupt void Timer0_B0_ISR(void){
   \                     Timer0_B0_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
     73          //------------------------------------------------------------------------------
     74          // TimerB0 0 Interrupt handler
     75          //----------------------------------------------------------------------------
     76            if(++timer0Counter==((UPDATE_DISPLAY_TIMER_COUNT*BACKLITE_TIMER_COUNT)+1)) timer0Counter = 1;
   \   000002   1F42....     MOV.W   &timer0Counter, R15
   \   000006   1F53         ADD.W   #0x1, R15
   \   000008   824F....     MOV.W   R15, &timer0Counter
   \   00000C   3F905902     CMP.W   #0x259, R15
   \   000010   0220         JNE     ??Timer0_B0_ISR_0
   \   000012   9243....     MOV.W   #0x1, &timer0Counter
     77            if(timer0Counter%TIME_SEQUENCE_TIMER_COUNT==0)
   \                     ??Timer0_B0_ISR_0:
   \   000016   1F42....     MOV.W   &timer0Counter, R15
     78              if(Time_Sequence++ == TIME_SEQUENCE_MAX) Time_Sequence = 0;
   \   00001A   1E42....     MOV.W   &Time_Sequence, R14
   \   00001E   0D4E         MOV.W   R14, R13
   \   000020   1D53         ADD.W   #0x1, R13
   \   000022   824D....     MOV.W   R13, &Time_Sequence
   \   000026   3E90FA00     CMP.W   #0xfa, R14
   \   00002A   0220         JNE     ??Timer0_B0_ISR_1
   \   00002C   8243....     MOV.W   #0x0, &Time_Sequence
     79            if(timer0Counter%UPDATE_DISPLAY_TIMER_COUNT==0)
   \                     ??Timer0_B0_ISR_1:
   \   000030   1C42....     MOV.W   &timer0Counter, R12
   \   000034   3E403200     MOV.W   #0x32, R14
   \   000038   ........     CALLA   #?DivMod16u
   \   00003C   0E93         CMP.W   #0x0, R14
   \   00003E   0220         JNE     ??Timer0_B0_ISR_2
     80              update_display=1;
   \   000040   D243....     MOV.B   #0x1, &update_display
     81            if (timer0Counter%BACKLITE_TIMER_COUNT==0 && backliteBlinking == TRUE){
   \                     ??Timer0_B0_ISR_2:
   \   000044   1C42....     MOV.W   &timer0Counter, R12
   \   000048   3E400C00     MOV.W   #0xc, R14
   \   00004C   ........     CALLA   #?DivMod16u
   \   000050   0E93         CMP.W   #0x0, R14
   \   000052   0F20         JNE     ??Timer0_B0_ISR_3
   \   000054   9293....     CMP.W   #0x1, &backliteBlinking
   \   000058   0C20         JNE     ??Timer0_B0_ISR_3
     82              if (++backliteCounter==10){
   \   00005A   1F42....     MOV.W   &backliteCounter, R15
   \   00005E   1F53         ADD.W   #0x1, R15
   \   000060   824F....     MOV.W   R15, &backliteCounter
   \   000064   3F900A00     CMP.W   #0xa, R15
   \   000068   0420         JNE     ??Timer0_B0_ISR_3
     83                backliteCounter = 0;
   \   00006A   8243....     MOV.W   #0x0, &backliteCounter
     84                P3OUT ^= LCD_BACKLITE;
   \   00006E   F2E22202     XOR.B   #0x8, &0x222
     85              }
     86            }
     87            
     88            TB0CCR0 += TB0CCR0_INTERVAL; // Add Offset to TBCCR0
   \                     ??Timer0_B0_ISR_3:
   \   000072   B250D0079203 ADD.W   #0x7d0, &0x392
     89          //----------------------------------------------------------------------------
     90          }
   \   000078   3C17         POPM.W  #0x4, R15
   \   00007A   0013         RETI
   \   00007C                REQUIRE _A_PBOUT_L
   \   00007C                REQUIRE _A_TB0CCR0_L
     91          
     92          
     93          //===========================================================================
     94          // Function name: TIMER0_B1_ISR
     95          //
     96          // Description: Timer 1 handles switch debounce, and Timer 2 handles 
     97          // LCD blinking
     98          //
     99          // Passed : no variables passed
    100          // Locals: no variables declared
    101          // Returned: no values returned
    102          // Globals: no global values
    103          //
    104          // Author: Ibrahim Moghul
    105          // Date: Feb 2022
    106          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
    107          //===========================================================================
    108          #pragma vector=TIMER0_B1_VECTOR

   \                                 In  segment ISR_CODE, align 2
    109          __interrupt void TIMER0_B1_ISR(void){
   \                     TIMER0_B1_ISR:
   \   000000   0F12         PUSH.W  R15
    110            //----------------------------------------------------------------------------
    111            // TimerB0 1-2, Overflow Interrupt Vector (TBIV) handler
    112            //----------------------------------------------------------------------------
    113            switch(__even_in_range(TB0IV,14)){
   \   000002   1F42AE03     MOV.W   &0x3ae, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for TIMER0_B1_ISR>_0`:
   \   000008   2E3C         JMP     ??TIMER0_B1_ISR_1
   \   00000A   063C         JMP     ??TIMER0_B1_ISR_7
   \   00000C   193C         JMP     ??TIMER0_B1_ISR_8
   \   00000E   2B3C         JMP     ??TIMER0_B1_ISR_1
   \   000010   2A3C         JMP     ??TIMER0_B1_ISR_1
   \   000012   293C         JMP     ??TIMER0_B1_ISR_1
   \   000014   283C         JMP     ??TIMER0_B1_ISR_1
   \   000016   273C         JMP     ??TIMER0_B1_ISR_1
    114              case 0: break; // No interrupt
    115              case 2: // CCR1 not used
    116                if(debouncing1==TRUE) debounce_count1++;
   \                     ??TIMER0_B1_ISR_7:
   \   000018   9293....     CMP.W   #0x1, &debouncing1
   \   00001C   0220         JNE     ??TIMER0_B1_ISR_2
   \   00001E   9253....     ADD.W   #0x1, &debounce_count1
    117                if (debounce_count1 > debounce_thresh1){
                       ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is undefined
          in this statement
   \                     ??TIMER0_B1_ISR_2:
   \   000022   1F42....     MOV.W   &debounce_thresh1, R15
   \   000026   1F92....     CMP.W   &debounce_count1, R15
   \   00002A   062C         JC      ??TIMER0_B1_ISR_3
    118                  debounce_count1 = 0;
   \   00002C   8243....     MOV.W   #0x0, &debounce_count1
    119                  debouncing1 = FALSE;
   \   000030   8243....     MOV.W   #0x0, &debouncing1
    120                  P4IE |= SW1;
   \   000034   E2D33B02     BIS.B   #0x2, &0x23b
    121                }
    122                TB0CCR1 += TB0CCR1_INTERVAL; // Add Offset to TBCCR1
   \                     ??TIMER0_B1_ISR_3:
   \   000038   B25050C39403 ADD.W   #0xc350, &0x394
    123                
    124                break;
   \   00003E   133C         JMP     ??TIMER0_B1_ISR_1
    125              case 4: // CCR2 not used
    126                if(debouncing2==TRUE) debounce_count2++;
   \                     ??TIMER0_B1_ISR_8:
   \   000040   9293....     CMP.W   #0x1, &debouncing2
   \   000044   0220         JNE     ??TIMER0_B1_ISR_4
   \   000046   9253....     ADD.W   #0x1, &debounce_count2
    127                if (debounce_count2 > debounce_thresh2){
                       ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is undefined
          in this statement
   \                     ??TIMER0_B1_ISR_4:
   \   00004A   1F42....     MOV.W   &debounce_thresh2, R15
   \   00004E   1F92....     CMP.W   &debounce_count2, R15
   \   000052   062C         JC      ??TIMER0_B1_ISR_5
    128                  debounce_count2 = 0;
   \   000054   8243....     MOV.W   #0x0, &debounce_count2
    129                  debouncing2 = FALSE;
   \   000058   8243....     MOV.W   #0x0, &debouncing2
    130                  P2IE |= SW2;
   \   00005C   F2D21B02     BIS.B   #0x8, &0x21b
    131                }
    132                TB0CCR2 += TB0CCR2_INTERVAL; // Add Offset to TBCCR2
   \                     ??TIMER0_B1_ISR_5:
   \   000060   B25050C39603 ADD.W   #0xc350, &0x396
    133                
    134                break;
    135              case 14: // overflow
    136                
    137                break;
    138              default: break;
    139            }
    140            if(debouncing1==FALSE && debouncing2==FALSE) {
   \                     ??TIMER0_B1_ISR_1:
   \   000066   8293....     CMP.W   #0x0, &debouncing1
   \   00006A   0D20         JNE     ??TIMER0_B1_ISR_6
   \   00006C   8293....     CMP.W   #0x0, &debouncing2
   \   000070   0A20         JNE     ??TIMER0_B1_ISR_6
    141              TB0CCTL1 &= ~CCIE; // CCR1 disable interrupt
   \   000072   B2C010008403 BIC.W   #0x10, &0x384
    142              TB0CCTL2 &= ~CCIE;
   \   000078   B2C010008603 BIC.W   #0x10, &0x386
    143              backliteBlinking = TRUE;//TB0CCTL2 |= CCIE;
   \   00007E   9243....     MOV.W   #0x1, &backliteBlinking
    144              backliteCounter = 0;
   \   000082   8243....     MOV.W   #0x0, &backliteCounter
    145            }
    146            //----------------------------------------------------------------------------
    147          }
   \                     ??TIMER0_B1_ISR_6:
   \   000086   3F41         POP.W   R15
   \   000088   0013         RETI
   \   00008A                REQUIRE _A_PBIE_L
   \   00008A                REQUIRE _A_TB0CCR1_L
   \   00008A                REQUIRE _A_PAIE_L
   \   00008A                REQUIRE _A_TB0CCR2_L
   \   00008A                REQUIRE _A_TB0IV_L
   \   00008A                REQUIRE _A_TB0CCTL1_L
   \   00008A                REQUIRE _A_TB0CCTL2_L

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??TIMER0_B1_ISR::??INTVEC 84`:
   \   000054   ....         DC16    TIMER0_B1_ISR

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??Timer0_B0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    Timer0_B0_ISR

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for debounce_thresh1>`:
   \   000000   0A00         DC16 10

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for debounce_thresh2>`:
   \   000000   0A00         DC16 10

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for backliteBlinking>`:
   \   000000   0100         DC16 1

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_B0
      4   Init_Timer_B3
      4   Init_Timers
        4   -> Init_Timer_B0
        4   -> Init_Timer_B3
      6   TIMER0_B1_ISR
     12   Timer0_B0_ISR
       12 ?DivMod16u


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for backliteBlinking>
       2  ?<Initializer for debounce_thresh1>
       2  ?<Initializer for debounce_thresh2>
      62  Init_Timer_B0
      64  Init_Timer_B3
      10  Init_Timers
     138  TIMER0_B1_ISR
       2  TIMER0_B1_ISR::??INTVEC 84
       2  Time_Sequence
     124  Timer0_B0_ISR
       2  Timer0_B0_ISR::??INTVEC 86
       2  _A_PAIE_L
       2  _A_PBIE_L
       2  _A_PBOUT_L
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CCTL1_L
       2  _A_TB0CCTL2_L
       2  _A_TB0CTL_L
       2  _A_TB0EX0_L
       2  _A_TB0IV_L
       2  _A_TB3CCR0_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
       2  _A_TB3CCTL1_L
       2  _A_TB3CCTL2_L
       2  _A_TB3CCTL3_L
       2  _A_TB3CCTL4_L
       2  _A_TB3CTL_L
       2  backliteBlinking
       2  backliteCounter
       2  debounce_count1
       2  debounce_count2
       2  debounce_thresh1
       2  debounce_thresh2
       2  debouncing1
       2  debouncing2
       2  timer0Counter

 
 136 bytes in segment CODE
  44 bytes in segment DATA16_AN
   6 bytes in segment DATA16_I
   6 bytes in segment DATA16_ID
  14 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 262 bytes in segment ISR_CODE
 
 398 bytes of CODE  memory
   6 bytes of CONST memory (+  4 bytes shared)
  20 bytes of DATA  memory (+ 44 bytes shared)

Errors: none
Warnings: 2
