###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          28/Feb/2022  10:26:09
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 06\main.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EW8AA8.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 06\main.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 06\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 06\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 06\Debug\List\main.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 06\Debug\Obj\main.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 06\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include <string.h>
     15          #include "macros.h"
     16          #include "init.h"
     17          #include "led.h"
     18          #include "wheels.h"
     19          #include "ports.h"
     20          #include "switches.h"
     21          #include "timers.h"
     22          #include "adc.h"
     23          #include "detectors.h"
     24          // Function Prototypes
     25          void main(void);
     26          
     27          
     28          // Global Variables
     29            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     31          extern char display_line[4][11];
     32          extern char *display[4];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     34          extern volatile unsigned char display_changed;
     35          extern volatile unsigned char update_display;
     36          extern volatile unsigned int update_display_count;
     37          extern volatile unsigned int Time_Sequence;
     38          extern volatile char one_time;
     39          extern volatile unsigned int wheel_tick;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     40          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          volatile unsigned int Last_Time_Sequence;
   \                     Last_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          volatile unsigned int cycle_count;
   \                     cycle_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          volatile unsigned int stopwatch_seconds;
   \                     stopwatch_seconds:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          volatile unsigned int time_change;
   \                     time_change:
   \   000000                DS8 2
     47          extern volatile unsigned int right_tick, left_tick;
     48          extern char adc_char[5];
     49          extern volatile unsigned int ADC_Left_Detect,ADC_Right_Detect;
     50          extern char movingDirection;
     51          extern char enteringDirection;
     52          //===========================================================================
     53          // Function name: Main
     54          //
     55          // Description: This function contains the while loop that runs continuously
     56          // to act for the operating system. It also calls all the functions to
     57          // initialize the system.
     58          //
     59          // Passed : no variables passed
     60          // Locals: no variables declared
     61          // Returned: no values returned
     62          // Globals: char* display_1
     63          // char* display_2
     64          // slow_input_down
     65          // control_state[CNTL_STATE_INDEX]
     66          //
     67          // Author: Ibrahim Moghul
     68          // Date: Feb 2022
     69          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     70          //===========================================================================
     71          

   \                                 In  segment CODE, align 2
     72          void main(void){
   \                     main:
     73          //------------------------------------------------------------------------------
     74          // Main Program
     75          // This is the main routine for the program. Execution of code starts here.
     76          // The operating system is Back Ground Fore Ground.
     77          //
     78          //------------------------------------------------------------------------------
     79            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     80          // Disable the GPIO power-on default high-impedance mode to activate
     81          // previously configured port settings
     82            
     83            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     84            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     85            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     86            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     87            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     88            Init_ADC();
   \   000018   ........     CALLA   #Init_ADC
     89            Init_REF();
   \   00001C   ........     CALLA   #Init_REF
     90            Init_DAC();
   \   000020   ........     CALLA   #Init_DAC
     91            
     92            // Place the contents of what you want on the display, in between the quotes
     93          // Limited to 10 characters per line
     94            strcpy(display_line[0], "WAITING...");
   \   000024   3D40....     MOV.W   #`?<Constant "WAITING...">`, R13
   \   000028   3C40....     MOV.W   #display_line, R12
   \   00002C   ........     CALLA   #strcpy
     95            strcpy(display_line[1], "          ");
   \   000030   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000034   3C40....     MOV.W   #display_line + 11, R12
   \   000038   ........     CALLA   #strcpy
     96            strcpy(display_line[2], "          ");
   \   00003C   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000040   3C40....     MOV.W   #display_line + 22, R12
   \   000044   ........     CALLA   #strcpy
     97            strcpy(display_line[3], "          ");
   \   000048   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00004C   3C40....     MOV.W   #display_line + 33, R12
   \   000050   ........     CALLA   #strcpy
     98            display_changed = TRUE;
   \   000054   D243....     MOV.B   #0x1, &display_changed
     99            
    100          //------------------------------------------------------------------------------
    101          // Begining of the "While" Operating System
    102          //------------------------------------------------------------------------------
    103            while(ALWAYS) {                       // Can the Operating system run
    104              Display_Process();                  // Update Display
   \                     ??main_0:
   \   000058   ........     CALLA   #Display_Process
    105              DetectMovement();
   \   00005C   ........     CALLA   #DetectMovement
    106              StateMachine();                     // Run wheels state machine
   \   000060   ........     CALLA   #StateMachine
    107              MotorSafety();
   \   000064   ........     CALLA   #MotorSafety
    108              P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   000068   D2E32202     XOR.B   #0x1, &0x222
    109              /*if(enteringDirection == MOVING_RIGHT) strcpy(display_line[1], "  RIGHT   ");
    110              else if(enteringDirection == MOVING_STRAIGHT) strcpy(display_line[1], " STRAIGHT ");
    111              else if (enteringDirection == MOVING_LEFT) strcpy(display_line[1], "   LEFT   ");
    112              else if (enteringDirection == NOT_MOVING) strcpy(display_line[1], "NOT MOVING");*/
    113              
    114              if(Last_Time_Sequence!=Time_Sequence){ 
                     ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is undefined
          in this statement
   \   00006C   1F42....     MOV.W   &Last_Time_Sequence, R15
   \   000070   1F92....     CMP.W   &Time_Sequence, R15
   \   000074   F127         JEQ     ??main_0
    115                Last_Time_Sequence=Time_Sequence;
   \   000076   9242........ MOV.W   &Time_Sequence, &Last_Time_Sequence
    116                cycle_count++;
   \   00007C   9253....     ADD.W   #0x1, &cycle_count
    117                time_change = 1;
   \   000080   9243....     MOV.W   #0x1, &time_change
    118                if(cycle_count == TIME_SEQUENCE_MAX){
   \   000084   B290FA00.... CMP.W   #0xfa, &cycle_count
   \   00008A   E623         JNE     ??main_0
    119                  cycle_count = 0;
   \   00008C   8243....     MOV.W   #0x0, &cycle_count
    120                  stopwatch_seconds++;
   \   000090   9253....     ADD.W   #0x1, &stopwatch_seconds
   \   000094   E13F         JMP     ??main_0
   \   000096   0343         NOP
   \   000098                REQUIRE _A_PM5CTL0_L
   \   000098                REQUIRE _A_PBOUT_L
    121                }
    122              }
    123             }
    124              
    125          //------------------------------------------------------------------------------
    126          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WAITING...">`:
   \   000000   57414954494E DC8 "WAITING..."
   \            472E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  
    127          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> DetectMovement
        4   -> Display_Process
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_DAC
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_REF
        4   -> Init_Timers
        4   -> MotorSafety
        4   -> StateMachine
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "WAITING...">
       2  Last_Time_Sequence
       2  _A_PBOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       2  cycle_count
       1  display_mode
     152  main
       1  slow_input_down
       2  stopwatch_seconds
       2  test_value
       2  time_change

 
 152 bytes in segment CODE
   4 bytes in segment DATA16_AN
  22 bytes in segment DATA16_C
  14 bytes in segment DATA16_Z
 
 152 bytes of CODE  memory
  22 bytes of CONST memory
  14 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: 1
