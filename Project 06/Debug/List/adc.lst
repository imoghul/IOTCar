###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          24/Feb/2022  10:19:56
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\saad\Documents\ece-306\Project 06\adc.c
#    Command line  =  
#        -f C:\Users\saad\AppData\Local\Temp\EWC2BE.tmp
#        ("C:\Users\saad\Documents\ece-306\Project 06\adc.c" -lC
#        "C:\Users\saad\Documents\ece-306\Project 06\Debug\List" -o
#        "C:\Users\saad\Documents\ece-306\Project 06\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\saad\Documents\ece-306\Project 06\Debug\List\adc.lst
#    Object file   =  
#        C:\Users\saad\Documents\ece-306\Project 06\Debug\Obj\adc.r43
#
###############################################################################

C:\Users\saad\Documents\ece-306\Project 06\adc.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADCCTL0_L
   \                     _A_ADCCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x702
   \   union <unnamed> _A_ADCCTL1_L
   \                     _A_ADCCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x704
   \   union <unnamed> _A_ADCCTL2_L
   \                     _A_ADCCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADCMCTL0_L
   \                     _A_ADCMCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x712
   \   union <unnamed> _A_ADCMEM0_L
   \                     _A_ADCMEM0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71a
   \   union <unnamed> _A_ADCIE_L
   \                     _A_ADCIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71e
   \   union <unnamed> _A_ADCIV_L
   \                     _A_ADCIV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x120
   \   union <unnamed> _A_PMMCTL0_L
   \                     _A_PMMCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x124
   \   union <unnamed> _A_PMMCTL2_L
   \                     _A_PMMCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb0
   \   union <unnamed> _A_SAC3OA_L
   \                     _A_SAC3OA_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb2
   \   union <unnamed> _A_SAC3PGA_L
   \                     _A_SAC3PGA_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb4
   \   union <unnamed> _A_SAC3DAC_L
   \                     _A_SAC3DAC_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb6
   \   union <unnamed> _A_SAC3DAT_L
   \                     _A_SAC3DAT_L:
   \   000000                DS8 2
      2          #include "ports.h"
      3          #include "adc.h"
      4          #include "macros.h"
      5          #include <string.h>
      6          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      7          volatile unsigned int ADC_Channel;
   \                     ADC_Channel:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      8          volatile unsigned int ADC_Left_Detect,ADC_Right_Detect,ADC_Thumb, ADC_Vbat, ADC_Vdac, ADC_V3v3;
   \                     ADC_Left_Detect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Right_Detect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Thumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Vbat:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Vdac:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_V3v3:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      9          volatile unsigned int DAC_data;
   \                     DAC_data:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          char adc_char[5];
   \                     adc_char:
   \   000000                DS8 5
     11          extern char display_line[4][11];
     12          extern volatile unsigned char display_changed;
     13          extern volatile unsigned int checkAdc;
     14          

   \                                 In  segment CODE, align 2
     15          void Init_ADC(void){
   \                     Init_ADC:
     16          //------------------------------------------------------------------------------
     17          // V_DETECT_L
     18          // V_DETECT_R
     19          // V_THUMB
     20          //------------------------------------------------------------------------------
     21          // ADCCTL0 Register
     22            ADCCTL0 = 0;
   \   000000   82430007     MOV.W   #0x0, &0x700
     23            ADCCTL0 |= ADCSHT_2;
   \   000004   B2D000020007 BIS.W   #0x200, &0x700
     24            ADCCTL0 |= ADCMSC;
   \   00000A   B2D080000007 BIS.W   #0x80, &0x700
     25            ADCCTL0 |= ADCON;
   \   000010   B2D010000007 BIS.W   #0x10, &0x700
     26          // ADCCTL1 Register
     27            ADCCTL1 = 0;
   \   000016   82430207     MOV.W   #0x0, &0x702
     28            ADCCTL1 |= ADCSHS_0; 
   \   00001A   924202070207 MOV.W   &0x702, &0x702
     29            ADCCTL1 |= ADCSHP; 
   \   000020   B2D000020207 BIS.W   #0x200, &0x702
     30            ADCCTL1 &= ~ADCISSH; 
   \   000026   B2C000010207 BIC.W   #0x100, &0x702
     31            ADCCTL1 |= ADCDIV_0; 
   \   00002C   924202070207 MOV.W   &0x702, &0x702
     32            ADCCTL1 |= ADCSSEL_0; 
   \   000032   924202070207 MOV.W   &0x702, &0x702
     33            ADCCTL1 |= ADCCONSEQ_0;
   \   000038   924202070207 MOV.W   &0x702, &0x702
     34          // ADCCTL2 Register
     35            ADCCTL2 = 0;
   \   00003E   82430407     MOV.W   #0x0, &0x704
     36            ADCCTL2 |= ADCPDIV0;
   \   000042   B2D000010407 BIS.W   #0x100, &0x704
     37            ADCCTL2 |= ADCRES_2;
   \   000048   B2D020000407 BIS.W   #0x20, &0x704
     38            ADCCTL2 &= ~ADCDF;
   \   00004E   B2C20407     BIC.W   #0x8, &0x704
     39            ADCCTL2 &= ~ADCSR;
   \   000052   A2C20407     BIC.W   #0x4, &0x704
     40          // ADCMCTL0 Register
     41            ADCMCTL0 |= ADCSREF_0;
   \   000056   92420A070A07 MOV.W   &0x70a, &0x70a
     42            ADCMCTL0 |= ADCINCH_5;
   \   00005C   B2D005000A07 BIS.W   #0x5, &0x70a
     43            
     44            ADCIE |= ADCIE0;
   \   000062   92D31A07     BIS.W   #0x1, &0x71a
     45            ADCCTL0 |= ADCENC;
   \   000066   A2D30007     BIS.W   #0x2, &0x700
     46            ADCCTL0 |= ADCSC;
   \   00006A   92D30007     BIS.W   #0x1, &0x700
     47          }
   \   00006E   1001         RETA
   \   000070                REQUIRE _A_ADCCTL0_L
   \   000070                REQUIRE _A_ADCCTL1_L
   \   000070                REQUIRE _A_ADCCTL2_L
   \   000070                REQUIRE _A_ADCMCTL0_L
   \   000070                REQUIRE _A_ADCIE_L
     48          

   \                                 In  segment CODE, align 2
     49          void Init_REF(void){
   \                     Init_REF:
     50            PMMCTL0_H = PMMPW_H;
   \   000000   F240A5002101 MOV.B   #0xa5, &0x121
     51            PMMCTL2 = INTREFEN;
   \   000006   92432401     MOV.W   #0x1, &0x124
     52            PMMCTL2 |= REFVSEL_2;
   \   00000A   B2D020002401 BIS.W   #0x20, &0x124
     53            while(!(PMMCTL2 & REFGENRDY));
   \                     ??Init_REF_0:
   \   000010   B2B000102401 BIT.W   #0x1000, &0x124
   \   000016   FC2B         JNC     ??Init_REF_0
     54          }
   \   000018   1001         RETA
   \   00001A                REQUIRE _A_PMMCTL0_L
   \   00001A                REQUIRE _A_PMMCTL2_L
     55          

   \                                 In  segment CODE, align 2
     56          void Init_DAC(void){
   \                     Init_DAC:
     57            DAC_data = 1000;
   \   000000   B240E803.... MOV.W   #0x3e8, &DAC_data
     58            SAC3DAT = DAC_data;
   \   000006   9242....B60C MOV.W   &DAC_data, &0xcb6
     59            SAC3DAC = DACSREF_1;
   \   00000C   B2400010B40C MOV.W   #0x1000, &0xcb4
     60            SAC3DAC |= DACLSEL_0;
   \   000012   9242B40CB40C MOV.W   &0xcb4, &0xcb4
     61          //  SAC3DAC |= DACIE;
     62            SAC3DAC |= DACEN;
   \   000018   92D3B40C     BIS.W   #0x1, &0xcb4
     63            SAC3OA = NMUXEN; 
   \   00001C   B2408000B00C MOV.W   #0x80, &0xcb0
     64            SAC3OA |= PMUXEN; 
   \   000022   B2D2B00C     BIS.W   #0x8, &0xcb0
     65            SAC3OA |= PSEL_1; 
   \   000026   92D3B00C     BIS.W   #0x1, &0xcb0
     66            SAC3OA |= NSEL_1; 
   \   00002A   B2D01000B00C BIS.W   #0x10, &0xcb0
     67            SAC3OA |= OAPM; 
   \   000030   B2D00002B00C BIS.W   #0x200, &0xcb0
     68            SAC3PGA = MSEL_1; 
   \   000036   9243B20C     MOV.W   #0x1, &0xcb2
     69            SAC3OA |= SACEN; 
   \   00003A   B2D00004B00C BIS.W   #0x400, &0xcb0
     70            SAC3OA |= OAEN;
   \   000040   B2D00001B00C BIS.W   #0x100, &0xcb0
     71          }
   \   000046   1001         RETA
   \   000048                REQUIRE _A_SAC3DAT_L
   \   000048                REQUIRE _A_SAC3DAC_L
   \   000048                REQUIRE _A_SAC3OA_L
   \   000048                REQUIRE _A_SAC3PGA_L
     72          
     73          #pragma vector=ADC_VECTOR 

   \                                 In  segment ISR_CODE, align 2
     74          __interrupt void ADC_ISR(void){
   \                     ADC_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
     75            //if(checkAdc==FALSE) return;
     76            //checkAdc=FALSE;
     77            //P6OUT |= IR_LED;
     78            switch(__even_in_range(ADCIV,ADCIV_ADCIFG)){ 
   \   000002   1F421E07     MOV.W   &0x71e, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for ADC_ISR>_0`:
   \   000008   8D3C         JMP     ??ADC_ISR_1
   \   00000A   8C3C         JMP     ??ADC_ISR_1
   \   00000C   8B3C         JMP     ??ADC_ISR_1
   \   00000E   8A3C         JMP     ??ADC_ISR_1
   \   000010   893C         JMP     ??ADC_ISR_1
   \   000012   883C         JMP     ??ADC_ISR_1
   \   000014   003C         JMP     ??ADC_ISR_9
     79              case ADCIV_NONE:
     80                break;
     81              case ADCIV_ADCOVIFG:
     82                break;
     83              case ADCIV_ADCTOVIFG:
     84                break;
     85              case ADCIV_ADCHIIFG:
     86                break;
     87              case ADCIV_ADCLOIFG:
     88                break;
     89              case ADCIV_ADCINIFG:
     90                break;
     91              case ADCIV_ADCIFG:
     92                ADCCTL0 &= ~ADCENC; 
   \                     ??ADC_ISR_9:
   \   000016   A2C30007     BIC.W   #0x2, &0x700
     93                switch (ADC_Channel++){
   \   00001A   1F42....     MOV.W   &ADC_Channel, R15
   \   00001E   0E4F         MOV.W   R15, R14
   \   000020   1E53         ADD.W   #0x1, R14
   \   000022   824E....     MOV.W   R14, &ADC_Channel
   \   000026   0F83         SUB.W   #0x0, R15
   \   000028   0D24         JEQ     ??ADC_ISR_2
   \   00002A   1F83         SUB.W   #0x1, R15
   \   00002C   1E24         JEQ     ??ADC_ISR_3
   \   00002E   1F83         SUB.W   #0x1, R15
   \   000030   3024         JEQ     ??ADC_ISR_4
   \   000032   1F83         SUB.W   #0x1, R15
   \   000034   4324         JEQ     ??ADC_ISR_5
   \   000036   1F83         SUB.W   #0x1, R15
   \   000038   5024         JEQ     ??ADC_ISR_6
   \   00003A   1F83         SUB.W   #0x1, R15
   \   00003C   5D24         JEQ     ??ADC_ISR_7
   \   00003E   1F83         SUB.W   #0x1, R15
   \   000040   6924         JEQ     ??ADC_ISR_8
   \   000042   6C3C         JMP     ??ADC_ISR_0
     94                  case 0x00:
     95                    ADCMCTL0 &= ~ADCINCH_2; 
   \                     ??ADC_ISR_2:
   \   000044   A2C30A07     BIC.W   #0x2, &0x70a
     96                    ADCMCTL0 = ADCINCH_3; 
   \   000048   B24003000A07 MOV.W   #0x3, &0x70a
     97                    ADC_Left_Detect = ADCMEM0; 
   \   00004E   92421207.... MOV.W   &0x712, &ADC_Left_Detect
     98                    ADC_Left_Detect = ADC_Left_Detect >> 2; 
   \   000054   1F42....     MOV.W   &ADC_Left_Detect, R15
   \   000058   5F07         RRUM.W  #0x2, R15
   \   00005A   824F....     MOV.W   R15, &ADC_Left_Detect
     99                    HEXtoBCD(ADC_Left_Detect,1); 
   \   00005E   1D43         MOV.W   #0x1, R13
   \   000060   1C42....     MOV.W   &ADC_Left_Detect, R12
   \   000064   ........     CALLA   #HEXtoBCD
    100                    break; 
   \   000068   593C         JMP     ??ADC_ISR_0
    101                  case 0x01:
    102                    ADCMCTL0 &= ~ADCINCH_3; 
   \                     ??ADC_ISR_3:
   \   00006A   B2F0FCFF0A07 AND.W   #0xfffc, &0x70a
    103                    ADCMCTL0 = ADCINCH_5; 
   \   000070   B24005000A07 MOV.W   #0x5, &0x70a
    104                    ADC_Right_Detect = ADCMEM0; 
   \   000076   92421207.... MOV.W   &0x712, &ADC_Right_Detect
    105                    ADC_Right_Detect = ADC_Right_Detect >> 2; 
   \   00007C   1F42....     MOV.W   &ADC_Right_Detect, R15
   \   000080   5F07         RRUM.W  #0x2, R15
   \   000082   824F....     MOV.W   R15, &ADC_Right_Detect
    106                    HEXtoBCD(ADC_Right_Detect,2); 
   \   000086   2D43         MOV.W   #0x2, R13
   \   000088   1C42....     MOV.W   &ADC_Right_Detect, R12
   \   00008C   ........     CALLA   #HEXtoBCD
    107                    break; 
   \   000090   453C         JMP     ??ADC_ISR_0
    108                  case 0x02:
    109                    ADCMCTL0 &= ~ADCINCH_5; 
   \                     ??ADC_ISR_4:
   \   000092   B2F0FAFF0A07 AND.W   #0xfffa, &0x70a
    110                    ADCMCTL0 = ADCINCH_9; 
   \   000098   B24009000A07 MOV.W   #0x9, &0x70a
    111                    ADC_Thumb = ADCMEM0; 
   \   00009E   92421207.... MOV.W   &0x712, &ADC_Thumb
    112                    ADC_Thumb = ADC_Thumb >> 2; 
   \   0000A4   1F42....     MOV.W   &ADC_Thumb, R15
   \   0000A8   5F07         RRUM.W  #0x2, R15
   \   0000AA   824F....     MOV.W   R15, &ADC_Thumb
    113                    HEXtoBCD(ADC_Thumb,3); 
   \   0000AE   3D400300     MOV.W   #0x3, R13
   \   0000B2   1C42....     MOV.W   &ADC_Thumb, R12
   \   0000B6   ........     CALLA   #HEXtoBCD
    114                    break; 
   \   0000BA   303C         JMP     ??ADC_ISR_0
    115                  case 0x03:
    116                    ADCMCTL0 &= ~ADCINCH_9; 
   \                     ??ADC_ISR_5:
   \   0000BC   B2F0F6FF0A07 AND.W   #0xfff6, &0x70a
    117                    ADCMCTL0 = ADCINCH_10; 
   \   0000C2   B2400A000A07 MOV.W   #0xa, &0x70a
    118                    ADC_Vbat = ADCMEM0; 
   \   0000C8   92421207.... MOV.W   &0x712, &ADC_Vbat
    119                    ADC_Vbat = ADC_Vbat >> 2; 
   \   0000CE   1F42....     MOV.W   &ADC_Vbat, R15
   \   0000D2   5F07         RRUM.W  #0x2, R15
   \   0000D4   824F....     MOV.W   R15, &ADC_Vbat
    120                    //HEXtoBCD(ADC_Vbat,1); 
    121                    break; 
   \   0000D8   213C         JMP     ??ADC_ISR_0
    122                  case 0x04:
    123                    ADCMCTL0 &= ~ADCINCH_10; 
   \                     ??ADC_ISR_6:
   \   0000DA   B2F0F5FF0A07 AND.W   #0xfff5, &0x70a
    124                    ADCMCTL0 = ADCINCH_11; 
   \   0000E0   B2400B000A07 MOV.W   #0xb, &0x70a
    125                    ADC_Vdac = ADCMEM0; 
   \   0000E6   92421207.... MOV.W   &0x712, &ADC_Vdac
    126                    ADC_Vdac = ADC_Vdac >> 2; 
   \   0000EC   1F42....     MOV.W   &ADC_Vdac, R15
   \   0000F0   5F07         RRUM.W  #0x2, R15
   \   0000F2   824F....     MOV.W   R15, &ADC_Vdac
    127                    //HEXtoBCD(ADC_Vdac,2); 
    128                    break;
   \   0000F6   123C         JMP     ??ADC_ISR_0
    129                  case 0x05:
    130                    ADCMCTL0 &= ~ADCINCH_11; 
   \                     ??ADC_ISR_7:
   \   0000F8   B2F0F4FF0A07 AND.W   #0xfff4, &0x70a
    131                    ADCMCTL0 = ADCINCH_2; 
   \   0000FE   A2430A07     MOV.W   #0x2, &0x70a
    132                    ADC_V3v3 = ADCMEM0; 
   \   000102   92421207.... MOV.W   &0x712, &ADC_V3v3
    133                    ADC_V3v3 = ADC_V3v3 >> 2; 
   \   000108   1F42....     MOV.W   &ADC_V3v3, R15
   \   00010C   5F07         RRUM.W  #0x2, R15
   \   00010E   824F....     MOV.W   R15, &ADC_V3v3
    134                    //HEXtoBCD(ADC_V3v3,3); 
    135                    break; 
   \   000112   043C         JMP     ??ADC_ISR_0
    136                  case 0x06:
    137                    ADCIE &= ~ADCIE0;
   \                     ??ADC_ISR_8:
   \   000114   92C31A07     BIC.W   #0x1, &0x71a
    138                    //P6OUT &= ~IR_LED;
    139                    ADC_Channel=0;
   \   000118   8243....     MOV.W   #0x0, &ADC_Channel
    140                    break; 
    141                  default: break;
    142                  }
    143                  ADCCTL0 |= ADCENC; 
   \                     ??ADC_ISR_0:
   \   00011C   A2D30007     BIS.W   #0x2, &0x700
    144                  ADCCTL0 |= ADCSC;
   \   000120   92D30007     BIS.W   #0x1, &0x700
    145              default: break;
    146            }
    147          }
   \                     ??ADC_ISR_1:
   \   000124   3C17         POPM.W  #0x4, R15
   \   000126   0013         RETI
   \   000128                REQUIRE _A_ADCCTL0_L
   \   000128                REQUIRE _A_ADCMCTL0_L
   \   000128                REQUIRE _A_ADCMEM0_L
   \   000128                REQUIRE _A_ADCIE_L
   \   000128                REQUIRE _A_ADCIV_L
    148          
    149          

   \                                 In  segment CODE, align 2
    150          void HEXtoBCD(int hex_value, int line){
   \                     HEXtoBCD:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   084D         MOV.W   R13, R8
    151            int value=0;
   \   000006   0A43         MOV.W   #0x0, R10
    152            adc_char[0] = '0';
   \   000008   F2403000.... MOV.B   #0x30, &adc_char
    153            strcpy(display_line[line],"          ");
   \   00000E   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000012   0C48         MOV.W   R8, R12
   \   000014                RPT     #0xa
   \   000014   49180C58     ADDX.W  R8, R12
   \   000018   3C50....     ADD.W   #display_line, R12
   \   00001C   ........     CALLA   #strcpy
    154            while(hex_value>999){
   \                     ??HEXtoBCD_0:
   \   000020   3B90E803     CMP.W   #0x3e8, R11
   \   000024   0438         JL      ??HEXtoBCD_3
    155              hex_value-=1000;
   \   000026   3B5018FC     ADD.W   #0xfc18, R11
    156              value+=1;
   \   00002A   1A53         ADD.W   #0x1, R10
   \   00002C   F93F         JMP     ??HEXtoBCD_0
    157            }
    158            adc_char[0] = 0x30 + value;
   \                     ??HEXtoBCD_3:
   \   00002E   0E12         PUSH.W  R14
   \   000030   C14A0000     MOV.B   R10, 0(SP)
   \   000034   3E41         POP.W   R14
   \   000036   7E503000     ADD.B   #0x30, R14
   \   00003A   C24E....     MOV.B   R14, &adc_char
    159            display_line[line][0] = 0x30 + value;
   \   00003E   0E12         PUSH.W  R14
   \   000040   C14A0000     MOV.B   R10, 0(SP)
   \   000044   3E41         POP.W   R14
   \   000046   7E503000     ADD.B   #0x30, R14
   \   00004A   0F48         MOV.W   R8, R15
   \   00004C                RPT     #0xa
   \   00004C   49180F58     ADDX.W  R8, R15
   \   000050   CF4E....     MOV.B   R14, display_line(R15)
    160            value = 0;
   \   000054   0A43         MOV.W   #0x0, R10
    161            while(hex_value > 99){
   \                     ??HEXtoBCD_1:
   \   000056   3B906400     CMP.W   #0x64, R11
   \   00005A   1738         JL      ??HEXtoBCD_4
    162              hex_value -= 100;
   \   00005C   3B509CFF     ADD.W   #0xff9c, R11
    163              value += 1;
   \   000060   1A53         ADD.W   #0x1, R10
    164              adc_char[1] = 0x30 + value;
   \   000062   0E12         PUSH.W  R14
   \   000064   C14A0000     MOV.B   R10, 0(SP)
   \   000068   3E41         POP.W   R14
   \   00006A   7E503000     ADD.B   #0x30, R14
   \   00006E   C24E....     MOV.B   R14, &adc_char + 1
    165              display_line[line][1] = 0x30 + value;
   \   000072   0E12         PUSH.W  R14
   \   000074   C14A0000     MOV.B   R10, 0(SP)
   \   000078   3E41         POP.W   R14
   \   00007A   7E503000     ADD.B   #0x30, R14
   \   00007E   0F48         MOV.W   R8, R15
   \   000080                RPT     #0xa
   \   000080   49180F58     ADDX.W  R8, R15
   \   000084   CF4E....     MOV.B   R14, display_line + 1(R15)
   \   000088   E63F         JMP     ??HEXtoBCD_1
    166            }
    167            adc_char[1] = 0x30 + value;
   \                     ??HEXtoBCD_4:
   \   00008A   0E12         PUSH.W  R14
   \   00008C   C14A0000     MOV.B   R10, 0(SP)
   \   000090   3E41         POP.W   R14
   \   000092   7E503000     ADD.B   #0x30, R14
   \   000096   C24E....     MOV.B   R14, &adc_char + 1
    168            display_line[line][1] = 0x30 + value;
   \   00009A   0E12         PUSH.W  R14
   \   00009C   C14A0000     MOV.B   R10, 0(SP)
   \   0000A0   3E41         POP.W   R14
   \   0000A2   7E503000     ADD.B   #0x30, R14
   \   0000A6   0F48         MOV.W   R8, R15
   \   0000A8                RPT     #0xa
   \   0000A8   49180F58     ADDX.W  R8, R15
   \   0000AC   CF4E....     MOV.B   R14, display_line + 1(R15)
    169            value = 0;
   \   0000B0   0A43         MOV.W   #0x0, R10
    170            while(hex_value > 9){
   \                     ??HEXtoBCD_2:
   \   0000B2   3B900A00     CMP.W   #0xa, R11
   \   0000B6   0438         JL      ??HEXtoBCD_5
    171              hex_value -= 10;
   \   0000B8   3B50F6FF     ADD.W   #0xfff6, R11
    172              value += 1;
   \   0000BC   1A53         ADD.W   #0x1, R10
   \   0000BE   F93F         JMP     ??HEXtoBCD_2
    173            }
    174            adc_char[2] = 0x30 + value;
   \                     ??HEXtoBCD_5:
   \   0000C0   0E12         PUSH.W  R14
   \   0000C2   C14A0000     MOV.B   R10, 0(SP)
   \   0000C6   3E41         POP.W   R14
   \   0000C8   7E503000     ADD.B   #0x30, R14
   \   0000CC   C24E....     MOV.B   R14, &adc_char + 2
    175            display_line[line][2] = 0x30 + value;
   \   0000D0   0E12         PUSH.W  R14
   \   0000D2   C14A0000     MOV.B   R10, 0(SP)
   \   0000D6   3E41         POP.W   R14
   \   0000D8   7E503000     ADD.B   #0x30, R14
   \   0000DC   0F48         MOV.W   R8, R15
   \   0000DE                RPT     #0xa
   \   0000DE   49180F58     ADDX.W  R8, R15
   \   0000E2   CF4E....     MOV.B   R14, display_line + 2(R15)
    176            adc_char[3] = 0x30 + hex_value;
   \   0000E6   0E12         PUSH.W  R14
   \   0000E8   C14B0000     MOV.B   R11, 0(SP)
   \   0000EC   3E41         POP.W   R14
   \   0000EE   7E503000     ADD.B   #0x30, R14
   \   0000F2   C24E....     MOV.B   R14, &adc_char + 3
    177            display_line[line][3] = 0x30 + hex_value;
   \   0000F6   0E12         PUSH.W  R14
   \   0000F8   C14B0000     MOV.B   R11, 0(SP)
   \   0000FC   3E41         POP.W   R14
   \   0000FE   7E503000     ADD.B   #0x30, R14
   \   000102   0F48         MOV.W   R8, R15
   \   000104                RPT     #0xa
   \   000104   49180F58     ADDX.W  R8, R15
   \   000108   CF4E....     MOV.B   R14, display_line + 3(R15)
    178            adc_char[4] = 0;
   \   00010C   C243....     MOV.B   #0x0, &adc_char + 4
    179            display_changed=1;
   \   000110   D243....     MOV.B   #0x1, &display_changed
    180          }
   \   000114   3817         POPM.W  #0x4, R11
   \   000116   1001         RETA

   \                                 In  segment INTVEC, offset 0x3a, root
   \                     `??ADC_ISR::??INTVEC 58`:
   \   00003A   ....         DC16    ADC_ISR

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   ADC_ISR
       12   -> HEXtoBCD
     14   HEXtoBCD
       12   -> strcpy
      4   Init_ADC
      4   Init_DAC
      4   Init_REF


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       2  ADC_Channel
     296  ADC_ISR
       2  ADC_ISR::??INTVEC 58
       2  ADC_Left_Detect
       2  ADC_Right_Detect
       2  ADC_Thumb
       2  ADC_V3v3
       2  ADC_Vbat
       2  ADC_Vdac
       2  DAC_data
     280  HEXtoBCD
     112  Init_ADC
      72  Init_DAC
      26  Init_REF
       2  _A_ADCCTL0_L
       2  _A_ADCCTL1_L
       2  _A_ADCCTL2_L
       2  _A_ADCIE_L
       2  _A_ADCIV_L
       2  _A_ADCMCTL0_L
       2  _A_ADCMEM0_L
       2  _A_PMMCTL0_L
       2  _A_PMMCTL2_L
       2  _A_SAC3DAC_L
       2  _A_SAC3DAT_L
       2  _A_SAC3OA_L
       2  _A_SAC3PGA_L
       5  adc_char

 
 490 bytes in segment CODE
  26 bytes in segment DATA16_AN
  11 bytes in segment DATA16_C
  21 bytes in segment DATA16_Z
   2 bytes in segment INTVEC
 296 bytes in segment ISR_CODE
 
 786 bytes of CODE  memory
  11 bytes of CONST memory (+  2 bytes shared)
  21 bytes of DATA  memory (+ 26 bytes shared)

Errors: none
Warnings: none
